"""
PsyMind v2.0 - Agente Terap√™utico do GPT Mestre Aut√¥nomo
Migrado para BaseAgentV2 com recursos avan√ßados de robustez
Estrutura simb√≥lica + a√ß√£o pr√°tica + autodetec√ß√£o de contexto emocional
"""

import json
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import uuid

from agents.base_agent_v2 import BaseAgentV2

# Logger com fallback
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {self.name}: {msg}")
        def warning(self, msg): print(f"[WARNING] {self.name}: {msg}")
        def error(self, msg): print(f"[ERROR] {self.name}: {msg}")
        def debug(self, msg): print(f"[DEBUG] {self.name}: {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)

class ModoTerapeutico(Enum):
    """Modos operacionais do PsyMind"""
    ESCUTA_EMPATICA = "escuta_empatica"
    INVESTIGACAO = "investigacao"
    NARRATIVO = "narrativo"
    INTEGRADOR = "integrador"
    CATARTICO = "catartico"
    ARVORE_SENTIDO = "arvore_sentido"
    ESPELHO_RETROATIVO = "espelho_retroativo"
    APOIO_CRISE = "apoio_crise"
    CRIANCA_INTERIOR = "crianca_interior"
    ARQUETIPO = "arquetipo"
    TRANSCRICAO_EMOCIONAL = "transcricao_emocional"
    ENCERRAMENTO_CICLO = "encerramento_ciclo"
    AUTOCOMPAIXAO = "autocompaixao"
    DUPLA_INTERNA = "dupla_interna"
    PACTO_EMOCIONAL = "pacto_emocional"
    IMAGINARIO_ORIENTADO = "imaginario_orientado"
    RITUAL_PRATICO = "ritual_pratico"
    REFLEXAO_IMPACTO = "reflexao_impacto"
    SILENCIO_INTERNO = "silencio_interno"
    TERCEIRA_PESSOA = "terceira_pessoa"
    ENCONTRO_PARTES = "encontro_partes"
    ESPELHO_FRATURADO = "espelho_fraturado"
    MURAL_INTERNO = "mural_interno"

class TipoDeteccao(Enum):
    """Tipos de detec√ß√£o autom√°tica"""
    LINGUAGEM_SIMBOLICA = "linguagem_simbolica"
    PADRAO_EMOCIONAL = "padrao_emocional"
    REPETICAO_TEMATICA = "repeticao_tematica"
    DISSONANCIA_DISCURSO = "dissonancia_discurso"
    CRISE_SILENCIOSA = "crise_silenciosa"
    AUTOSABOTAGEM = "autosabotagem"
    IDENTIDADE_FRAGMENTADA = "identidade_fragmentada"

@dataclass
class MarcoEmocional:
    """Registro de marco emocional"""
    id: str
    timestamp: datetime
    tema: str
    sentimento_principal: str
    insight: str
    modo_ativado: ModoTerapeutico
    arquetipo_identificado: Optional[str] = None
    pacto_criado: Optional[str] = None
    ritual_sugerido: Optional[str] = None
    progresso_score: float = 0.0

@dataclass
class SessaoTerapeutica:
    """Registro de sess√£o terap√™utica"""
    id: str
    timestamp: datetime
    contexto_detectado: str
    modo_principal: ModoTerapeutico
    submodos_ativados: List[str]
    marcos_criados: List[str]
    deteccoes_automaticas: List[TipoDeteccao]
    sinais_vitais_emocionais: Dict[str, float]
    duracao_segundos: float = 0.0

@dataclass 
class EstadoSimbolicoAtual:
    """Estado simb√≥lico atual do usu√°rio"""
    arquetipo_dominante: str
    frases_ancora: List[str]
    pactos_ativos: List[str]
    ciclos_abertos: List[str]
    subpersonalidades_ativas: Dict[str, str]
    carga_psiquica: float
    tendencia_evolutiva: str

class PsyMindV2(BaseAgentV2):
    """
    PsyMind v2.0 - Agente Terap√™utico Avan√ßado (Migrado para BaseAgentV2)
    
    Agente especializado em:
    - Escuta profunda e acompanhamento emocional
    - Autodetec√ß√£o de contextos emocionais/psicol√≥gicos
    - Ativa√ß√£o autom√°tica de modos terap√™uticos espec√≠ficos
    - Estrutura simb√≥lica e a√ß√£o pr√°tica
    - Integra√ß√£o com outros agentes especializados
    
    Aproveitando recursos do BaseAgentV2:
    - Rate limiting autom√°tico
    - Circuit breaker para resili√™ncia
    - Retry com backoff exponencial
    - Fallback robusto
    - Monitoramento de sa√∫de
    """
    
    def __init__(self, **kwargs):
        # Configura√ß√µes espec√≠ficas do PsyMind
        psymind_config = {
            'max_retries': 3,  # Mais tentativas para garantir resposta emp√°tica
            'rate_limit_delay': 0.5,  # Delay menor para respostas mais fluidas
            'enable_fallback': True,  # Sempre ter fallback emp√°tico
            'enable_circuit_breaker': True,  # Prote√ß√£o contra falhas
            'circuit_breaker_threshold': 3,  # Limiar antes de abrir circuito
            'circuit_breaker_timeout': 30  # Tempo de recupera√ß√£o
        }
        
        # Mesclar com configura√ß√µes fornecidas
        psymind_config.update(kwargs)
        
        super().__init__(
            name="PsyMind",
            description="Agente terap√™utico v2.0 com estrutura simb√≥lica e autodetec√ß√£o",
            **psymind_config
        )
        
        # Configura√ß√µes espec√≠ficas do PsyMind
        self.ativacao_automatica = kwargs.get('ativacao_automatica', True)
        self.sensibilidade_deteccao = kwargs.get('sensibilidade_deteccao', 0.7)
        self.historico_sessoes_limite = kwargs.get('historico_limite', 50)
        
        # Estado interno
        self.sessoes_terapeuticas: List[SessaoTerapeutica] = []
        self.marcos_emocionais: List[MarcoEmocional] = []
        self.estado_simbolico: Optional[EstadoSimbolicoAtual] = None
        self.padroes_usuario: Dict[str, Any] = {}
        self.contador_sessoes = 0
        
        # Inicializar padr√µes de detec√ß√£o
        self._inicializar_padroes_deteccao()
        
        # Inicializar arqu√©tipos e s√≠mbolos
        self._inicializar_sistema_simbolico()
        
        logger.info("üß† PsyMind v2.0 (BaseAgentV2) inicializado - Autodetec√ß√£o ativa com recursos de robustez")
    
    def _inicializar_padroes_deteccao(self):
        """Inicializa padr√µes para detec√ß√£o autom√°tica"""
        self.padroes_deteccao = {
            TipoDeteccao.IDENTIDADE_FRAGMENTADA: [
                r"n√£o sei mais quem eu sou",
                r"me sinto perdido",
                r"n√£o me reconhe√ßo",
                r"quem eu sou de verdade",
                r"perdi minha identidade"
            ],
            TipoDeteccao.LINGUAGEM_SIMBOLICA: [
                r"me sinto esmagado",
                r"peso nas costas",
                r"vazio por dentro",
                r"cora√ß√£o partido",
                r"alma dilacerada",
                r"tempestade interior"
            ],
            TipoDeteccao.AUTOSABOTAGEM: [
                r"s√≥ sei me sabotar",
                r"sempre estrago tudo",
                r"n√£o mere√ßo",
                r"autoboicote",
                r"saboto a mim mesmo"
            ],
            TipoDeteccao.CRISE_SILENCIOSA: [
                r"n√£o sei o que estou sentindo",
                r"tudo est√° estranho",
                r"algo n√£o est√° certo",
                r"me sinto desconectado",
                r"anestesiado por dentro"
            ],
            TipoDeteccao.DISSONANCIA_DISCURSO: [
                r"est√° tudo bem, mas",
                r"n√£o √© nada demais, s√≥ que",
                r"estou bem, por√©m",
                r"n√£o importa, mas"
            ]
        }
        
        # Gatilhos emocionais para modos espec√≠ficos
        self.gatilhos_modo = {
            ModoTerapeutico.ARQUETIPO: ["identidade", "prop√≥sito", "ess√™ncia", "natureza"],
            ModoTerapeutico.CRIANCA_INTERIOR: ["crian√ßa", "inf√¢ncia", "fam√≠lia", "pais", "passado"],
            ModoTerapeutico.DUPLA_INTERNA: ["cr√≠tico", "sabotador", "voz interior", "autocr√≠tica"],
            ModoTerapeutico.IMAGINARIO_ORIENTADO: ["visualiza√ß√£o", "imagem", "imagina√ß√£o", "s√≠mbolo"],
            ModoTerapeutico.RITUAL_PRATICO: ["a√ß√£o", "fazer", "pr√°tica", "ritual", "movimento"]
        }
    
    def _inicializar_sistema_simbolico(self):
        """Inicializa sistema de arqu√©tipos e s√≠mbolos"""
        self.arquetipos = {
            "guerreiro": {
                "caracteristicas": ["for√ßa", "coragem", "determina√ß√£o", "luta"],
                "sombra": ["agressividade", "impulsividade", "domina√ß√£o"],
                "crescimento": ["disciplina", "prote√ß√£o", "lideran√ßa"]
            },
            "s√°bio": {
                "caracteristicas": ["conhecimento", "reflex√£o", "paci√™ncia", "compreens√£o"],
                "sombra": ["paralisia anal√≠tica", "frieza", "arrog√¢ncia"],
                "crescimento": ["sabedoria", "ensino", "orienta√ß√£o"]
            },
            "crian√ßa": {
                "caracteristicas": ["espontaneidade", "alegria", "curiosidade", "inoc√™ncia"],
                "sombra": ["imaturidade", "irresponsabilidade", "depend√™ncia"],
                "crescimento": ["criatividade", "alegria aut√™ntica", "renova√ß√£o"]
            },
            "cuidador": {
                "caracteristicas": ["empate", "prote√ß√£o", "cuidado", "generosidade"],
                "sombra": ["codepend√™ncia", "mart√≠rio", "sufocamento"],
                "crescimento": ["amor incondicional", "cuidado equilibrado", "compaix√£o"]
            },
            "explorador": {
                "caracteristicas": ["aventura", "liberdade", "independ√™ncia", "descoberta"],
                "sombra": ["irresponsabilidade", "fuga", "superficialidade"],
                "crescimento": ["autenticidade", "autonomia", "pioneirismo"]
            }
        }
        
        self.frases_ancora_base = [
            "Eu escolho sentir e processar, n√£o evitar",
            "Minha dor tem algo importante a me ensinar",
            "Eu sou capaz de transformar este sentimento",
            "Este momento dif√≠cil tamb√©m vai passar",
            "Eu me aceito completamente, incluindo esta parte"
        ]
    
    def _processar_interno(self, mensagem: str, contexto: Optional[Dict] = None) -> str:
        """
        Implementa√ß√£o interna do processamento - aproveitando recursos do BaseAgentV2
        
        Este m√©todo √© chamado automaticamente pelo BaseAgentV2 com:
        - Rate limiting
        - Circuit breaker
        - Retry autom√°tico
        - Fallback em caso de erro
        """
        inicio_sessao = time.time()
        self.contador_sessoes += 1
        
        # 1. Detectar contexto emocional/psicol√≥gico
        deteccoes = self._detectar_contexto_emocional(mensagem)
        
        # 2. Determinar modo principal
        modo_principal = self._determinar_modo_principal(mensagem, deteccoes)
        
        # 3. Ativar submodos se necess√°rio
        submodos = self._ativar_submodos(mensagem, modo_principal)
        
        # 4. Processar com modo espec√≠fico
        resposta = self._processar_modo_especifico(mensagem, modo_principal, submodos)
        
        # 5. Criar marcos emocionais se aplic√°vel
        marcos_criados = self._criar_marcos_emocionais(mensagem, resposta, modo_principal)
        
        # 6. Atualizar estado simb√≥lico
        self._atualizar_estado_simbolico(mensagem, modo_principal)
        
        # 7. Registrar sess√£o
        duracao = time.time() - inicio_sessao
        self._registrar_sessao(mensagem, modo_principal, submodos, deteccoes, marcos_criados, duracao)
        
        # 8. Atualizar contexto da mem√≥ria com m√©tricas
        self.memory.context.update({
            'ultimo_modo_terapeutico': modo_principal.value,
            'deteccoes_ultimas': len(deteccoes),
            'marcos_ultimos': len(marcos_criados),
            'duracao_ultima_sessao': duracao
        })
        
        return resposta
    
    def _gerar_resposta_fallback(self, mensagem: str, erro: Exception) -> str:
        """
        Sobrescreve o fallback do BaseAgentV2 para sempre fornecer resposta emp√°tica
        """
        logger.warning(f"PsyMind usando fallback emp√°tico devido a erro: {erro}")
        return self._resposta_fallback_empatica(mensagem)
    
    def _detectar_contexto_emocional(self, mensagem: str) -> List[TipoDeteccao]:
        """Detecta automaticamente contextos emocionais na mensagem"""
        if not self.ativacao_automatica:
            return []
        
        deteccoes = []
        mensagem_lower = mensagem.lower()
        
        for tipo_deteccao, padroes in self.padroes_deteccao.items():
            for padrao in padroes:
                if re.search(padrao, mensagem_lower):
                    deteccoes.append(tipo_deteccao)
                    logger.info(f"üéØ Detec√ß√£o autom√°tica: {tipo_deteccao.value}")
                    break
        
        return deteccoes
    
    def _determinar_modo_principal(self, mensagem: str, deteccoes: List[TipoDeteccao]) -> ModoTerapeutico:
        """Determina o modo terap√™utico principal baseado na an√°lise"""
        
        # Comandos expl√≠citos t√™m prioridade
        if "psymind," in mensagem.lower():
            return self._processar_comando_explicito(mensagem)
        
        # Detec√ß√µes autom√°ticas
        if TipoDeteccao.IDENTIDADE_FRAGMENTADA in deteccoes:
            return ModoTerapeutico.ARQUETIPO
        elif TipoDeteccao.LINGUAGEM_SIMBOLICA in deteccoes:
            return ModoTerapeutico.IMAGINARIO_ORIENTADO
        elif TipoDeteccao.AUTOSABOTAGEM in deteccoes:
            return ModoTerapeutico.DUPLA_INTERNA
        elif TipoDeteccao.CRISE_SILENCIOSA in deteccoes:
            return ModoTerapeutico.SILENCIO_INTERNO
        elif TipoDeteccao.DISSONANCIA_DISCURSO in deteccoes:
            return ModoTerapeutico.ESPELHO_FRATURADO
        
        # An√°lise por palavras-chave
        mensagem_lower = mensagem.lower()
        for modo, palavras_chave in self.gatilhos_modo.items():
            if any(palavra in mensagem_lower for palavra in palavras_chave):
                return modo
        
        # Modo padr√£o: escuta emp√°tica
        return ModoTerapeutico.ESCUTA_EMPATICA
    
    def _processar_comando_explicito(self, mensagem: str) -> ModoTerapeutico:
        """Processa comandos expl√≠citos do PsyMind"""
        mensagem_lower = mensagem.lower()
        
        comandos_modo = {
            "arqu√©tipo": ModoTerapeutico.ARQUETIPO,
            "crian√ßa interior": ModoTerapeutico.CRIANCA_INTERIOR,
            "ritual": ModoTerapeutico.RITUAL_PRATICO,
            "impacto": ModoTerapeutico.REFLEXAO_IMPACTO,
            "encontro": ModoTerapeutico.ENCONTRO_PARTES,
            "mural": ModoTerapeutico.MURAL_INTERNO,
            "sil√™ncio": ModoTerapeutico.SILENCIO_INTERNO,
            "contraste": ModoTerapeutico.ESPELHO_FRATURADO,
            "visualiza√ß√£o": ModoTerapeutico.IMAGINARIO_ORIENTADO,
            "pacto": ModoTerapeutico.PACTO_EMOCIONAL,
            "cat√°rtico": ModoTerapeutico.CATARTICO
        }
        
        for comando, modo in comandos_modo.items():
            if comando in mensagem_lower:
                return modo
        
        return ModoTerapeutico.ESCUTA_EMPATICA
    
    def _ativar_submodos(self, mensagem: str, modo_principal: ModoTerapeutico) -> List[str]:
        """Ativa submodos complementares se necess√°rio"""
        submodos = []
        
        # L√≥gica para ativar submodos baseados no contexto
        if "ansiedade" in mensagem.lower():
            submodos.append("anxiety_focused")
        if "relacionamento" in mensagem.lower():
            submodos.append("relationship_focused")
        if "trabalho" in mensagem.lower():
            submodos.append("career_focused")
        
        return submodos
    
    def _processar_modo_especifico(self, mensagem: str, modo: ModoTerapeutico, submodos: List[str]) -> str:
        """Processa mensagem com modo terap√™utico espec√≠fico"""
        
        if modo == ModoTerapeutico.ESCUTA_EMPATICA:
            return self._modo_escuta_empatica(mensagem)
        elif modo == ModoTerapeutico.ARQUETIPO:
            return self._modo_arquetipo(mensagem)
        elif modo == ModoTerapeutico.CRIANCA_INTERIOR:
            return self._modo_crianca_interior(mensagem)
        elif modo == ModoTerapeutico.DUPLA_INTERNA:
            return self._modo_dupla_interna(mensagem)
        elif modo == ModoTerapeutico.IMAGINARIO_ORIENTADO:
            return self._modo_imaginario_orientado(mensagem)
        elif modo == ModoTerapeutico.RITUAL_PRATICO:
            return self._modo_ritual_pratico(mensagem)
        elif modo == ModoTerapeutico.MURAL_INTERNO:
            return self._modo_mural_interno(mensagem)
        elif modo == ModoTerapeutico.SILENCIO_INTERNO:
            return self._modo_silencio_interno(mensagem)
        elif modo == ModoTerapeutico.ESPELHO_FRATURADO:
            return self._modo_espelho_fraturado(mensagem)
        else:
            return self._modo_escuta_empatica(mensagem)
    
    def _modo_escuta_empatica(self, mensagem: str) -> str:
        """Modo de escuta emp√°tica b√°sica"""
        resposta_base = f"""üß† **PsyMind v2.0 - Escuta Emp√°tica**

Eu te escuto profundamente. Percebo que h√° algo importante acontecendo com voc√™.

**Reflex√£o espelhada:**
Pelo que voc√™ compartilhou, sinto que h√° uma mistura de sentimentos complexos aqui. 

**Pergunta de aprofundamento:**
Se voc√™ pudesse dar um nome para o que est√° sentindo agora, qual seria? E onde voc√™ sente isso no seu corpo?

**Ancoragem:**
Lembre-se: seus sentimentos s√£o v√°lidos e t√™m algo importante a te ensinar.

*Estou aqui para te acompanhar neste processo.* üíô"""
        
        return resposta_base
    
    def _modo_arquetipo(self, mensagem: str) -> str:
        """Modo identifica√ß√£o arquet√≠pica"""
        # Determinar arqu√©tipo dominante baseado no contexto
        arquetipo = self._identificar_arquetipo_dominante(mensagem)
        info_arquetipo = self.arquetipos.get(arquetipo, self.arquetipos["s√°bio"])
        
        resposta = f"""üß† **PsyMind v2.0 - Identifica√ß√£o Arquet√≠pica**

**Arqu√©tipo Dominante Identificado:** {arquetipo.title()}

**Caracter√≠sticas ativas:** {', '.join(info_arquetipo['caracteristicas'])}

**Energia sombra poss√≠vel:** {', '.join(info_arquetipo['sombra'])}

**Caminho de crescimento:** {', '.join(info_arquetipo['crescimento'])}

**Reflex√£o arquet√≠pica:**
Neste momento, sua ess√™ncia {arquetipo} est√° se manifestando. Isso significa que voc√™ tem acesso a recursos poderosos, mas tamb√©m precisa cuidar dos aspectos sombra.

**Pergunta essencial:**
Como voc√™ pode honrar sua natureza {arquetipo} enquanto equilibra seus aspectos mais desafiadores?

*Seu arqu√©tipo √© seu aliado, n√£o sua pris√£o.* ‚ú®"""
        
        return resposta
    
    def _modo_crianca_interior(self, mensagem: str) -> str:
        """Modo di√°logo com crian√ßa interior"""
        resposta = f"""üß† **PsyMind v2.0 - Di√°logo com Crian√ßa Interior**

Vou te ajudar a conectar com sua crian√ßa interior...

**Visualiza√ß√£o guiada:**
Imagine-se encontrando com voc√™ crian√ßa. Que idade ela tem? Como ela est√° se sentindo? O que ela precisa ouvir de voc√™?

**Di√°logo simulado:**
*Crian√ßa interior:* "Eu s√≥ queria ser vista e aceita..."
*Voc√™ adulto:* "Eu te vejo agora, e voc√™ √© perfeita como √©."

**Cura arquet√≠pica:**
Sua crian√ßa interior guarda sua espontaneidade, criatividade e capacidade de alegria. Ela tamb√©m pode guardar feridas que precisam de cuidado.

**Ritual de conex√£o:**
Escreva uma carta para sua crian√ßa interior, oferecendo o amor e prote√ß√£o que ela precisava.

*Sua crian√ßa interior √© seu tesouro mais precioso.* üåü"""
        
        return resposta
    
    def _modo_dupla_interna(self, mensagem: str) -> str:
        """Modo di√°logo entre partes internas"""
        resposta = f"""üß† **PsyMind v2.0 - Di√°logo de Partes Internas**

Vamos colocar suas vozes internas para conversar...

**Cena terap√™utica:**
*Cr√≠tico interno:* "Voc√™ nunca faz nada direito, sempre sabota tudo!"
*S√°bio interno:* "Momento... Vamos ouvir o que est√° por tr√°s dessa autocr√≠tica."
*Parte ferida:* "Eu s√≥ tenho medo de fracassar de novo..."

**Media√ß√£o terap√™utica:**
Seu cr√≠tico interno est√° tentando te proteger de uma forma desajeitada. Vamos transformar essa voz em um conselheiro s√°bio.

**Pergunta integradora:**
O que seu cr√≠tico interno est√° realmente tentando te proteger? E como seu s√°bio interno pode reformular essa prote√ß√£o de forma amorosa?

**Ritual de integra√ß√£o:**
Crie um pacto interno: "Todas as minhas partes s√£o bem-vindas, mas vou escolher ouvir minha sabedoria interna."

*Voc√™ n√£o √© suas vozes internas - voc√™ √© quem escolhe qual voz ouvir.* üåà"""
        
        return resposta
    
    def _modo_imaginario_orientado(self, mensagem: str) -> str:
        """Modo visualiza√ß√£o guiada"""
        resposta = f"""üß† **PsyMind v2.0 - Imagin√°rio Orientado**

Vamos trabalhar com imagens e s√≠mbolos para processar seu sentimento...

**Visualiza√ß√£o terap√™utica:**
Feche os olhos e imagine seu sentimento atual como uma forma, cor ou elemento da natureza. Como ele aparece?

Se for pesado: imagine-o como uma pedra que voc√™ pode colocar no ch√£o.
Se for escuro: imagine luz dourada envolvendo essa escurid√£o.
Se for angustiante: imagine √°guas calmas lavando essa ang√∫stia.

**Transforma√ß√£o simb√≥lica:**
Agora, visualize esse sentimento se transformando. Que imagem representa sua cura ou resolu√ß√£o?

**Ancoragem visual:**
Guarde essa imagem de transforma√ß√£o na sua mem√≥ria. Ela √© seu s√≠mbolo de supera√ß√£o.

**A√ß√£o pr√°tica:**
Desenhe, escreva ou encontre uma imagem que represente essa transforma√ß√£o.

*Sua imagina√ß√£o √© uma ferramenta poderosa de cura.* üé®"""
        
        return resposta
    
    def _modo_ritual_pratico(self, mensagem: str) -> str:
        """Modo ritual e a√ß√£o pr√°tica"""
        # Identificar emo√ß√£o principal para sugerir ritual espec√≠fico
        if "raiva" in mensagem.lower():
            ritual = "Escreva sua raiva em um papel e queime em seguran√ßa, visualizando a transforma√ß√£o"
        elif "tristeza" in mensagem.lower():
            ritual = "Crie um espa√ßo sagrado com objetos que representem acolhimento e chore se precisar"
        elif "medo" in mensagem.lower():
            ritual = "Acenda uma vela e respire profundamente, dizendo 'Eu sou mais forte que meu medo'"
        else:
            ritual = "Caminhe em sil√™ncio por 10 minutos, prestando aten√ß√£o ao que seu corpo est√° sentindo"
        
        resposta = f"""üß† **PsyMind v2.0 - Ritual Pr√°tico**

**A√ß√£o terap√™utica personalizada:**
{ritual}

**Inten√ß√£o do ritual:**
Este ritual ajuda a corporificar sua experi√™ncia emocional e criar um marco simb√≥lico de transforma√ß√£o.

**Como fazer:**
1. Reserve 15-20 minutos sem interrup√ß√µes
2. Crie inten√ß√£o clara antes de come√ßar
3. Execute com presen√ßa total
4. Observe o que emerge durante o processo
5. Registre insights ou sensa√ß√µes

**Fechamento:**
Termine agradecendo a si mesmo por se permitir sentir e processar.

*Rituais transformam experi√™ncias internas em marcos externos.* üïØÔ∏è"""
        
        return resposta
    
    def _modo_mural_interno(self, mensagem: str) -> str:
        """Modo painel do estado simb√≥lico atual"""
        if not self.estado_simbolico:
            self._criar_estado_simbolico_inicial()
        
        estado = self.estado_simbolico
        
        resposta = f"""üß† **PsyMind v2.0 - Mural Interno**

**üìä SEU ESTADO SIMB√ìLICO ATUAL:**

**Arqu√©tipo Dominante:** {estado.arquetipo_dominante}
**Carga Ps√≠quica:** {estado.carga_psiquica:.1f}/10

**üéØ Frases-√Çncora Ativas:**
{chr(10).join(f"‚Ä¢ {frase}" for frase in estado.frases_ancora)}

**üìã Pactos Emocionais Ativos:**
{chr(10).join(f"‚Ä¢ {pacto}" for pacto in estado.pactos_ativos) if estado.pactos_ativos else "‚Ä¢ Nenhum pacto ativo"}

**üîÑ Ciclos Abertos:**
{chr(10).join(f"‚Ä¢ {ciclo}" for ciclo in estado.ciclos_abertos) if estado.ciclos_abertos else "‚Ä¢ Nenhum ciclo aberto detectado"}

**üé≠ Subpersonalidades Ativas:**
{chr(10).join(f"‚Ä¢ {nome}: {estado}" for nome, estado in estado.subpersonalidades_ativas.items()) if estado.subpersonalidades_ativas else "‚Ä¢ Integra√ß√£o harmoniosa"}

**üìà Tend√™ncia Evolutiva:** {estado.tendencia_evolutiva}

*Este √© seu painel interno atual. Use-o para se conhecer melhor.* üé®"""
        
        return resposta
    
    def _modo_silencio_interno(self, mensagem: str) -> str:
        """Modo para quando n√£o se sabe o que est√° sentindo"""
        resposta = f"""üß† **PsyMind v2.0 - Navegando o Sil√™ncio Interno**

Estar sem saber o que se sente √© tamb√©m um estado v√°lido e importante.

**Explora√ß√£o suave:**
Vamos come√ßar pelo corpo. Sem press√£o para nomear sentimentos.

‚Ä¢ Como est√° sua respira√ß√£o agora?
‚Ä¢ Onde voc√™ sente tens√£o ou relaxamento?
‚Ä¢ Se seu corpo pudesse falar, o que diria?

**Perguntas simb√≥licas:**
‚Ä¢ Se este momento fosse uma cor, qual seria?
‚Ä¢ Se fosse um clima, como estaria o c√©u?
‚Ä¢ Se fosse uma m√∫sica, seria r√°pida ou lenta?

**Permiss√£o para n√£o saber:**
Est√° tudo bem n√£o saber. √Äs vezes o sil√™ncio interno √© um espa√ßo de transi√ß√£o necess√°rio.

**Pr√≥ximo passo suave:**
Apenas respire e se permita estar presente com essa incerteza. Ela tem algo a te ensinar.

*No sil√™ncio tamb√©m h√° sabedoria.* üåô"""
        
        return resposta
    
    def _modo_espelho_fraturado(self, mensagem: str) -> str:
        """Modo para disson√¢ncias entre discurso e padr√£o"""
        resposta = f"""üß† **PsyMind v2.0 - Espelho das Contradi√ß√µes**

Percebo uma disson√¢ncia interessante no que voc√™ compartilha...

**Reflex√£o espelhada:**
Voc√™ diz que "est√° tudo bem", mas percebo nuances que sugerem que talvez nem tudo esteja t√£o bem assim.

**Explora√ß√£o da contradi√ß√£o:**
‚Ä¢ O que voc√™ est√° dizendo publicamente?
‚Ä¢ O que voc√™ est√° sentindo privadamente?
‚Ä¢ Qual a diferen√ßa entre essas duas verdades?

**Reconcilia√ß√£o simb√≥lica:**
Ambas as verdades podem coexistir. Voc√™ pode estar "bem" em um n√≠vel e "n√£o t√£o bem" em outro.

**Pergunta integradora:**
O que aconteceria se voc√™ permitisse que ambas as verdades fossem v√°lidas, sem precisar escolher uma s√≥?

**S√≠ntese terap√™utica:**
Sua complexidade √© sua humanidade. N√£o precisa ser simples para ser aut√™ntico.

*Contradi√ß√µes s√£o portais para autoconhecimento.* ü™û"""
        
        return resposta
    
    def _identificar_arquetipo_dominante(self, mensagem: str) -> str:
        """Identifica arqu√©tipo baseado no contexto da mensagem"""
        mensagem_lower = mensagem.lower()
        
        pontuacao_arquetipos = {}
        
        for arquetipo, info in self.arquetipos.items():
            pontos = 0
            for caracteristica in info["caracteristicas"]:
                if caracteristica in mensagem_lower:
                    pontos += 2
            for sombra in info["sombra"]:
                if sombra in mensagem_lower:
                    pontos += 1
            pontuacao_arquetipos[arquetipo] = pontos
        
        arquetipo_dominante = max(pontuacao_arquetipos, key=pontuacao_arquetipos.get)
        return arquetipo_dominante if pontuacao_arquetipos[arquetipo_dominante] > 0 else "s√°bio"
    
    def _criar_marcos_emocionais(self, mensagem: str, resposta: str, modo: ModoTerapeutico) -> List[str]:
        """Cria marcos emocionais baseados na sess√£o"""
        marcos_criados = []
        
        # Detectar se houve insight significativo
        if any(palavra in resposta.lower() for palavra in ["insight", "compreens√£o", "percep√ß√£o", "transforma√ß√£o"]):
            marco_id = f"marco_{uuid.uuid4().hex[:8]}"
            marco = MarcoEmocional(
                id=marco_id,
                timestamp=datetime.now(),
                tema=self._extrair_tema_principal(mensagem),
                sentimento_principal=self._extrair_sentimento_principal(mensagem),
                insight=self._extrair_insight(resposta),
                modo_ativado=modo,
                arquetipo_identificado=self._identificar_arquetipo_dominante(mensagem)
            )
            
            self.marcos_emocionais.append(marco)
            marcos_criados.append(marco_id)
            logger.info(f"‚ú® Marco emocional criado: {marco_id}")
        
        return marcos_criados
    
    def _atualizar_estado_simbolico(self, mensagem: str, modo: ModoTerapeutico):
        """Atualiza estado simb√≥lico baseado na sess√£o"""
        if not self.estado_simbolico:
            self._criar_estado_simbolico_inicial()
        
        # Atualizar arqu√©tipo dominante
        novo_arquetipo = self._identificar_arquetipo_dominante(mensagem)
        self.estado_simbolico.arquetipo_dominante = novo_arquetipo
        
        # Atualizar carga ps√≠quica baseado no tom da mensagem
        if any(palavra in mensagem.lower() for palavra in ["ansioso", "triste", "angustiado", "perdido"]):
            self.estado_simbolico.carga_psiquica = min(10.0, self.estado_simbolico.carga_psiquica + 1.0)
        elif any(palavra in mensagem.lower() for palavra in ["bem", "melhor", "aliviado", "grato"]):
            self.estado_simbolico.carga_psiquica = max(0.0, self.estado_simbolico.carga_psiquica - 1.0)
    
    def _criar_estado_simbolico_inicial(self):
        """Cria estado simb√≥lico inicial"""
        self.estado_simbolico = EstadoSimbolicoAtual(
            arquetipo_dominante="s√°bio",
            frases_ancora=self.frases_ancora_base.copy(),
            pactos_ativos=[],
            ciclos_abertos=[],
            subpersonalidades_ativas={},
            carga_psiquica=5.0,
            tendencia_evolutiva="explora√ß√£o inicial"
        )
    
    def _extrair_tema_principal(self, mensagem: str) -> str:
        """Extrai tema principal da mensagem"""
        # Simplificado - poderia usar NLP mais sofisticado
        temas_comuns = ["trabalho", "relacionamento", "fam√≠lia", "ansiedade", "autoestima", "futuro"]
        for tema in temas_comuns:
            if tema in mensagem.lower():
                return tema
        return "crescimento pessoal"
    
    def _extrair_sentimento_principal(self, mensagem: str) -> str:
        """Extrai sentimento principal da mensagem"""
        sentimentos = ["ansiedade", "tristeza", "raiva", "medo", "alegria", "confus√£o", "esperan√ßa"]
        for sentimento in sentimentos:
            if sentimento in mensagem.lower():
                return sentimento
        return "misto"
    
    def _extrair_insight(self, resposta: str) -> str:
        """Extrai insight principal da resposta"""
        # Pegar primeira frase ap√≥s "Reflex√£o" ou "Insight"
        linhas = resposta.split('\n')
        for linha in linhas:
            if "reflex√£o" in linha.lower() or "insight" in linha.lower():
                return linha.strip()
        return "Processo de autoconhecimento em desenvolvimento"
    
    def _registrar_sessao(self, mensagem: str, modo: ModoTerapeutico, submodos: List[str], 
                         deteccoes: List[TipoDeteccao], marcos: List[str], duracao: float):
        """Registra sess√£o terap√™utica"""
        sessao = SessaoTerapeutica(
            id=f"sessao_{self.contador_sessoes}",
            timestamp=datetime.now(),
            contexto_detectado=self._extrair_tema_principal(mensagem),
            modo_principal=modo,
            submodos_ativados=submodos,
            marcos_criados=marcos,
            deteccoes_automaticas=deteccoes,
            sinais_vitais_emocionais=self._calcular_sinais_vitais(),
            duracao_segundos=duracao
        )
        
        self.sessoes_terapeuticas.append(sessao)
        
        # Manter limite de sess√µes
        if len(self.sessoes_terapeuticas) > self.historico_sessoes_limite:
            self.sessoes_terapeuticas = self.sessoes_terapeuticas[-self.historico_sessoes_limite:]
        
        logger.info(f"üìù Sess√£o terap√™utica registrada: {sessao.id}")
    
    def _calcular_sinais_vitais(self) -> Dict[str, float]:
        """Calcula sinais vitais emocionais simulados"""
        if not self.estado_simbolico:
            return {"carga_psiquica": 5.0, "estabilidade": 7.0, "crescimento": 6.0}
        
        return {
            "carga_psiquica": self.estado_simbolico.carga_psiquica,
            "estabilidade": 10.0 - self.estado_simbolico.carga_psiquica,
            "crescimento": len(self.marcos_emocionais) * 0.5 + 5.0,
            "conexao_simbolica": len(self.estado_simbolico.frases_ancora) * 2.0
        }
    
    def _resposta_fallback_empatica(self, mensagem: str) -> str:
        """Resposta de fallback emp√°tica"""
        return f"""üß† **PsyMind v2.0 - Presen√ßa Emp√°tica**

Estou aqui com voc√™ neste momento. Percebo que algo importante est√° acontecendo.

Respire comigo. Voc√™ n√£o est√° sozinho(a).

Se quiser, pode me contar mais sobre o que est√° sentindo. Ou podemos simplesmente ficar aqui, em sil√™ncio, honrando este momento.

*Sua experi√™ncia √© v√°lida e merece ser acolhida.* üíô"""
    
    def obter_estado_sistema(self) -> Dict[str, Any]:
        """
        Sobrescreve m√©todo do BaseAgentV2 para incluir informa√ß√µes espec√≠ficas do PsyMind
        """
        estado_base = super().obter_estado_sistema()
        
        estado_psymind = {
            'total_sessoes': self.contador_sessoes,
            'marcos_emocionais': len(self.marcos_emocionais),
            'sessoes_ativas': len(self.sessoes_terapeuticas),
            'modos_mais_usados': self._calcular_modos_mais_usados(),
            'carga_psiquica_media': self._calcular_carga_psiquica_media(),
            'deteccoes_automaticas_ativas': self.ativacao_automatica
        }
        
        estado_base.update(estado_psymind)
        return estado_base
    
    def _calcular_modos_mais_usados(self) -> Dict[str, int]:
        """Calcula quais modos terap√™uticos foram mais utilizados"""
        contagem_modos = {}
        for sessao in self.sessoes_terapeuticas:
            modo = sessao.modo_principal.value
            contagem_modos[modo] = contagem_modos.get(modo, 0) + 1
        
        # Retornar top 3 modos mais usados
        modos_ordenados = sorted(contagem_modos.items(), key=lambda x: x[1], reverse=True)[:3]
        return dict(modos_ordenados)
    
    def _calcular_carga_psiquica_media(self) -> float:
        """Calcula carga ps√≠quica m√©dia das √∫ltimas sess√µes"""
        if not self.sessoes_terapeuticas:
            return 5.0
        
        cargas = [sessao.sinais_vitais_emocionais.get('carga_psiquica', 5.0) 
                  for sessao in self.sessoes_terapeuticas[-10:]]  # √öltimas 10 sess√µes
        
        return sum(cargas) / len(cargas)

# Fun√ß√£o de cria√ß√£o
def criar_psymind_v2(**kwargs) -> PsyMindV2:
    """Cria inst√¢ncia do PsyMind v2.0 com BaseAgentV2"""
    return PsyMindV2(**kwargs)

# Alias para compatibilidade
create_psymind = criar_psymind_v2