"""
SupervisorAI v1.3 - Maestro de Racioc√≠nio do GPT Mestre Aut√¥nomo
Classifica tarefas e decide automaticamente o modo de execu√ß√£o ideal
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from agents.base_agent import BaseAgent
from utils.logger import get_logger

logger = get_logger(__name__)

class ModoExecucao(Enum):
    """Modos de execu√ß√£o dispon√≠veis"""
    DIRETO = "direto"
    INTERMEDIARIO = "intermediario" 
    ANALISE_MODULAR = "analise_modular"
    PROFUNDO = "profundo"
    REATIVO = "reativo"
    EXPLORATORIO = "exploratorio"
    ESPELHADO = "espelhado"
    SHADOW = "shadow"
    METACOGNITIVO = "metacognitivo"

@dataclass
class ClassificacaoTarefa:
    """Resultado da classifica√ß√£o de uma tarefa"""
    complexidade: float  # 0-10
    impacto_estrategico: float  # 0-10
    modo_recomendado: ModoExecucao
    agentes_sugeridos: List[str]
    justificativa: str
    tolerancia_erro: str  # baixa, media, alta
    historico_relevante: bool
    tags_detectadas: List[str]
    tempo_estimado: int  # segundos
    confianca_classificacao: float  # 0-10

class SupervisorAI(BaseAgent):
    """
    SupervisorAI v1.3 - Maestro l√≥gico-adaptativo do sistema GPT Mestre
    
    Funcionalidades:
    - Classifica automaticamente qualquer tarefa recebida
    - Decide o modo de execu√ß√£o ideal (direto at√© profundo)
    - Ativa agentes complementares conforme necess√°rio
    - Aprende padr√µes e melhora decis√µes ao longo do tempo
    - Monitora qualidade e ajusta estrat√©gias
    """
    
    def __init__(self, llm=None):
        super().__init__(
            name="SupervisorAI",
            description="Maestro de racioc√≠nio - classifica tarefas e decide execu√ß√£o"
        )
        
        if llm:
            self.llm = llm
        else:
            self._inicializar_llm()
        
        # Hist√≥rico de decis√µes para aprendizado
        self.historico_decisoes = []
        self.padroes_aprendidos = {}
        
        # M√©tricas de performance
        self.stats_supervisor = {
            "total_classificacoes": 0,
            "acertos_modo": 0,
            "score_medio_reflexor": 0.0,
            "tempo_medio_classificacao": 0.0,
            "ultima_metacognicao": None
        }
        
        # Cache de padr√µes por tipo de tarefa
        self.cache_padroes = {}
        
        logger.info("üß† SupervisorAI v1.3 inicializado - Modo adaptativo ativo")
    
    def _inicializar_llm(self):
        """Inicializa o LLM com configura√ß√µes padr√£o"""
        try:
            from langchain_anthropic import ChatAnthropic
            import config
            
            self.llm = ChatAnthropic(
                model=config.CLAUDE_MODEL,
                max_tokens=config.CLAUDE_MAX_TOKENS,
                temperature=0.3,  # Baixa temperature para classifica√ß√£o consistente
                anthropic_api_key=config.ANTHROPIC_API_KEY,
            )
            logger.info("LLM Claude inicializado para SupervisorAI")
            
        except Exception as e:
            logger.error(f"Erro ao inicializar LLM do SupervisorAI: {e}")
            self.llm = None
    
    def classificar_tarefa(self, mensagem: str, contexto: Optional[Dict] = None) -> ClassificacaoTarefa:
        """
        Classifica uma tarefa e decide o modo de execu√ß√£o ideal
        
        Args:
            mensagem: Mensagem/tarefa do usu√°rio
            contexto: Contexto adicional da conversa
            
        Returns:
            ClassificacaoTarefa com modo recomendado e agentes
        """
        inicio = time.time()
        
        try:
            # An√°lise r√°pida de padr√µes conhecidos
            classificacao_cache = self._verificar_cache_padroes(mensagem)
            if classificacao_cache:
                logger.info(f"üöÄ Classifica√ß√£o via cache: {classificacao_cache.modo_recomendado.value}")
                return classificacao_cache
            
            # An√°lise completa
            complexidade = self._calcular_complexidade(mensagem, contexto)
            impacto = self._calcular_impacto_estrategico(mensagem, contexto)
            modo = self._decidir_modo_execucao(complexidade, impacto, mensagem)
            agentes = self._sugerir_agentes(mensagem, modo, contexto)
            
            classificacao = ClassificacaoTarefa(
                complexidade=complexidade,
                impacto_estrategico=impacto,
                modo_recomendado=modo,
                agentes_sugeridos=agentes,
                justificativa=self._gerar_justificativa(complexidade, impacto, modo),
                tolerancia_erro=self._avaliar_tolerancia_erro(impacto),
                historico_relevante=self._verificar_historico_relevante(mensagem),
                tags_detectadas=self._detectar_tags(mensagem),
                tempo_estimado=self._estimar_tempo(modo, len(agentes)),
                confianca_classificacao=self._calcular_confianca(complexidade, impacto)
            )
            
            # Salvar para aprendizado
            self._salvar_decisao(mensagem, classificacao)
            
            # Atualizar estat√≠sticas
            tempo_total = time.time() - inicio
            self._atualizar_stats(tempo_total)
            
            logger.info(f"üìä Tarefa classificada: {modo.value} (C:{complexidade:.1f}, I:{impacto:.1f})")
            
            return classificacao
            
        except Exception as e:
            logger.error(f"Erro na classifica√ß√£o: {e}")
            # Fallback seguro
            return self._classificacao_fallback(mensagem)
    
    def _calcular_complexidade(self, mensagem: str, contexto: Optional[Dict] = None) -> float:
        """Calcula complexidade da tarefa (0-10)"""
        complexidade = 2.0  # Base
        
        # An√°lise textual
        palavras = len(mensagem.split())
        if palavras > 50:
            complexidade += 1.0
        if palavras > 100:
            complexidade += 1.0
            
        # Palavras-chave de complexidade
        indicadores_alta = [
            'an√°lise', 'compare', 'estrat√©gia', 'decis√£o', 'avaliar',
            'otimizar', 'calcular', 'simular', 'prever', 'planejar'
        ]
        indicadores_media = [
            'explicar', 'resumir', 'listar', 'sugerir', 'recomendar'
        ]
        
        mensagem_lower = mensagem.lower()
        for indicador in indicadores_alta:
            if indicador in mensagem_lower:
                complexidade += 1.5
                
        for indicador in indicadores_media:
            if indicador in mensagem_lower:
                complexidade += 0.8
        
        # Indicadores de m√∫ltiplas etapas
        if any(palavra in mensagem_lower for palavra in ['depois', 'ent√£o', 'primeiro', 'segundo']):
            complexidade += 1.0
            
        # Perguntas abertas vs espec√≠ficas
        if mensagem.endswith('?') and len(palavras) < 10:
            complexidade -= 0.5
            
        return min(10.0, max(1.0, complexidade))
    
    def _calcular_impacto_estrategico(self, mensagem: str, contexto: Optional[Dict] = None) -> float:
        """Calcula impacto estrat√©gico (0-10)"""
        impacto = 3.0  # Base
        
        mensagem_lower = mensagem.lower()
        
        # Palavras de alto impacto
        alto_impacto = [
            'investir', 'comprar', 'vender', 'lan√ßar', 'decis√£o cr√≠tica',
            'estrat√©gia', 'plano', 'or√ßamento', 'receita', 'lucro',
            'risco', 'oportunidade', 'mercado', 'concorr√™ncia'
        ]
        
        medio_impacto = [
            'produto', 'cliente', 'an√∫ncio', 'pre√ßo', 'marketing',
            'tend√™ncia', 'an√°lise', 'otimizar'
        ]
        
        for palavra in alto_impacto:
            if palavra in mensagem_lower:
                impacto += 2.0
                
        for palavra in medio_impacto:
            if palavra in mensagem_lower:
                impacto += 1.0
        
        # Valores monet√°rios mencionados
        if 'r$' in mensagem_lower or 'reais' in mensagem_lower:
            impacto += 1.5
            
        # URLs ou links (an√°lise de produto)
        if 'http' in mensagem_lower or 'aliexpress' in mensagem_lower:
            impacto += 1.0
            
        return min(10.0, max(1.0, impacto))
    
    def _decidir_modo_execucao(self, complexidade: float, impacto: float, mensagem: str) -> ModoExecucao:
        """Decide o modo de execu√ß√£o baseado em complexidade e impacto"""
        
        # Score combinado (peso maior no impacto)
        score = (complexidade * 0.4) + (impacto * 0.6)
        
        # Casos especiais primeiro
        if 'como voc√™ est√°' in mensagem.lower() or mensagem.lower().startswith('oi'):
            return ModoExecucao.DIRETO
            
        if 'compare' in mensagem.lower() and score > 6:
            return ModoExecucao.ESPELHADO
            
        if 'simule' in mensagem.lower() or 'cen√°rio' in mensagem.lower():
            return ModoExecucao.EXPLORATORIO
            
        # Decis√£o por score
        if score >= 8.0:
            return ModoExecucao.PROFUNDO
        elif score >= 6.5:
            return ModoExecucao.ANALISE_MODULAR
        elif score >= 4.0:
            return ModoExecucao.INTERMEDIARIO
        else:
            return ModoExecucao.DIRETO
    
    def _sugerir_agentes(self, mensagem: str, modo: ModoExecucao, contexto: Optional[Dict] = None) -> List[str]:
        """Sugere agentes complementares baseado na mensagem e modo"""
        agentes = []
        mensagem_lower = mensagem.lower()
        
        # Sempre incluir Reflexor em modos n√£o-diretos
        if modo != ModoExecucao.DIRETO:
            agentes.append("Reflexor")
        
        # An√°lise de produto/mercado
        if any(palavra in mensagem_lower for palavra in ['produto', 'aliexpress', 'shopee', 'mercado']):
            agentes.extend(["DeepAgent", "ScoutAI"])
            
        # Pre√ßo/financeiro
        if any(palavra in mensagem_lower for palavra in ['pre√ßo', 'custo', 'margem', 'lucro', 'r$']):
            agentes.append("AutoPrice")
            
        # Kit/combo
        if any(palavra in mensagem_lower for palavra in ['kit', 'combo', 'conjunto']):
            agentes.append("KitBuilder")
            
        # Copy/an√∫ncio
        if any(palavra in mensagem_lower for palavra in ['an√∫ncio', 't√≠tulo', 'descri√ß√£o', 'copy']):
            agentes.append("CopyBooster")
            
        # Decis√£o estrat√©gica
        if any(palavra in mensagem_lower for palavra in ['decis√£o', 'estrat√©gia', 'dilema', 'escolher']):
            agentes.append("Or√°culo")
            
        # D√∫vidas/ambiguidade
        if any(palavra in mensagem_lower for palavra in ['d√∫vida', 'confuso', 'n√£o entendi']):
            agentes.append("DoubtSolver")
            
        # Modo profundo sempre inclui m√∫ltiplos agentes
        if modo == ModoExecucao.PROFUNDO and len(agentes) < 3:
            agentes.extend(["Or√°culo", "DeepAgent"])
            
        return list(set(agentes))  # Remove duplicatas
    
    def _gerar_justificativa(self, complexidade: float, impacto: float, modo: ModoExecucao) -> str:
        """Gera justificativa da decis√£o"""
        score = (complexidade * 0.4) + (impacto * 0.6)
        
        if modo == ModoExecucao.PROFUNDO:
            return f"Alta complexidade ({complexidade:.1f}) e impacto cr√≠tico ({impacto:.1f}) exigem an√°lise profunda"
        elif modo == ModoExecucao.ANALISE_MODULAR:
            return f"Complexidade moderada ({complexidade:.1f}) requer an√°lise estruturada"
        elif modo == ModoExecucao.INTERMEDIARIO:
            return f"Tarefa padr√£o ({score:.1f}) com racioc√≠nio b√°sico"
        else:
            return f"Resposta direta adequada para tarefa simples ({score:.1f})"
    
    def _avaliar_tolerancia_erro(self, impacto: float) -> str:
        """Avalia toler√¢ncia a erro baseado no impacto"""
        if impacto >= 8:
            return "baixa"
        elif impacto >= 5:
            return "media"
        else:
            return "alta"
    
    def _verificar_historico_relevante(self, mensagem: str) -> bool:
        """Verifica se h√° hist√≥rico relevante para a tarefa"""
        # Buscar em hist√≥rico de decis√µes similares
        for decisao in self.historico_decisoes[-10:]:  # √öltimas 10
            if self._similaridade_mensagens(mensagem, decisao['mensagem']) > 0.7:
                return True
        return False
    
    def _detectar_tags(self, mensagem: str) -> List[str]:
        """Detecta tags relevantes na mensagem"""
        tags = []
        mensagem_lower = mensagem.lower()
        
        categorias = {
            '#PRODUTO': ['produto', 'item', 'artigo'],
            '#FINANCEIRO': ['pre√ßo', 'custo', 'lucro', 'margem', 'r$'],
            '#ESTRATEGICO': ['estrat√©gia', 'decis√£o', 'plano'],
            '#ANALISE': ['analisar', 'avaliar', 'comparar'],
            '#MARKETING': ['an√∫ncio', 'copy', 'marketing'],
            '#URGENTE': ['urgente', 'r√°pido', 'agora'],
            '#DECISAO_CRITICA': ['cr√≠tico', 'importante', 'decis√£o']
        }
        
        for tag, palavras in categorias.items():
            if any(palavra in mensagem_lower for palavra in palavras):
                tags.append(tag)
                
        return tags
    
    def _estimar_tempo(self, modo: ModoExecucao, num_agentes: int) -> int:
        """Estima tempo de processamento em segundos"""
        tempos_base = {
            ModoExecucao.DIRETO: 5,
            ModoExecucao.INTERMEDIARIO: 15,
            ModoExecucao.ANALISE_MODULAR: 30,
            ModoExecucao.PROFUNDO: 60,
            ModoExecucao.EXPLORATORIO: 45,
            ModoExecucao.ESPELHADO: 90
        }
        
        tempo_base = tempos_base.get(modo, 20)
        tempo_agentes = num_agentes * 10
        
        return tempo_base + tempo_agentes
    
    def _calcular_confianca(self, complexidade: float, impacto: float) -> float:
        """Calcula confian√ßa na classifica√ß√£o"""
        # Maior confian√ßa em extremos claros
        if complexidade <= 2 and impacto <= 2:
            return 9.5  # Claramente simples
        elif complexidade >= 8 and impacto >= 8:
            return 9.0  # Claramente complexo
        elif 3 <= complexidade <= 7 and 3 <= impacto <= 7:
            return 6.5  # Zona cinzenta
        else:
            return 8.0  # Casos intermedi√°rios
    
    def _verificar_cache_padroes(self, mensagem: str) -> Optional[ClassificacaoTarefa]:
        """Verifica se existe padr√£o conhecido em cache"""
        # Implementa√ß√£o simplificada - pode ser expandida
        hash_mensagem = hash(mensagem.lower().strip())
        
        if hash_mensagem in self.cache_padroes:
            padrao = self.cache_padroes[hash_mensagem]
            if (datetime.now() - padrao['timestamp']).days < 7:  # Cache v√°lido por 7 dias
                return padrao['classificacao']
                
        return None
    
    def _salvar_decisao(self, mensagem: str, classificacao: ClassificacaoTarefa):
        """Salva decis√£o para aprendizado futuro"""
        decisao = {
            'timestamp': datetime.now(),
            'mensagem': mensagem,
            'classificacao': classificacao,
            'hash': hash(mensagem.lower().strip())
        }
        
        self.historico_decisoes.append(decisao)
        
        # Manter apenas √∫ltimas 100 decis√µes
        if len(self.historico_decisoes) > 100:
            self.historico_decisoes = self.historico_decisoes[-100:]
        
        # Atualizar cache se confian√ßa alta
        if classificacao.confianca_classificacao >= 8.0:
            self.cache_padroes[decisao['hash']] = {
                'timestamp': datetime.now(),
                'classificacao': classificacao
            }
    
    def _atualizar_stats(self, tempo_processamento: float):
        """Atualiza estat√≠sticas do SupervisorAI"""
        self.stats_supervisor['total_classificacoes'] += 1
        
        # M√©dia m√≥vel do tempo
        total = self.stats_supervisor['total_classificacoes']
        tempo_anterior = self.stats_supervisor['tempo_medio_classificacao']
        self.stats_supervisor['tempo_medio_classificacao'] = \
            ((tempo_anterior * (total - 1)) + tempo_processamento) / total
    
    def _classificacao_fallback(self, mensagem: str) -> ClassificacaoTarefa:
        """Classifica√ß√£o de fallback em caso de erro"""
        return ClassificacaoTarefa(
            complexidade=5.0,
            impacto_estrategico=5.0,
            modo_recomendado=ModoExecucao.INTERMEDIARIO,
            agentes_sugeridos=["Reflexor"],
            justificativa="Classifica√ß√£o de seguran√ßa devido a erro no processamento",
            tolerancia_erro="media",
            historico_relevante=False,
            tags_detectadas=["#FALLBACK"],
            tempo_estimado=30,
            confianca_classificacao=3.0
        )
    
    def _similaridade_mensagens(self, msg1: str, msg2: str) -> float:
        """Calcula similaridade simples entre mensagens"""
        # Implementa√ß√£o b√°sica - pode ser melhorada
        palavras1 = set(msg1.lower().split())
        palavras2 = set(msg2.lower().split())
        
        if not palavras1 or not palavras2:
            return 0.0
            
        intersecao = palavras1.intersection(palavras2)
        uniao = palavras1.union(palavras2)
        
        return len(intersecao) / len(uniao)
    
    def modo_metacognitivo(self) -> Dict[str, Any]:
        """Executa autoavalia√ß√£o das decis√µes passadas"""
        logger.info("üîç Executando modo metacognitivo...")
        
        if not self.historico_decisoes:
            return {"status": "Sem hist√≥rico suficiente para an√°lise"}
        
        # An√°lise das √∫ltimas decis√µes
        ultimas_30 = self.historico_decisoes[-30:]
        
        # Distribui√ß√£o de modos
        distribuicao_modos = {}
        for decisao in ultimas_30:
            modo = decisao['classificacao'].modo_recomendado.value
            distribuicao_modos[modo] = distribuicao_modos.get(modo, 0) + 1
        
        # Confian√ßa m√©dia
        confianca_media = sum(d['classificacao'].confianca_classificacao for d in ultimas_30) / len(ultimas_30)
        
        relatorio = {
            "periodo_analisado": f"√öltimas {len(ultimas_30)} decis√µes",
            "distribuicao_modos": distribuicao_modos,
            "confianca_media": round(confianca_media, 2),
            "total_classificacoes": self.stats_supervisor['total_classificacoes'],
            "tempo_medio": round(self.stats_supervisor['tempo_medio_classificacao'], 3),
            "recomendacoes": self._gerar_recomendacoes_metacognitivas(distribuicao_modos, confianca_media)
        }
        
        self.stats_supervisor['ultima_metacognicao'] = datetime.now()
        
        return relatorio
    
    def _gerar_recomendacoes_metacognitivas(self, distribuicao: Dict, confianca: float) -> List[str]:
        """Gera recomenda√ß√µes baseadas na autoavalia√ß√£o"""
        recomendacoes = []
        
        if confianca < 7.0:
            recomendacoes.append("Ajustar crit√©rios de classifica√ß√£o - confian√ßa baixa")
        
        total_decisoes = sum(distribuicao.values())
        if distribuicao.get('direto', 0) / total_decisoes > 0.6:
            recomendacoes.append("Muitas tarefas classificadas como diretas - revisar sensibilidade")
            
        if distribuicao.get('profundo', 0) / total_decisoes > 0.3:
            recomendacoes.append("Muitas tarefas profundas - otimizar para reduzir custos")
        
        if not recomendacoes:
            recomendacoes.append("Performance adequada - manter padr√µes atuais")
            
        return recomendacoes
    
    def obter_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas detalhadas do SupervisorAI"""
        return {
            "stats_gerais": self.stats_supervisor,
            "cache_size": len(self.cache_padroes),
            "historico_size": len(self.historico_decisoes),
            "ultima_metacognicao": self.stats_supervisor.get('ultima_metacognicao'),
            "agente_info": self.get_info()
        }

# Fun√ß√£o de cria√ß√£o para uso no sistema
def criar_supervisor_ai(llm=None) -> SupervisorAI:
    """Cria inst√¢ncia do SupervisorAI"""
    return SupervisorAI(llm=llm)

# Teste b√°sico
if __name__ == "__main__":
    print("üß™ Testando SupervisorAI...")
    
    supervisor = criar_supervisor_ai()
    
    # Testes de classifica√ß√£o
    testes = [
        "Oi Carlos, como voc√™ est√°?",
        "Analise este produto do AliExpress para revenda",
        "Preciso tomar uma decis√£o estrat√©gica sobre investir R$ 10.000 neste nicho",
        "Explique como funciona o dropshipping"
    ]
    
    for teste in testes:
        print(f"\nüìù Teste: {teste}")
        classificacao = supervisor.classificar_tarefa(teste)
        print(f"üéØ Modo: {classificacao.modo_recomendado.value}")
        print(f"üìä Complexidade: {classificacao.complexidade:.1f}, Impacto: {classificacao.impacto_estrategico:.1f}")
        print(f"ü§ñ Agentes: {classificacao.agentes_sugeridos}")
    
    print("\n‚úÖ SupervisorAI testado com sucesso!")
