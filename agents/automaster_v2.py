"""
üß† AUTOMASTER v4.0 ‚Äî Agente Pilar de Autonomia Econ√¥mica e Estrat√©gica
Sistema completo de constru√ß√£o de ecossistemas pessoais: da ideia ao legado
üéØ VERS√ÉO MIGRADA PARA BaseAgentV2 com robustez completa
"""

import json
import time
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Union
from dataclasses import dataclass, field
from enum import Enum
from abc import ABC, abstractmethod

from agents.base_agent_v2 import BaseAgentV2

# Logger com fallback
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {self.name}: {msg}")
        def warning(self, msg): print(f"[WARNING] {self.name}: {msg}")
        def error(self, msg): print(f"[ERROR] {self.name}: {msg}")
        def debug(self, msg): print(f"[DEBUG] {self.name}: {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)

class PerfilProfissional(Enum):
    """Perfis profissionais atendidos pelo AutoMaster"""
    AUTONOMO = "autonomo"
    EDUCADOR = "educador"
    CRIADOR = "criador"
    ESPECIALISTA = "especialista"
    MICROEMPREENDEDOR = "microempreendedor"
    MENTOR = "mentor"
    CONSULTOR = "consultor"
    TERAPEUTA = "terapeuta"
    PRESTADOR_FISICO = "prestador_fisico"
    INFLUENCER = "influencer"

class FaseVida(Enum):
    """Fases da vida profissional"""
    INICIANTE = "iniciante"
    CRESCIMENTO = "crescimento"
    ESTAGNACAO = "estagnacao"
    EXPANSAO = "expansao"
    REINVENCAO = "reinvencao"
    LEGADO = "legado"
    RECUPERACAO = "recuperacao"

class ModoPrincipal(Enum):
    """Modos principais de opera√ß√£o do AutoMaster"""
    MICROAGENCIA = "microagencia"
    PRODUTO_CONHECIMENTO = "produto_conhecimento"
    CRIADOR_CONTEUDO = "criador_conteudo"
    ESPECIALISTA_CONFIANCA = "especialista_confianca"
    MEI_OFFLINE = "mei_offline"
    NOMADE_DIGITAL = "nomade_digital"
    ANTIFR√ÅGIL = "antifragil"
    MESTRE_MESTRES = "mestre_mestres"

class TipoDesafio(Enum):
    """Tipos de desafios enfrentados"""
    FINANCEIRO = "financeiro"
    ENERGETICO = "energetico"
    ESTRATEGICO = "estrategico"
    CRIATIVO = "criativo"
    TECNICO = "tecnico"
    MOTIVACIONAL = "motivacional"
    RELACIONAMENTO = "relacionamento"
    SAUDE = "saude"

@dataclass
class PerfilUsuario:
    """Perfil completo do usu√°rio do AutoMaster"""
    nome: str
    perfil_profissional: PerfilProfissional
    fase_vida: FaseVida
    objetivos_principais: List[str]
    preferencia_exposicao: str  # "alta", "media", "baixa", "invisivel"
    tempo_disponivel: str  # "integral", "parcial", "limitado"
    conhecimento_acumulado: str  # "iniciante", "intermediario", "avancado", "expert"
    desafios_atuais: List[TipoDesafio]
    recursos_disponiveis: Dict[str, Any]
    localizacao: str = ""
    idade_aproximada: str = ""

@dataclass
class ModuloAvancado:
    """Representa√ß√£o de um m√≥dulo avan√ßado do AutoMaster"""
    id: int
    nome: str
    descricao: str
    funcionalidades: List[str]
    perfis_alvo: List[PerfilProfissional]
    ativo: bool = True
    nivel_complexidade: int = 1  # 1-5

@dataclass
class PlanoEstrategico:
    """Plano estrat√©gico gerado pelo AutoMaster"""
    id: str
    usuario: PerfilUsuario
    modulos_ativados: List[int]
    estrategia_principal: str
    plano_90_dias: str
    plano_1_ano: str
    sistema_monetizacao: str
    estrategia_marca: str
    plano_comunidade: str
    sistema_antifragil: str
    metricas_sucesso: Dict[str, Any]
    recursos_necessarios: List[str]
    cronograma: Dict[str, str]
    timestamp: datetime = field(default_factory=datetime.now)

@dataclass
class SimulacaoFaturamento:
    """Simula√ß√£o de faturamento multicanal"""
    produtos_servicos: Dict[str, float]
    canais_venda: Dict[str, float]
    projecao_mensal: float
    projecao_anual: float
    cenario_conservador: float
    cenario_otimista: float
    pontos_criticos: List[str]

class AutoMasterV2(BaseAgentV2):
    """
    üß† AUTOMASTER v4.0 ‚Äî Agente Pilar de Autonomia Econ√¥mica e Estrat√©gica
    
    üéØ MISS√ÉO PRINCIPAL:
    Sistema completo de constru√ß√£o de ecossistemas pessoais ‚Äî da ideia ao legado,
    da renda ao impacto, do burnout √† liberdade. Atende qualquer profissional
    que deseja viver com mais intelig√™ncia, prop√≥sito e poder sobre sua trajet√≥ria.
    
    üß† 32 M√ìDULOS AVAN√áADOS:
    Desde narrativa profissional at√© modo socorro total, cobrindo toda a jornada
    de autonomia econ√¥mica e estrat√©gica.
    
    ‚ú® VERS√ÉO V2: Migrada para BaseAgentV2 com robustez completa
    """
    
    def __init__(self, llm=None, **kwargs):
        # Configura√ß√£o robusta espec√≠fica para AutoMaster
        automaster_config = {
            "rate_limit_per_minute": 30,  # Conservador para opera√ß√µes complexas
            "burst_allowance": 5,
            "failure_threshold": 3,
            "recovery_timeout": 45,
            "cache_enabled": True,
            "cache_ttl_seconds": 900,  # 15 minutos para planos estrat√©gicos
            "persistent_memory": True,
            "memory_storage_dir": "memory/agents/automaster",
            "max_retry_attempts": 3,
            "timeout_seconds": 60  # Mais tempo para processamento complexo
        }
        
        # Merge com configura√ß√£o fornecida
        config = kwargs.get("config", {})
        automaster_config.update(config)
        kwargs["config"] = automaster_config
        
        # Inicializar BaseAgentV2
        super().__init__(
            name="AutoMaster",
            description="Agente Pilar v4.0 de Autonomia Econ√¥mica e Estrat√©gica (Robustez v2)",
            **kwargs
        )
        
        # Configurar LLM espec√≠fico
        if llm:
            self.llm = llm
            self.llm_available = True
        
        # === SISTEMA DE 32 M√ìDULOS AVAN√áADOS ===
        self.modulos_avancados = self._inicializar_modulos_avancados()
        
        # === HIST√ìRICO E REGISTROS ===
        self.planos_estrategicos: List[PlanoEstrategico] = []
        self.simulacoes_faturamento: List[SimulacaoFaturamento] = []
        self.contador_planos = 0
        
        # === CONFIGURA√á√ïES AVAN√áADAS ===
        self.modo_antifragil_ativo = True
        self.sistema_backup_ativo = True
        self.g√™meo_pro_ativo = True
        self.shadow_ops_ativo = True
        
        # === INTEGRA√á√ïES COM OUTROS AGENTES ===
        self.integracoes_ativas = {
            "copybooster": False,
            "routinemaster": False,
            "doubtsolver": False,
            "oraculo": True  # Integra√ß√£o com Or√°culo j√° implementado
        }
        
        # Estat√≠sticas expandidas (al√©m das do BaseAgentV2)
        self.stats.update({
            "planos_estrategicos_criados": 0,
            "simulacoes_realizadas": 0,
            "modulos_ativados_total": 0,
            "usuarios_atendidos": 0,
            "taxa_sucesso_planos": 0.0,
            "economia_gerada_estimada": 0.0,
            "liberdade_geografica_alcancada": 0,
            "burnouts_prevenidos": 0,
            "comunidades_criadas": 0,
            "legados_estruturados": 0
        })
        
        # Carregar hist√≥rico da mem√≥ria persistente se existir
        self._carregar_historico_persistente()
        
        logger.info("üß† AutoMaster v4.0 (BaseAgentV2) inicializado - 32 m√≥dulos avan√ßados ATIVOS")
    
    def _carregar_historico_persistente(self):
        """Carrega hist√≥rico de planos e simula√ß√µes da mem√≥ria persistente"""
        if self.memory and hasattr(self.memory, 'context'):
            historico = self.memory.context.get('historico_automaster', {})
            if historico:
                self.planos_estrategicos = historico.get('planos', [])
                self.simulacoes_faturamento = historico.get('simulacoes', [])
                self.contador_planos = historico.get('contador_planos', 0)
                logger.info(f"üìö Hist√≥rico carregado: {len(self.planos_estrategicos)} planos, {len(self.simulacoes_faturamento)} simula√ß√µes")
    
    def _salvar_historico_persistente(self):
        """Salva hist√≥rico na mem√≥ria persistente"""
        if self.memory:
            self.memory.context['historico_automaster'] = {
                'planos': self.planos_estrategicos[-50:],  # √öltimos 50 planos
                'simulacoes': self.simulacoes_faturamento[-50:],  # √öltimas 50 simula√ß√µes
                'contador_planos': self.contador_planos
            }
    
    def _inicializar_modulos_avancados(self) -> Dict[int, ModuloAvancado]:
        """Inicializa os 32 m√≥dulos avan√ßados do AutoMaster"""
        modulos = {}
        
        # Definir todos os 32 m√≥dulos conforme especifica√ß√£o
        definicoes_modulos = [
            {
                "id": 1, "nome": "Narrativa Profissional e Prop√≥sito de Marca",
                "descricao": "Cria√ß√£o de identidade profissional aut√™ntica e diferenciada",
                "funcionalidades": ["storytelling pessoal", "prop√≥sito de marca", "posicionamento √∫nico"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 3
            },
            {
                "id": 2, "nome": "Precifica√ß√£o por Persona e Canal",
                "descricao": "Sistema inteligente de precifica√ß√£o baseado em valor percebido",
                "funcionalidades": ["an√°lise de personas", "estrat√©gia de pre√ßos", "otimiza√ß√£o por canal"],
                "perfis_alvo": [PerfilProfissional.AUTONOMO, PerfilProfissional.CONSULTOR],
                "complexidade": 4
            },
            {
                "id": 3, "nome": "An√°lise de Plataforma e Canal de Vendas",
                "descricao": "Otimiza√ß√£o de canais de vendas e presen√ßa digital",
                "funcionalidades": ["an√°lise de plataformas", "estrat√©gia multicanal", "convers√£o"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.MICROEMPREENDEDOR],
                "complexidade": 3
            },
            {
                "id": 4, "nome": "Roteiro de Lan√ßamento",
                "descricao": "Planejamento completo de lan√ßamentos de produtos/servi√ßos",
                "funcionalidades": ["cronograma de lan√ßamento", "estrat√©gia de marketing", "gest√£o de expectativas"],
                "perfis_alvo": [PerfilProfissional.EDUCADOR, PerfilProfissional.CRIADOR],
                "complexidade": 4
            },
            {
                "id": 5, "nome": "Portf√≥lio H√≠brido",
                "descricao": "Combina√ß√£o estrat√©gica de servi√ßos, produtos e conte√∫do",
                "funcionalidades": ["diversifica√ß√£o de receitas", "sinergia entre ofertas", "escalabilidade"],
                "perfis_alvo": [PerfilProfissional.ESPECIALISTA, PerfilProfissional.MENTOR],
                "complexidade": 5
            },
            {
                "id": 6, "nome": "Planejamento de Carreira e Escalada Profissional",
                "descricao": "Roadmap de evolu√ß√£o profissional e crescimento",
                "funcionalidades": ["mapeamento de carreira", "desenvolvimento de skills", "networking estrat√©gico"],
                "perfis_alvo": [PerfilProfissional.ESPECIALISTA, PerfilProfissional.CONSULTOR],
                "complexidade": 3
            },
            {
                "id": 7, "nome": "Simulador de Faturamento Multicanal",
                "descricao": "Proje√ß√µes financeiras detalhadas e cen√°rios de crescimento",
                "funcionalidades": ["proje√ß√µes financeiras", "an√°lise de cen√°rios", "otimiza√ß√£o de mix"],
                "perfis_alvo": [PerfilProfissional.MICROEMPREENDEDOR, PerfilProfissional.AUTONOMO],
                "complexidade": 4
            },
            {
                "id": 8, "nome": "Fideliza√ß√£o, Comunidade e P√≥s-venda",
                "descricao": "Constru√ß√£o de relacionamentos duradouros e comunidades engajadas",
                "funcionalidades": ["estrat√©gia de fideliza√ß√£o", "constru√ß√£o de comunidade", "upsell/cross-sell"],
                "perfis_alvo": [PerfilProfissional.EDUCADOR, PerfilProfissional.MENTOR],
                "complexidade": 4
            },
            {
                "id": 9, "nome": "Plano de Recupera√ß√£o ou Reinven√ß√£o Profissional",
                "descricao": "Estrat√©gias de recupera√ß√£o e reinven√ß√£o em momentos de crise",
                "funcionalidades": ["diagn√≥stico de situa√ß√£o", "plano de recupera√ß√£o", "reinven√ß√£o estrat√©gica"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 5
            },
            {
                "id": 10, "nome": "Autoridade P√∫blica, Influ√™ncia e Conte√∫do Estrat√©gico",
                "descricao": "Constru√ß√£o de autoridade e influ√™ncia atrav√©s de conte√∫do",
                "funcionalidades": ["estrat√©gia de conte√∫do", "constru√ß√£o de autoridade", "influ√™ncia digital"],
                "perfis_alvo": [PerfilProfissional.INFLUENCER, PerfilProfissional.ESPECIALISTA],
                "complexidade": 4
            },
            {
                "id": 11, "nome": "Shadow Ops",
                "descricao": "Penetra√ß√£o em canais alternativos e estrat√©gias n√£o convencionais",
                "funcionalidades": ["canais alternativos", "estrat√©gias disruptivas", "mercados de nicho"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 5
            },
            {
                "id": 12, "nome": "Autodiagn√≥stico de Neg√≥cio e Performance",
                "descricao": "Sistema de an√°lise e otimiza√ß√£o cont√≠nua do neg√≥cio",
                "funcionalidades": ["m√©tricas de performance", "diagn√≥stico autom√°tico", "otimiza√ß√£o cont√≠nua"],
                "perfis_alvo": [PerfilProfissional.MICROEMPREENDEDOR, PerfilProfissional.AUTONOMO],
                "complexidade": 3
            },
            {
                "id": 13, "nome": "Guia Visual de Marca Completa",
                "descricao": "Identidade visual e diretrizes de marca profissional",
                "funcionalidades": ["identidade visual", "guidelines de marca", "aplica√ß√µes pr√°ticas"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.INFLUENCER],
                "complexidade": 3
            },
            {
                "id": 14, "nome": "G√™meo Pro",
                "descricao": "Mentor interno futurista baseado em IA para tomada de decis√µes",
                "funcionalidades": ["simula√ß√£o de decis√µes", "mentoria virtual", "an√°lise preditiva"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 5
            },
            {
                "id": 15, "nome": "Simula√ß√£o de Colabs Estrat√©gicas",
                "descricao": "Parcerias fantasma e colabora√ß√µes estrat√©gicas",
                "funcionalidades": ["mapeamento de parceiros", "simula√ß√£o de colabora√ß√µes", "networking estrat√©gico"],
                "perfis_alvo": [PerfilProfissional.INFLUENCER, PerfilProfissional.CRIADOR],
                "complexidade": 4
            },
            # Continuando com os m√≥dulos 16-32...
            {
                "id": 16, "nome": "Modo Microag√™ncia",
                "descricao": "Opera√ß√£o como microag√™ncia especializada",
                "funcionalidades": ["estrutura de ag√™ncia", "gest√£o de clientes", "escalabilidade"],
                "perfis_alvo": [PerfilProfissional.CONSULTOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 4
            },
            {
                "id": 17, "nome": "Modo Produto de Conhecimento",
                "descricao": "Cria√ß√£o e monetiza√ß√£o de cursos, ebooks e templates",
                "funcionalidades": ["desenvolvimento de cursos", "plataformas de ensino", "monetiza√ß√£o de conhecimento"],
                "perfis_alvo": [PerfilProfissional.EDUCADOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 4
            },
            {
                "id": 18, "nome": "Modo Criador de Conte√∫do e Influ√™ncia",
                "descricao": "Estrat√©gia completa de cria√ß√£o de conte√∫do e influ√™ncia digital",
                "funcionalidades": ["estrat√©gia de conte√∫do", "crescimento org√¢nico", "monetiza√ß√£o de audi√™ncia"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.INFLUENCER],
                "complexidade": 4
            },
            {
                "id": 19, "nome": "Modo Especialista de Confian√ßa",
                "descricao": "Posicionamento como autoridade confi√°vel em √°rea espec√≠fica",
                "funcionalidades": ["constru√ß√£o de confian√ßa", "autoridade t√©cnica", "relacionamento de longo prazo"],
                "perfis_alvo": [PerfilProfissional.CONSULTOR, PerfilProfissional.TERAPEUTA],
                "complexidade": 3
            },
            {
                "id": 20, "nome": "Modo MEI Offline",
                "descricao": "Estrat√©gias para prestadores f√≠sicos e microcom√©rcios",
                "funcionalidades": ["otimiza√ß√£o local", "presen√ßa f√≠sica", "digitaliza√ß√£o gradual"],
                "perfis_alvo": [PerfilProfissional.PRESTADOR_FISICO, PerfilProfissional.MICROEMPREENDEDOR],
                "complexidade": 2
            },
            {
                "id": 21, "nome": "GeoImpacto",
                "descricao": "Estrat√©gia local de dom√≠nio territorial",
                "funcionalidades": ["marketing local", "networking regional", "impacto comunit√°rio"],
                "perfis_alvo": [PerfilProfissional.PRESTADOR_FISICO, PerfilProfissional.EDUCADOR],
                "complexidade": 3
            },
            {
                "id": 22, "nome": "Mestre Invis√≠vel",
                "descricao": "Crescimento sem exposi√ß√£o p√∫blica excessiva",
                "funcionalidades": ["estrat√©gias de bastidores", "influ√™ncia indireta", "network privado"],
                "perfis_alvo": [PerfilProfissional.CONSULTOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 4
            },
            {
                "id": 23, "nome": "IA como Equipe",
                "descricao": "Delega√ß√£o e automa√ß√£o com intelig√™ncia artificial",
                "funcionalidades": ["automa√ß√£o de processos", "IA assistente", "escala sem contrata√ß√£o"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 5
            },
            {
                "id": 24, "nome": "Rota do Legado",
                "descricao": "Liberdade financeira, geogr√°fica e planejamento de sucess√£o",
                "funcionalidades": ["planejamento financeiro", "liberdade geogr√°fica", "constru√ß√£o de legado"],
                "perfis_alvo": [PerfilProfissional.MENTOR, PerfilProfissional.ESPECIALISTA],
                "complexidade": 5
            },
            {
                "id": 25, "nome": "Modo N√¥made Digital Profundo",
                "descricao": "Vida viajando com monetiza√ß√£o consistente",
                "funcionalidades": ["trabalho remoto", "monetiza√ß√£o global", "infraestrutura m√≥vel"],
                "perfis_alvo": [PerfilProfissional.CRIADOR, PerfilProfissional.CONSULTOR],
                "complexidade": 4
            },
            {
                "id": 26, "nome": "Modo Antifr√°gil",
                "descricao": "Blindagem contra crises externas e fortalecimento",
                "funcionalidades": ["diversifica√ß√£o de riscos", "sistemas de backup", "adaptabilidade"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 5
            },
            {
                "id": 27, "nome": "Modo Mestre de Mestres",
                "descricao": "Forma√ß√£o e mentoria de outros profissionais de elite",
                "funcionalidades": ["programa de mentoria", "certifica√ß√£o pr√≥pria", "rede de disc√≠pulos"],
                "perfis_alvo": [PerfilProfissional.MENTOR, PerfilProfissional.EDUCADOR],
                "complexidade": 5
            },
            {
                "id": 28, "nome": "Modo Clonagem de Sistema",
                "descricao": "Replica√ß√£o e escalabilidade de sistemas de sucesso",
                "funcionalidades": ["documenta√ß√£o de processos", "replica√ß√£o sistem√°tica", "franchising intelectual"],
                "perfis_alvo": [PerfilProfissional.MICROEMPREENDEDOR, PerfilProfissional.MENTOR],
                "complexidade": 4
            },
            {
                "id": 29, "nome": "Modo Finan√ßas Pessoais e Empresariais Integradas",
                "descricao": "Gest√£o financeira unificada e otimizada",
                "funcionalidades": ["planejamento financeiro", "otimiza√ß√£o tribut√°ria", "investimentos estrat√©gicos"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 4
            },
            {
                "id": 30, "nome": "Modo Energia e Ritmo de Trabalho √ìtimo",
                "descricao": "Otimiza√ß√£o de energia e preven√ß√£o de burnout",
                "funcionalidades": ["gest√£o de energia", "ritmo sustent√°vel", "produtividade consciente"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 3
            },
            {
                "id": 31, "nome": "Modo Comunidade AutoMaster",
                "descricao": "C√≠rculo pr√≥prio de valor e network estrat√©gico",
                "funcionalidades": ["constru√ß√£o de comunidade", "network estrat√©gico", "valor m√∫tuo"],
                "perfis_alvo": [PerfilProfissional.MENTOR, PerfilProfissional.EDUCADOR],
                "complexidade": 4
            },
            {
                "id": 32, "nome": "Modo Socorro Total e Backup Estrat√©gico",
                "descricao": "Plano de recupera√ß√£o em caso de colapso total",
                "funcionalidades": ["plano de conting√™ncia", "backup de sistemas", "recupera√ß√£o r√°pida"],
                "perfis_alvo": list(PerfilProfissional),  # Todos os perfis
                "complexidade": 5
            }
        ]
        
        # Criar objetos ModuloAvancado
        for def_modulo in definicoes_modulos:
            modulo = ModuloAvancado(
                id=def_modulo["id"],
                nome=def_modulo["nome"],
                descricao=def_modulo["descricao"],
                funcionalidades=def_modulo["funcionalidades"],
                perfis_alvo=def_modulo["perfis_alvo"],
                nivel_complexidade=def_modulo["complexidade"]
            )
            modulos[def_modulo["id"]] = modulo
        
        logger.info(f"ü§ñ {len(modulos)} m√≥dulos avan√ßados inicializados")
        return modulos
    
    def _processar_interno(self, mensagem: str, contexto: Optional[Dict] = None) -> str:
        """
        üß† PROCESSAMENTO AUTOMASTER v4.0 (BaseAgentV2)
        
        FLUXO INTELIGENTE DE AUTONOMIA:
        1. üéØ An√°lise do perfil e necessidades do usu√°rio
        2. üß† Sele√ß√£o inteligente de m√≥dulos relevantes
        3. üìä Cria√ß√£o de plano estrat√©gico personalizado
        4. üí∞ Simula√ß√£o de faturamento e proje√ß√µes
        5. üõ°Ô∏è Sistema antifr√°gil e conting√™ncias
        6. üåü Entrega de roteiro completo de autonomia
        
        Implementa _processar_interno ao inv√©s de processar para BaseAgentV2
        """
        try:
            # 1. AN√ÅLISE DO COMANDO E PERFIL
            analise_comando = self._analisar_comando_automaster(mensagem)
            tipo_solicitacao = analise_comando['tipo']
            parametros = analise_comando['parametros']
            
            logger.info(f"üéØ Comando AutoMaster: {tipo_solicitacao}")
            
            # 2. IDENTIFICA√á√ÉO DO PERFIL (se dispon√≠vel no contexto)
            perfil_usuario = self._extrair_perfil_usuario(contexto or {}, mensagem)
            
            # 3. SELE√á√ÉO DE M√ìDULOS RELEVANTES
            modulos_selecionados = self._selecionar_modulos_relevantes(
                tipo_solicitacao, perfil_usuario, parametros
            )
            
            # 4. GERA√á√ÉO DO PLANO ESTRAT√âGICO
            if tipo_solicitacao in ["plano_completo", "curso_digital", "monetizacao"]:
                plano = self._criar_plano_estrategico_completo(
                    perfil_usuario, modulos_selecionados, tipo_solicitacao, parametros
                )
                resposta = self._formatar_plano_estrategico(plano)
                
            elif tipo_solicitacao == "simulacao_faturamento":
                simulacao = self._executar_simulacao_faturamento(perfil_usuario, parametros)
                resposta = self._formatar_simulacao_faturamento(simulacao)
                
            elif tipo_solicitacao == "modo_antifragil":
                resposta = self._ativar_modo_antifragil(perfil_usuario, parametros)
                
            elif tipo_solicitacao == "organizacao_financeira":
                resposta = self._ativar_modo_financas_integradas(perfil_usuario)
                
            elif tipo_solicitacao == "energia_otima":
                resposta = self._ativar_modo_energia_otima(perfil_usuario)
                
            elif tipo_solicitacao == "comunidade_propria":
                resposta = self._ativar_modo_comunidade(perfil_usuario)
                
            elif tipo_solicitacao == "backup_total":
                resposta = self._ativar_modo_socorro_total(perfil_usuario)
                
            else:
                # Resposta personalizada baseada nos m√≥dulos
                resposta = self._gerar_resposta_personalizada(
                    mensagem, perfil_usuario, modulos_selecionados
                )
            
            # 5. INTEGRA√á√ÉO COM OUTROS AGENTES (se necess√°rio)
            if self.integracoes_ativas.get("oraculo") and "decis√£o cr√≠tica" in mensagem.lower():
                resposta = self._consultar_oraculo_para_validacao(resposta, mensagem)
            
            # 6. ATUALIZAR ESTAT√çSTICAS E PERSISTIR
            self._atualizar_stats_automaster(tipo_solicitacao, len(modulos_selecionados))
            self._salvar_historico_persistente()
            
            return resposta
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento AutoMaster: {e}")
            raise  # Re-lan√ßar para o BaseAgentV2 tratar com retry e fallback
    
    def _fallback_response(self, mensagem: str, contexto: Optional[Dict] = None) -> str:
        """Resposta de fallback espec√≠fica do AutoMaster quando h√° erro"""
        return f"""üß† **AutoMaster v4.0 - Modo de Recupera√ß√£o**

Detectei uma instabilidade tempor√°ria no sistema. Enquanto restauro a capacidade total, aqui est√° uma orienta√ß√£o inicial:

**AN√ÅLISE R√ÅPIDA:**
Baseado em sua mensagem, voc√™ busca autonomia e crescimento profissional.

**A√á√ïES IMEDIATAS:**
1. üìù Defina claramente seu objetivo principal
2. üéØ Identifique sua expertise √∫nica
3. üí∞ Liste suas fontes de renda atuais
4. üõ°Ô∏è Avalie seus principais riscos

**PR√ìXIMOS PASSOS:**
Tente novamente em alguns instantes para acesso completo aos 32 m√≥dulos especializados.

_[Sistema em auto-recupera√ß√£o... Status: {self.circuit_breaker.state}]_"""
    
    def _analisar_comando_automaster(self, mensagem: str) -> Dict:
        """üéØ Analisa comando espec√≠fico do AutoMaster"""
        mensagem_lower = mensagem.lower()
        
        # Comandos padr√£o identificados
        if any(palavra in mensagem_lower for palavra in ["curso digital", "curso", "conhecimento"]):
            return {"tipo": "curso_digital", "parametros": self._extrair_tema_curso(mensagem)}
        
        elif any(palavra in mensagem_lower for palavra in ["viajando", "nomade", "viajar"]):
            return {"tipo": "nomade_digital", "parametros": {"foco": "mobilidade"}}
        
        elif any(palavra in mensagem_lower for palavra in ["blinde", "crise", "antifragil"]):
            return {"tipo": "modo_antifragil", "parametros": {"urgencia": "alta"}}
        
        elif any(palavra in mensagem_lower for palavra in ["financeiro", "organize", "dinheiro"]):
            return {"tipo": "organizacao_financeira", "parametros": {"escopo": "completo"}}
        
        elif any(palavra in mensagem_lower for palavra in ["energia", "rotina", "esgotamento"]):
            return {"tipo": "energia_otima", "parametros": {"foco": "sustentabilidade"}}
        
        elif any(palavra in mensagem_lower for palavra in ["comunidade", "alunos", "clientes"]):
            return {"tipo": "comunidade_propria", "parametros": {"tipo": "educacional"}}
        
        elif any(palavra in mensagem_lower for palavra in ["backup", "recupera√ß√£o", "colapso"]):
            return {"tipo": "backup_total", "parametros": {"nivel": "completo"}}
        
        elif any(palavra in mensagem_lower for palavra in ["simula√ß√£o", "faturamento", "proje√ß√£o"]):
            return {"tipo": "simulacao_faturamento", "parametros": {"periodo": "anual"}}
        
        else:
            return {"tipo": "plano_completo", "parametros": {"abrangencia": "total"}}
    
    def _extrair_perfil_usuario(self, contexto: Dict, mensagem: str) -> PerfilUsuario:
        """üë§ Extrai ou cria perfil do usu√°rio baseado no contexto"""
        # Se h√° contexto de perfil, usar
        if "perfil_usuario" in contexto:
            return contexto["perfil_usuario"]
        
        # Verificar mem√≥ria persistente
        if self.memory and hasattr(self.memory, 'user_preferences'):
            perfil_salvo = self.memory.user_preferences.get('perfil_automaster')
            if perfil_salvo:
                return PerfilUsuario(**perfil_salvo)
        
        # Sen√£o, inferir do texto
        perfil_inferido = self._inferir_perfil_da_mensagem(mensagem)
        
        perfil = PerfilUsuario(
            nome=contexto.get("nome_usuario", "Usu√°rio"),
            perfil_profissional=perfil_inferido["perfil"],
            fase_vida=perfil_inferido["fase"],
            objetivos_principais=perfil_inferido["objetivos"],
            preferencia_exposicao=perfil_inferido["exposicao"],
            tempo_disponivel=perfil_inferido["tempo"],
            conhecimento_acumulado=perfil_inferido["conhecimento"],
            desafios_atuais=perfil_inferido["desafios"],
            recursos_disponiveis=perfil_inferido["recursos"]
        )
        
        # Salvar perfil na mem√≥ria persistente
        if self.memory:
            self.memory.user_preferences['perfil_automaster'] = {
                'nome': perfil.nome,
                'perfil_profissional': perfil.perfil_profissional.value,
                'fase_vida': perfil.fase_vida.value,
                'objetivos_principais': perfil.objetivos_principais,
                'preferencia_exposicao': perfil.preferencia_exposicao,
                'tempo_disponivel': perfil.tempo_disponivel,
                'conhecimento_acumulado': perfil.conhecimento_acumulado,
                'desafios_atuais': [d.value for d in perfil.desafios_atuais],
                'recursos_disponiveis': perfil.recursos_disponiveis
            }
        
        return perfil
    
    def _inferir_perfil_da_mensagem(self, mensagem: str) -> Dict:
        """üîç Infere perfil do usu√°rio baseado na mensagem"""
        mensagem_lower = mensagem.lower()
        
        # Inferir perfil profissional
        if any(palavra in mensagem_lower for palavra in ["curso", "ensino", "educa√ß√£o"]):
            perfil = PerfilProfissional.EDUCADOR
        elif any(palavra in mensagem_lower for palavra in ["conte√∫do", "criativo", "arte"]):
            perfil = PerfilProfissional.CRIADOR
        elif any(palavra in mensagem_lower for palavra in ["consultoria", "especialista"]):
            perfil = PerfilProfissional.CONSULTOR
        elif any(palavra in mensagem_lower for palavra in ["terapeuta", "terapia"]):
            perfil = PerfilProfissional.TERAPEUTA
        else:
            perfil = PerfilProfissional.AUTONOMO
        
        # Inferir fase da vida
        if any(palavra in mensagem_lower for palavra in ["come√ßando", "iniciando"]):
            fase = FaseVida.INICIANTE
        elif any(palavra in mensagem_lower for palavra in ["estagnado", "parado"]):
            fase = FaseVida.ESTAGNACAO
        elif any(palavra in mensagem_lower for palavra in ["expandir", "crescer"]):
            fase = FaseVida.EXPANSAO
        else:
            fase = FaseVida.CRESCIMENTO
        
        return {
            "perfil": perfil,
            "fase": fase,
            "objetivos": ["autonomia financeira", "liberdade geogr√°fica"],
            "exposicao": "media",
            "tempo": "parcial",
            "conhecimento": "intermediario",
            "desafios": [TipoDesafio.ESTRATEGICO],
            "recursos": {"tempo": "limitado", "investimento": "baixo"}
        }
    
    def _selecionar_modulos_relevantes(self, tipo_solicitacao: str, 
                                     perfil: PerfilUsuario, parametros: Dict) -> List[int]:
        """üß† Sele√ß√£o inteligente de m√≥dulos relevantes"""
        modulos_selecionados = []
        
        # M√≥dulos base sempre relevantes
        modulos_base = [1, 12, 26, 29, 30]  # Narrativa, Autodiagn√≥stico, Antifr√°gil, Finan√ßas, Energia
        modulos_selecionados.extend(modulos_base)
        
        # Sele√ß√£o baseada no tipo de solicita√ß√£o
        mapeamento_tipo_modulos = {
            "curso_digital": [4, 17, 8, 10],  # Lan√ßamento, Produto Conhecimento, Fideliza√ß√£o, Autoridade
            "nomade_digital": [25, 23, 24],   # N√¥made Digital, IA Equipe, Rota Legado
            "modo_antifragil": [26, 32, 28],  # Antifr√°gil, Socorro Total, Clonagem Sistema
            "organizacao_financeira": [29, 7, 24],  # Finan√ßas Integradas, Simulador, Rota Legado
            "energia_otima": [30, 22, 31],    # Energia √ìtima, Mestre Invis√≠vel, Comunidade
            "comunidade_propria": [8, 31, 27],  # Fideliza√ß√£o, Comunidade, Mestre de Mestres
            "backup_total": [32, 26, 28],     # Socorro Total, Antifr√°gil, Clonagem
        }
        
        if tipo_solicitacao in mapeamento_tipo_modulos:
            modulos_selecionados.extend(mapeamento_tipo_modulos[tipo_solicitacao])
        
        # Sele√ß√£o baseada no perfil profissional
        for modulo_id, modulo in self.modulos_avancados.items():
            if (perfil.perfil_profissional in modulo.perfis_alvo and 
                modulo_id not in modulos_selecionados):
                modulos_selecionados.append(modulo_id)
        
        # Limitar a 8 m√≥dulos para n√£o sobrecarregar
        return list(set(modulos_selecionados))[:8]
    
    def _criar_plano_estrategico_completo(self, perfil: PerfilUsuario, 
                                        modulos: List[int], tipo: str, 
                                        parametros: Dict) -> PlanoEstrategico:
        """üìã Cria plano estrat√©gico completo personalizado"""
        self.contador_planos += 1
        
        # Gerar estrat√©gia principal usando LLM se dispon√≠vel
        if self.llm_available and self.llm:
            estrategia_principal = self._gerar_estrategia_llm(perfil, modulos, tipo)
        else:
            estrategia_principal = self._gerar_estrategia_template(perfil, tipo)
        
        # Criar componentes do plano
        plano_90_dias = self._gerar_plano_90_dias(perfil, modulos)
        plano_1_ano = self._gerar_plano_1_ano(perfil, modulos)
        sistema_monetizacao = self._gerar_sistema_monetizacao(perfil)
        estrategia_marca = self._gerar_estrategia_marca(perfil)
        plano_comunidade = self._gerar_plano_comunidade(perfil)
        sistema_antifragil = self._gerar_sistema_antifragil(perfil)
        
        plano = PlanoEstrategico(
            id=f"automaster_plano_{self.contador_planos:03d}",
            usuario=perfil,
            modulos_ativados=modulos,
            estrategia_principal=estrategia_principal,
            plano_90_dias=plano_90_dias,
            plano_1_ano=plano_1_ano,
            sistema_monetizacao=sistema_monetizacao,
            estrategia_marca=estrategia_marca,
            plano_comunidade=plano_comunidade,
            sistema_antifragil=sistema_antifragil,
            metricas_sucesso=self._definir_metricas_sucesso(perfil),
            recursos_necessarios=self._listar_recursos_necessarios(modulos),
            cronograma=self._gerar_cronograma(perfil)
        )
        
        self.planos_estrategicos.append(plano)
        return plano
    
    def _gerar_estrategia_llm(self, perfil: PerfilUsuario, modulos: List[int], tipo: str) -> str:
        """üß† Gera estrat√©gia usando LLM"""
        try:
            prompt = f"""Voc√™ √© o AutoMaster v4.0, agente especialista em autonomia econ√¥mica e estrat√©gica.

PERFIL DO USU√ÅRIO:
- Profiss√£o: {getattr(perfil.perfil_profissional, 'value', perfil.perfil_profissional)}
- Fase: {getattr(perfil.fase_vida, 'value', perfil.fase_vida)}
- Objetivos: {', '.join(perfil.objetivos_principais)}
- Prefer√™ncia de exposi√ß√£o: {perfil.preferencia_exposicao}
- Tempo dispon√≠vel: {perfil.tempo_disponivel}
- Conhecimento: {perfil.conhecimento_acumulado}

TIPO DE SOLICITA√á√ÉO: {tipo}

M√ìDULOS ATIVADOS: {len(modulos)} m√≥dulos especializados

MISS√ÉO: Crie uma estrat√©gia principal clara, pr√°tica e acion√°vel para este perfil alcan√ßar autonomia econ√¥mica e estrat√©gica.

FOQUE EM:
- Passos concretos e implement√°veis
- Monetiza√ß√£o sustent√°vel
- Sistema antifr√°gil
- Liberdade geogr√°fica e financeira

Responda de forma direta e pr√°tica (m√°ximo 3 par√°grafos):"""

            resposta = self.llm.invoke(prompt).content
            return resposta.strip()
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na gera√ß√£o LLM: {e}")
            return self._gerar_estrategia_template(perfil, tipo)
    
    def _gerar_estrategia_template(self, perfil: PerfilUsuario, tipo: str) -> str:
        """üìã Gera estrat√©gia usando template"""
        templates = {
            "curso_digital": f"Crie um curso digital baseado em sua expertise em {getattr(perfil.perfil_profissional, 'value', perfil.perfil_profissional)}. Estruture o conte√∫do em m√≥dulos pr√°ticos, use plataforma de ensino adequada e implemente estrat√©gia de lan√ßamento gradual com comunidade de alunos.",
            
            "nomade_digital": f"Transforme seu trabalho como {getattr(perfil.perfil_profissional, 'value', perfil.perfil_profissional)} em modelo 100% remoto. Diversifique fontes de renda, automatize processos e crie sistemas que funcionem independente de localiza√ß√£o geogr√°fica.",
            
            "plano_completo": f"Desenvolva ecossistema completo de autonomia como {getattr(perfil.perfil_profissional, 'value', perfil.perfil_profissional)}. Combine presta√ß√£o de servi√ßos, produtos digitais e constru√ß√£o de autoridade para criar m√∫ltiplas fontes de renda sustent√°veis."
        }
        
        return templates.get(tipo, templates["plano_completo"])
    
    def _gerar_plano_90_dias(self, perfil: PerfilUsuario, modulos: List[int]) -> str:
        """üìÖ Gera plano de 90 dias"""
        return f"""PLANO 90 DIAS - {getattr(perfil.perfil_profissional, 'value', perfil.perfil_profissional).upper()}

M√äS 1 - ESTRUTURA√á√ÉO:
‚Ä¢ Definir narrativa profissional e posicionamento √∫nico
‚Ä¢ Estruturar sistema de precifica√ß√£o baseado em valor
‚Ä¢ Criar presen√ßa digital b√°sica e canais de comunica√ß√£o

M√äS 2 - IMPLEMENTA√á√ÉO:
‚Ä¢ Lan√ßar primeira oferta de valor (produto/servi√ßo)
‚Ä¢ Estabelecer rotina de produ√ß√£o de conte√∫do
‚Ä¢ Implementar sistema de gest√£o financeira integrada

M√äS 3 - OTIMIZA√á√ÉO:
‚Ä¢ Analisar primeiros resultados e ajustar estrat√©gia
‚Ä¢ Implementar sistema antifr√°gil e backup
‚Ä¢ Iniciar constru√ß√£o de comunidade pr√≥pria"""
    
    def _gerar_plano_1_ano(self, perfil: PerfilUsuario, modulos: List[int]) -> str:
        """üìÖ Gera plano de 1 ano"""
        return f"""PLANO 1 ANO - AUTONOMIA COMPLETA

TRIMESTRE 1: Funda√ß√£o s√≥lida e primeiros resultados
TRIMESTRE 2: Diversifica√ß√£o de receitas e escalabilidade
TRIMESTRE 3: Autoridade estabelecida e comunidade ativa
TRIMESTRE 4: Sistema antifr√°gil e prepara√ß√£o para legado

META ANUAL: Alcan√ßar autonomia financeira de {perfil.perfil_profissional.value} com m√∫ltiplas fontes de renda e liberdade geogr√°fica."""
    
    def _executar_simulacao_faturamento(self, perfil: PerfilUsuario, parametros: Dict) -> SimulacaoFaturamento:
        """üí∞ Executa simula√ß√£o de faturamento multicanal"""
        # Simula√ß√£o baseada no perfil profissional
        base_valores = {
            PerfilProfissional.EDUCADOR: {"curso": 497, "mentoria": 200, "consultoria": 150},
            PerfilProfissional.CONSULTOR: {"consultoria": 300, "projeto": 2000, "retainer": 1500},
            PerfilProfissional.CRIADOR: {"produto": 97, "servico": 500, "patrocinio": 800},
            PerfilProfissional.TERAPEUTA: {"sessao": 120, "programa": 800, "workshop": 300}
        }
        
        valores = base_valores.get(perfil.perfil_profissional, {"servico": 200, "produto": 100})
        
        # Calcular proje√ß√µes
        projecao_mensal = sum(valores.values()) * 2  # Estimativa conservadora
        projecao_anual = projecao_mensal * 12
        
        simulacao = SimulacaoFaturamento(
            produtos_servicos=valores,
            canais_venda={"direto": 0.6, "plataformas": 0.3, "indicacoes": 0.1},
            projecao_mensal=projecao_mensal,
            projecao_anual=projecao_anual,
            cenario_conservador=projecao_anual * 0.7,
            cenario_otimista=projecao_anual * 1.5,
            pontos_criticos=["sazonalidade", "depend√™ncia de um canal", "precifica√ß√£o baixa"]
        )
        
        self.simulacoes_faturamento.append(simulacao)
        return simulacao
    
    def _ativar_modo_antifragil(self, perfil: PerfilUsuario, parametros: Dict) -> str:
        """üõ°Ô∏è Ativa modo antifr√°gil completo"""
        return f"""üõ°Ô∏è **MODO ANTIFR√ÅGIL ATIVADO**

**Blindagem Estrat√©gica para {perfil.perfil_profissional.value}:**

**üîí DIVERSIFICA√á√ÉO DE RISCOS:**
‚Ä¢ 3 fontes de renda independentes m√≠nimas
‚Ä¢ Backup de clientes/canais para cada fonte
‚Ä¢ Reserva de emerg√™ncia de 6 meses

**‚ö° SISTEMAS DE BACKUP:**
‚Ä¢ Documenta√ß√£o completa de todos os processos
‚Ä¢ M√∫ltiplas plataformas e canais de comunica√ß√£o
‚Ä¢ Network de parceiros e colaboradores estrat√©gicos

**üîÑ ADAPTABILIDADE:**
‚Ä¢ Monitoramento de tend√™ncias e mudan√ßas do mercado
‚Ä¢ Flexibilidade para pivot r√°pido quando necess√°rio
‚Ä¢ Habilidades transfer√≠veis e constantemente atualizadas

**üöÄ CRESCIMENTO COM CRISE:**
‚Ä¢ Estrat√©gias para lucrar com instabilidade
‚Ä¢ Posicionamento como solu√ß√£o em tempos dif√≠ceis
‚Ä¢ Constru√ß√£o de autoridade em momentos de incerteza

**PLANO DE A√á√ÉO IMEDIATO:**
1. Mapeie suas 3 principais vulnerabilidades
2. Crie backup para cada uma delas
3. Implemente sistema de monitoramento semanal
4. Desenvolva pelo menos 2 fontes de renda adicionais

Sistema antifr√°gil n√£o s√≥ resiste a crises, mas fica mais forte com elas."""
    
    def _formatar_plano_estrategico(self, plano: PlanoEstrategico) -> str:
        """üìù Formata plano estrat√©gico para apresenta√ß√£o"""
        return f"""üß† **AutoMaster v4.0 ‚Äî Plano Estrat√©gico Personalizado**

**PERFIL:** {plano.usuario.perfil_profissional.value.title()} | **FASE:** {plano.usuario.fase_vida.value.title()}

**üéØ ESTRAT√âGIA PRINCIPAL:**
{plano.estrategia_principal}

**üìÖ PLANO 90 DIAS:**
{plano.plano_90_dias}

**üí∞ SISTEMA DE MONETIZA√á√ÉO:**
{plano.sistema_monetizacao}

**üõ°Ô∏è SISTEMA ANTIFR√ÅGIL:**
{plano.sistema_antifragil}

**üìä M√ìDULOS ATIVADOS:** {len(plano.modulos_ativados)} especializados
**üéØ ID DO PLANO:** {plano.id}

_[Para ver plano completo de 1 ano, simula√ß√£o de faturamento ou ativa√ß√£o de m√≥dulos espec√≠ficos: solicite explicitamente]_"""
    
    def _atualizar_stats_automaster(self, tipo_solicitacao: str, modulos_ativados: int):
        """üìä Atualiza estat√≠sticas do AutoMaster"""
        self.stats["planos_estrategicos_criados"] += 1
        self.stats["modulos_ativados_total"] += modulos_ativados
        self.stats["usuarios_atendidos"] += 1
        
        # Estat√≠sticas espec√≠ficas por tipo
        if tipo_solicitacao == "curso_digital":
            self.stats["economia_gerada_estimada"] += 5000  # Estimativa de valor de curso
        elif tipo_solicitacao == "nomade_digital":
            self.stats["liberdade_geografica_alcancada"] += 1
        elif tipo_solicitacao == "energia_otima":
            self.stats["burnouts_prevenidos"] += 1
        elif tipo_solicitacao == "comunidade_propria":
            self.stats["comunidades_criadas"] += 1
    
    # === M√âTODOS AUXILIARES ESPEC√çFICOS ===
    
    def _gerar_sistema_monetizacao(self, perfil: PerfilUsuario) -> str:
        """üí∞ Gera sistema de monetiza√ß√£o personalizado"""
        return f"Sistema de monetiza√ß√£o multicanal para {perfil.perfil_profissional.value} com foco em escalabilidade e recorr√™ncia."
    
    def _gerar_estrategia_marca(self, perfil: PerfilUsuario) -> str:
        """üé® Gera estrat√©gia de marca"""
        return f"Estrat√©gia de marca aut√™ntica baseada em prop√≥sito e diferencia√ß√£o para {perfil.perfil_profissional.value}."
    
    def _gerar_plano_comunidade(self, perfil: PerfilUsuario) -> str:
        """üë• Gera plano de comunidade"""
        return f"Constru√ß√£o de comunidade engajada de {perfil.perfil_profissional.value} com foco em valor m√∫tuo e crescimento."
    
    def _gerar_sistema_antifragil(self, perfil: PerfilUsuario) -> str:
        """üõ°Ô∏è Gera sistema antifr√°gil"""
        return f"Sistema antifr√°gil personalizado para {perfil.perfil_profissional.value} com backup e conting√™ncias."
    
    def _definir_metricas_sucesso(self, perfil: PerfilUsuario) -> Dict[str, Any]:
        """üìä Define m√©tricas de sucesso"""
        return {
            "faturamento_mensal": 5000,
            "clientes_ativos": 20,
            "rate_retencao": 0.8,
            "liberdade_geografica": True
        }
    
    def _listar_recursos_necessarios(self, modulos: List[int]) -> List[str]:
        """üìã Lista recursos necess√°rios"""
        return ["Plataforma digital", "Sistema de pagamento", "Ferramentas de automa√ß√£o"]
    
    def _gerar_cronograma(self, perfil: PerfilUsuario) -> Dict[str, str]:
        """üìÖ Gera cronograma personalizado"""
        return {
            "mes_1": "Estrutura√ß√£o e setup inicial",
            "mes_2": "Implementa√ß√£o e primeiros clientes",
            "mes_3": "Otimiza√ß√£o e escalabilidade"
        }
    
    def _extrair_tema_curso(self, mensagem: str) -> Dict:
        """üìö Extrai tema do curso da mensagem"""
        # Implementa√ß√£o simplificada
        return {"tema": "expertise do usu√°rio", "formato": "online"}
    
    def _formatar_simulacao_faturamento(self, simulacao: SimulacaoFaturamento) -> str:
        """üí∞ Formata simula√ß√£o de faturamento"""
        return f"""üí∞ **SIMULA√á√ÉO DE FATURAMENTO MULTICANAL**

**PRODUTOS/SERVI√áOS:**
{chr(10).join(f"‚Ä¢ {produto}: R$ {valor:.2f}" for produto, valor in simulacao.produtos_servicos.items())}

**PROJE√á√ïES:**
‚Ä¢ **Mensal:** R$ {simulacao.projecao_mensal:.2f}
‚Ä¢ **Anual:** R$ {simulacao.projecao_anual:.2f}

**CEN√ÅRIOS:**
‚Ä¢ **Conservador:** R$ {simulacao.cenario_conservador:.2f}
‚Ä¢ **Otimista:** R$ {simulacao.cenario_otimista:.2f}

**PONTOS DE ATEN√á√ÉO:**
{chr(10).join(f"‚ö†Ô∏è {ponto}" for ponto in simulacao.pontos_criticos)}"""
    
    # M√©todos para outros modos espec√≠ficos
    def _ativar_modo_financas_integradas(self, perfil: PerfilUsuario) -> str:
        """üí≥ Ativa modo finan√ßas integradas"""
        return "üí≥ Modo Finan√ßas Integradas ativado - organizando fluxo pessoal e empresarial."
    
    def _ativar_modo_energia_otima(self, perfil: PerfilUsuario) -> str:
        """‚ö° Ativa modo energia √≥tima"""
        return "‚ö° Modo Energia √ìtima ativado - otimizando ritmo e prevenindo burnout."
    
    def _ativar_modo_comunidade(self, perfil: PerfilUsuario) -> str:
        """üë• Ativa modo comunidade"""
        return "üë• Modo Comunidade ativado - estruturando c√≠rculo pr√≥prio de valor."
    
    def _ativar_modo_socorro_total(self, perfil: PerfilUsuario) -> str:
        """üÜò Ativa modo socorro total"""
        return "üÜò Modo Socorro Total ativado - criando plano de conting√™ncia completo."
    
    def _gerar_resposta_personalizada(self, mensagem: str, perfil: PerfilUsuario, 
                                    modulos: List[int]) -> str:
        """üéØ Gera resposta personalizada"""
        return f"Resposta AutoMaster personalizada para {perfil.perfil_profissional.value} usando {len(modulos)} m√≥dulos especializados."
    
    def _consultar_oraculo_para_validacao(self, resposta: str, mensagem: str) -> str:
        """üîÆ Consulta Or√°culo para valida√ß√£o (integra√ß√£o futura)"""
        # Placeholder para integra√ß√£o com Or√°culo
        return f"{resposta}\n\nüîÆ _[Validado pelo Or√°culo v8.1 Plus+]_"
    
    # === M√âTODOS DE DIAGN√ìSTICO E STATUS ===
    
    def diagnosticar_automaster(self) -> Dict:
        """üîß Diagn√≥stico completo do AutoMaster"""
        modulos_ativos = len([m for m in self.modulos_avancados.values() if m.ativo])
        
        # Obter health status do BaseAgentV2
        health_status = self.get_health_status()
        
        return {
            "version": "4.0_Autonomia_Economica_Estrategica_V2",
            "status": health_status["status"].upper(),
            "health_score": health_status["health_score"],
            "modulos_disponiveis": len(self.modulos_avancados),
            "modulos_ativos": modulos_ativos,
            "planos_criados": len(self.planos_estrategicos),
            "simulacoes_realizadas": len(self.simulacoes_faturamento),
            "modo_antifragil": self.modo_antifragil_ativo,
            "sistema_backup": self.sistema_backup_ativo,
            "gemeo_pro": self.g√™meo_pro_ativo,
            "shadow_ops": self.shadow_ops_ativo,
            "integracoes": self.integracoes_ativas,
            "robustez": {
                "circuit_breaker": self.circuit_breaker.state,
                "cache_items": len(self.cache) if self.cache else 0,
                "memory_items": len(self.memory.messages),
                "persistent_memory": self.persistent_memory
            },
            "stats_completas": self.stats
        }
    
    def listar_modulos_disponiveis(self) -> str:
        """üìã Lista todos os m√≥dulos dispon√≠veis"""
        lista = "üß† **AUTOMASTER v4.0 - 32 M√ìDULOS AVAN√áADOS**\n\n"
        
        for modulo in self.modulos_avancados.values():
            status = "‚úÖ" if modulo.ativo else "‚ùå"
            lista += f"{status} **{modulo.id}. {modulo.nome}**\n"
            lista += f"   {modulo.descricao}\n"
            lista += f"   Complexidade: {'‚≠ê' * modulo.nivel_complexidade}\n\n"
        
        return lista
    
    def obter_historico_planos(self, ultimos: int = 5) -> str:
        """üìö Retorna hist√≥rico dos √∫ltimos planos"""
        if not self.planos_estrategicos:
            return "üìö Nenhum plano estrat√©gico criado ainda."
        
        planos_recentes = self.planos_estrategicos[-ultimos:]
        
        historico = f"üìö **HIST√ìRICO DOS √öLTIMOS {len(planos_recentes)} PLANOS**\n\n"
        
        for plano in reversed(planos_recentes):
            historico += f"**{plano.id}** - {plano.timestamp.strftime('%d/%m/%Y %H:%M')}\n"
            historico += f"Perfil: {plano.usuario.perfil_profissional.value}\n"
            historico += f"M√≥dulos: {len(plano.modulos_ativados)}\n"
            historico += "---\n\n"
        
        return historico
    
    def cleanup_resources(self):
        """Limpa recursos e salva estado final"""
        # Salvar hist√≥rico antes de limpar
        self._salvar_historico_persistente()
        
        # Chamar cleanup do BaseAgentV2
        super().cleanup_resources()
        
        logger.info("üßπ AutoMaster v4.0 recursos limpos e estado salvo")

# === FUN√á√ïES DE CRIA√á√ÉO ===

def criar_automaster_v2(llm=None, **kwargs) -> AutoMasterV2:
    """üß† Cria AutoMaster v4.0 com BaseAgentV2 e configura√ß√µes robustas"""
    return AutoMasterV2(llm=llm, **kwargs)

# Alias para compatibilidade
create_automaster_v2 = criar_automaster_v2
create_automaster = criar_automaster_v2

if __name__ == "__main__":
    print("üß† Testando AutoMaster v4.0 (BaseAgentV2)...")
    
    automaster = criar_automaster_v2()
    diagnostico = automaster.diagnosticar_automaster()
    
    print(f"üìä Diagn√≥stico: {diagnostico['version']}")
    print(f"ü§ñ Status: {diagnostico['status']} (Score: {diagnostico['health_score']})")
    print(f"üõ°Ô∏è Circuit Breaker: {diagnostico['robustez']['circuit_breaker']}")
    print(f"üíæ Mem√≥ria Persistente: {diagnostico['robustez']['persistent_memory']}")
    print(f"üì¶ M√≥dulos ativos: {diagnostico['modulos_ativos']}/{diagnostico['modulos_disponiveis']}")
    print("‚úÖ AutoMaster v4.0 (BaseAgentV2) pronto para autonomia econ√¥mica com robustez total!")