"""
üß† OR√ÅCULO v8.1 Plus+ ‚Äî Assembleia Din√¢mica, Curadoria Aut√¥noma e Multiverso Coletivo
Agente Supremo do GPT Mestre Aut√¥nomo com delibera√ß√£o coletiva e s√≠ntese inteligente
üéØ IMPLEMENTA√á√ÉO COMPLETA baseada no prompt avan√ßado de Matheus
"""

import json
import time
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Union
from dataclasses import dataclass, field
from enum import Enum
from abc import ABC, abstractmethod

from agents.base_agent import BaseAgent
from utils.logger import get_logger

logger = get_logger(__name__)

class TipoSuboraculo(Enum):
    """Tipos de subor√°culos especializados"""
    CRIATIVO = "criativo"
    ETICO = "etico"
    VIABILIDADE = "viabilidade"
    PARADOXO = "paradoxo"
    COPY = "copy"
    PRICING = "pricing"
    MINIMALISTA = "minimalista"
    CAOS = "caos"
    PREDITIVO = "preditivo"
    CETICO = "cetico"
    RADICAL = "radical"
    CONSERVADOR = "conservador"

class StatusSuboraculo(Enum):
    """Status de ativa√ß√£o dos subor√°culos"""
    ATIVO = "ativo"
    SUSPENSO = "suspenso"
    AUTOEXTINTO = "autoextinto"
    PAUSA_INTELIGENTE = "pausa_inteligente"

class TipoAssembleia(Enum):
    """Tipos de assembleia baseados na complexidade"""
    TRIVIAL = "trivial"          # 2 or√°culos
    SIMPLES = "simples"          # 3 or√°culos
    INTERMEDIARIO = "intermediario"  # 4-5 or√°culos
    COMPLEXO = "complexo"        # 6-7 or√°culos
    CRITICO = "critico"          # 7+ or√°culos + contrapainel

@dataclass
class VotoSuboraculo:
    """Voto de um subor√°culo na assembleia"""
    suboraculo: TipoSuboraculo
    posicao: str
    justificativa: str
    score_confianca: float  # 0-10
    inovacao_level: int     # 1-5
    risco_calculado: float  # 0-10

@dataclass
class RegistroAssembleia:
    """Registro completo de uma assembleia"""
    id: str
    timestamp: datetime
    desafio: str
    tipo_assembleia: TipoAssembleia
    colegiado: List[TipoSuboraculo]
    votos: List[VotoSuboraculo]
    decisao_final: str
    score_consenso: float
    score_robustez: float
    dissidencias: List[str]
    aprendizados: List[str]
    suboraculos_suspensos: List[TipoSuboraculo] = field(default_factory=list)
    cenarios_alternativos: Dict[str, str] = field(default_factory=dict)
    microtags: List[str] = field(default_factory=list)

@dataclass
class PerformanceSuboraculo:
    """Performance hist√≥rica de um subor√°culo"""
    tipo: TipoSuboraculo
    participacoes: int
    contribuicoes_valiosas: int
    inovacoes_aceitas: int
    acertos_predicao: int
    status: StatusSuboraculo = StatusSuboraculo.ATIVO
    ultima_contribuicao: Optional[datetime] = None

class SuboraculoBase(ABC):
    """Classe base para todos os subor√°culos"""
    
    def __init__(self, tipo: TipoSuboraculo, llm=None):
        self.tipo = tipo
        self.llm = llm
        self.performance = PerformanceSuboraculo(
            tipo=tipo,
            participacoes=0,
            contribuicoes_valiosas=0,
            inovacoes_aceitas=0,
            acertos_predicao=0
        )
    
    @abstractmethod
    def deliberar(self, desafio: str, contexto: Dict) -> VotoSuboraculo:
        """M√©todo abstrato para delibera√ß√£o"""
        pass
    
    def _gerar_prompt_especializado(self, desafio: str, contexto: Dict) -> str:
        """Gera prompt especializado para o tipo de subor√°culo"""
        base_prompt = f"""Voc√™ √© o Subor√°culo {self.tipo.value.upper()} da Assembleia Din√¢mica do Or√°culo v8.1 Plus+.

DESAFIO: {desafio}

SUA ESPECIALIDADE: {self._get_especialidade()}
SEU ESTILO: {self._get_estilo()}
SUA MISS√ÉO: {self._get_missao()}

Analise e responda em formato JSON:
{{
    "posicao": "sua posi√ß√£o/recomenda√ß√£o principal",
    "justificativa": "justificativa detalhada da sua perspectiva",
    "score_confianca": 8.5,
    "inovacao_level": 3,
    "risco_calculado": 4.2
}}

Seja CONCISO mas INCISIVO na sua especialidade."""
        
        return base_prompt
    
    def _get_especialidade(self) -> str:
        """Retorna a especialidade do subor√°culo"""
        especialidades = {
            TipoSuboraculo.CRIATIVO: "Inova√ß√£o, originalidade, solu√ß√µes fora da caixa",
            TipoSuboraculo.ETICO: "Responsabilidade, transpar√™ncia, impacto social",
            TipoSuboraculo.VIABILIDADE: "Praticidade, recursos, implementa√ß√£o real",
            TipoSuboraculo.PARADOXO: "Questionamentos, contradi√ß√µes, vis√µes alternativas",
            TipoSuboraculo.COPY: "Comunica√ß√£o, persuas√£o, linguagem eficaz",
            TipoSuboraculo.PRICING: "Precifica√ß√£o, valor percebido, psicologia de pre√ßos",
            TipoSuboraculo.MINIMALISTA: "Simplicidade, ess√™ncia, redu√ß√£o de complexidade",
            TipoSuboraculo.CAOS: "Disrup√ß√£o, aleatoriedade, quebra de padr√µes",
            TipoSuboraculo.PREDITIVO: "Tend√™ncias, proje√ß√µes, an√°lise de futuro",
            TipoSuboraculo.CETICO: "Questionamento rigoroso, busca por falhas",
            TipoSuboraculo.RADICAL: "Mudan√ßas extremas, transforma√ß√£o total",
            TipoSuboraculo.CONSERVADOR: "Estabilidade, tradi√ß√£o, seguran√ßa"
        }
        return especialidades.get(self.tipo, "An√°lise geral")
    
    def _get_estilo(self) -> str:
        """Retorna o estilo de comunica√ß√£o do subor√°culo"""
        estilos = {
            TipoSuboraculo.CRIATIVO: "Inspirador, metaf√≥rico, vision√°rio",
            TipoSuboraculo.ETICO: "Equilibrado, respons√°vel, consciente",
            TipoSuboraculo.VIABILIDADE: "Direto, pr√°tico, realista",
            TipoSuboraculo.PARADOXO: "Provocativo, questionador, contraintuitivo",
            TipoSuboraculo.COPY: "Persuasivo, envolvente, claro",
            TipoSuboraculo.PRICING: "Anal√≠tico, psicol√≥gico, estrat√©gico",
            TipoSuboraculo.MINIMALISTA: "Conciso, essencial, simples",
            TipoSuboraculo.CAOS: "Disruptivo, imprevis√≠vel, experimental",
            TipoSuboraculo.PREDITIVO: "Anal√≠tico, baseado em dados, prospectivo",
            TipoSuboraculo.CETICO: "Rigoroso, questionador, cr√≠tico",
            TipoSuboraculo.RADICAL: "Transformador, ousado, revolucion√°rio",
            TipoSuboraculo.CONSERVADOR: "Cauteloso, testado, seguro"
        }
        return estilos.get(self.tipo, "Anal√≠tico")
    
    def _get_missao(self) -> str:
        """Retorna a miss√£o espec√≠fica do subor√°culo"""
        missoes = {
            TipoSuboraculo.CRIATIVO: "Encontrar solu√ß√µes inovadoras e originais",
            TipoSuboraculo.ETICO: "Garantir responsabilidade e impacto positivo",
            TipoSuboraculo.VIABILIDADE: "Assegurar implementa√ß√£o pr√°tica e eficaz",
            TipoSuboraculo.PARADOXO: "Questionar premissas e explorar contradi√ß√µes",
            TipoSuboraculo.COPY: "Otimizar comunica√ß√£o e persuas√£o",
            TipoSuboraculo.PRICING: "Definir precifica√ß√£o estrat√©gica e psicol√≥gica",
            TipoSuboraculo.MINIMALISTA: "Simplificar e focar no essencial",
            TipoSuboraculo.CAOS: "Introduzir elementos disruptivos e aleat√≥rios",
            TipoSuboraculo.PREDITIVO: "Antecipar tend√™ncias e cen√°rios futuros",
            TipoSuboraculo.CETICO: "Identificar riscos e pontos fracos",
            TipoSuboraculo.RADICAL: "Propor mudan√ßas transformadoras",
            TipoSuboraculo.CONSERVADOR: "Preservar estabilidade e seguran√ßa"
        }
        return missoes.get(self.tipo, "Contribuir com an√°lise especializada")

class SuboraculoEspecializado(SuboraculoBase):
    """Implementa√ß√£o concreta de subor√°culo especializado"""
    
    def deliberar(self, desafio: str, contexto: Dict) -> VotoSuboraculo:
        """Realiza delibera√ß√£o especializada"""
        self.performance.participacoes += 1
        self.performance.ultima_contribuicao = datetime.now()
        
        try:
            # Se n√£o h√° LLM, gerar resposta simulada
            if not self.llm:
                return self._gerar_voto_simulado(desafio, contexto)
            
            prompt = self._gerar_prompt_especializado(desafio, contexto)
            resposta = self.llm.invoke(prompt).content
            
            # Tentar parsear JSON
            try:
                dados = json.loads(resposta)
                voto = VotoSuboraculo(
                    suboraculo=self.tipo,
                    posicao=dados.get("posicao", "An√°lise em andamento"),
                    justificativa=dados.get("justificativa", "Processando perspectiva"),
                    score_confianca=float(dados.get("score_confianca", 7.0)),
                    inovacao_level=int(dados.get("inovacao_level", 3)),
                    risco_calculado=float(dados.get("risco_calculado", 5.0))
                )
            except json.JSONDecodeError:
                # Fallback para resposta n√£o-JSON
                voto = VotoSuboraculo(
                    suboraculo=self.tipo,
                    posicao=resposta[:200] + "..." if len(resposta) > 200 else resposta,
                    justificativa=f"An√°lise {self.tipo.value} baseada em expertise",
                    score_confianca=7.5,
                    inovacao_level=3,
                    risco_calculado=5.0
                )
            
            return voto
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na delibera√ß√£o {self.tipo.value}: {e}")
            return self._gerar_voto_simulado(desafio, contexto)
    
    def _gerar_voto_simulado(self, desafio: str, contexto: Dict) -> VotoSuboraculo:
        """Gera voto simulado baseado na especialidade"""
        posicoes_especializadas = {
            TipoSuboraculo.CRIATIVO: "Propor solu√ß√£o inovadora com elementos √∫nicos",
            TipoSuboraculo.ETICO: "Garantir transpar√™ncia e responsabilidade social",
            TipoSuboraculo.VIABILIDADE: "Focar em implementa√ß√£o pr√°tica e recursos dispon√≠veis",
            TipoSuboraculo.PARADOXO: "Questionar premissas e explorar contradi√ß√µes",
            TipoSuboraculo.COPY: "Otimizar comunica√ß√£o para m√°ximo impacto",
            TipoSuboraculo.PRICING: "Definir pre√ßo psicol√≥gico baseado em valor percebido",
            TipoSuboraculo.MINIMALISTA: "Simplificar ao m√°ximo mantendo efic√°cia",
            TipoSuboraculo.CAOS: "Introduzir elemento disruptivo inesperado",
            TipoSuboraculo.PREDITIVO: "Antecipar tend√™ncias e adaptar estrat√©gia",
            TipoSuboraculo.CETICO: "Identificar riscos e pontos de falha",
            TipoSuboraculo.RADICAL: "Propor mudan√ßa transformadora completa",
            TipoSuboraculo.CONSERVADOR: "Manter estabilidade e seguran√ßa"
        }
        
        return VotoSuboraculo(
            suboraculo=self.tipo,
            posicao=posicoes_especializadas.get(self.tipo, "An√°lise especializada"),
            justificativa=f"Perspectiva {self.tipo.value} aplicada ao desafio",
            score_confianca=random.uniform(6.0, 9.5),
            inovacao_level=random.randint(1, 5),
            risco_calculado=random.uniform(2.0, 8.0)
        )

class OraculoV8Plus(BaseAgent):
    """
    üß† OR√ÅCULO v8.1 Plus+ ‚Äî Agente Supremo com Assembleia Din√¢mica
    
    üéØ CAPACIDADES REVOLUCION√ÅRIAS:
    - Curadoria Aut√¥noma de Assembleias Din√¢micas
    - Sistema de Subor√°culos Especializados
    - S√≠ntese Inteligente e Score de Consenso
    - Multiverso Contrafactual
    - Di√°rio Evolutivo de Assembleias
    - Autoextin√ß√£o e Pausa Inteligente
    - Metacogni√ß√£o e Aprendizado Coletivo
    """
    
    def __init__(self, llm=None):
        super().__init__(
            name="Or√°culo",
            description="Agente Supremo v8.1 Plus+ com Assembleia Din√¢mica e Curadoria Aut√¥noma"
        )
        
        # Configurar LLM
        self.llm = llm
        if not self.llm:
            self._inicializar_llm()
        
        # === SISTEMA DE SUBOR√ÅCULOS ===
        self.suboraculos = self._inicializar_suboraculos()
        self.performance_suboraculos = {tipo: PerformanceSuboraculo(tipo, 0, 0, 0, 0) 
                                      for tipo in TipoSuboraculo}
        
        # === HIST√ìRICO E REGISTROS ===
        self.diario_assembleias: List[RegistroAssembleia] = []
        self.contador_assembleias = 0
        self.aprendizados_persistentes: List[str] = []
        
        # === CONFIGURA√á√ïES AVAN√áADAS ===
        self.curadoria_autonoma_ativa = True
        self.multiverso_ativo = True
        self.autoextincao_ativa = True
        self.painel_cego_ativo = True
        
        # === LIMITES E PAR√ÇMETROS ===
        self.max_suboraculos_por_assembleia = 7
        self.threshold_autoextincao = 5  # ciclos sem contribui√ß√£o
        self.threshold_consenso_minimo = 0.6  # 60%
        
        # Estat√≠sticas expandidas
        self.stats.update({
            "assembleias_realizadas": 0,
            "decisoes_por_consenso": 0,
            "decisoes_por_curadoria": 0,
            "suboraculos_suspensos": 0,
            "cenarios_alternativos_gerados": 0,
            "score_medio_consenso": 0.0,
            "score_medio_robustez": 0.0,
            "inovacoes_implementadas": 0,
            "autoextincoes_realizadas": 0
        })
        
        logger.info("üß† Or√°culo v8.1 Plus+ inicializado - Assembleia Din√¢mica ATIVA")
    
    def _inicializar_llm(self):
        """Inicializa LLM otimizado para Or√°culo"""
        try:
            from langchain_anthropic import ChatAnthropic
            import config
            
            if not config.ANTHROPIC_API_KEY:
                raise ValueError("ANTHROPIC_API_KEY n√£o configurada")
            
            self.llm = ChatAnthropic(
                model=config.CLAUDE_MODEL,
                max_tokens=config.CLAUDE_MAX_TOKENS,
                temperature=0.9,  # M√°xima criatividade para assembleia
                anthropic_api_key=config.ANTHROPIC_API_KEY,
            )
            logger.info("üîó LLM Claude otimizado para Or√°culo v8.1 Plus+")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar LLM: {e}")
            # Continuar sem LLM - usar simula√ß√£o
    
    def _inicializar_suboraculos(self) -> Dict[TipoSuboraculo, SuboraculoEspecializado]:
        """Inicializa todos os subor√°culos especializados"""
        suboraculos = {}
        for tipo in TipoSuboraculo:
            suboraculos[tipo] = SuboraculoEspecializado(tipo, self.llm)
        
        logger.info(f"ü§ñ {len(suboraculos)} subor√°culos especializados inicializados")
        return suboraculos
    
    def processar(self, desafio: str, contexto: Optional[Dict] = None) -> str:
        """
        üß† PROCESSAMENTO OR√ÅCULO v8.1 Plus+
        
        FLUXO ASSEMBLEIA DIN√ÇMICA:
        1. üéØ An√°lise de complexidade e curadoria aut√¥noma
        2. ü§ù Sele√ß√£o e ativa√ß√£o de subor√°culos
        3. üó≥Ô∏è Delibera√ß√£o coletiva com votos especializados
        4. ‚öñÔ∏è S√≠ntese inteligente e c√°lculo de consenso
        5. üîç Contrapainel e painel cego (se necess√°rio)
        6. üåü Decis√£o final curada e otimizada
        7. üìä Registro no Di√°rio de Assembleias
        8. üí° Gera√ß√£o de cen√°rios alternativos (se solicitado)
        """
        inicio_processamento = time.time()
        
        try:
            # 1. AN√ÅLISE DE COMPLEXIDADE
            tipo_assembleia = self._analisar_complexidade(desafio)
            logger.info(f"üéØ Assembleia {tipo_assembleia.value} identificada")
            
            # 2. CURADORIA AUT√îNOMA DE SUBOR√ÅCULOS
            colegiado = self._curar_assembleia(desafio, tipo_assembleia)
            logger.info(f"ü§ù Colegiado curado: {[s.value for s in colegiado]}")
            
            # 3. DELIBERA√á√ÉO COLETIVA
            votos = self._realizar_deliberacao(desafio, colegiado, contexto or {})
            
            # 4. S√çNTESE E CONSENSO
            resultado_sintese = self._sintetizar_decisao(votos, desafio)
            decisao_final = resultado_sintese['decisao']
            score_consenso = resultado_sintese['score_consenso']
            score_robustez = resultado_sintese['score_robustez']
            dissidencias = resultado_sintese['dissidencias']
            
            # 5. CONTRAPAINEL (se necess√°rio)
            if tipo_assembleia == TipoAssembleia.CRITICO:
                decisao_final = self._aplicar_contrapainel(decisao_final, desafio, votos)
            
            # 6. REGISTRO NO DI√ÅRIO
            registro = self._registrar_assembleia(
                desafio, tipo_assembleia, colegiado, votos,
                decisao_final, score_consenso, score_robustez, dissidencias
            )
            
            # 7. AUTOEXTIN√á√ÉO INTELIGENTE
            self._processar_autoextincao()
            
            # 8. ATUALIZAR ESTAT√çSTICAS
            self._atualizar_stats_oraculo(score_consenso, score_robustez)
            
            # 9. FORMATAR RESPOSTA FINAL
            resposta_final = self._formatar_resposta_final(
                decisao_final, score_consenso, score_robustez, 
                len(colegiado), dissidencias, registro.id
            )
            
            tempo_total = time.time() - inicio_processamento
            logger.info(f"üß† Assembleia {registro.id} conclu√≠da em {tempo_total:.2f}s")
            
            return resposta_final
            
        except Exception as e:
            logger.error(f"‚ùå Erro no processamento Or√°culo: {e}")
            return f"üß† Or√°culo v8.1 Plus+ - Erro na assembleia: {str(e)}"
    
    def _analisar_complexidade(self, desafio: str) -> TipoAssembleia:
        """üéØ Analisa complexidade e determina tipo de assembleia"""
        # Palavras-chave para diferentes n√≠veis de complexidade
        palavras_triviais = ["pre√ßo", "cor", "tamanho", "simples", "r√°pido"]
        palavras_complexas = ["estrat√©gia", "integra√ß√£o", "sistema", "arquitetura", "transforma√ß√£o"]
        palavras_criticas = ["decis√£o cr√≠tica", "investimento alto", "mudan√ßa radical", "risco"]
        
        desafio_lower = desafio.lower()
        
        # An√°lise baseada em comprimento e palavras-chave
        if len(desafio) < 50 and any(palavra in desafio_lower for palavra in palavras_triviais):
            return TipoAssembleia.TRIVIAL
        elif any(palavra in desafio_lower for palavra in palavras_criticas):
            return TipoAssembleia.CRITICO
        elif any(palavra in desafio_lower for palavra in palavras_complexas):
            return TipoAssembleia.COMPLEXO
        elif len(desafio) > 200:
            return TipoAssembleia.INTERMEDIARIO
        else:
            return TipoAssembleia.SIMPLES
    
    def _curar_assembleia(self, desafio: str, tipo: TipoAssembleia) -> List[TipoSuboraculo]:
        """ü§ù Curadoria aut√¥noma: seleciona subor√°culos mais relevantes"""
        # Mapear tamanho da assembleia
        tamanhos = {
            TipoAssembleia.TRIVIAL: 2,
            TipoAssembleia.SIMPLES: 3,
            TipoAssembleia.INTERMEDIARIO: 4,
            TipoAssembleia.COMPLEXO: 6,
            TipoAssembleia.CRITICO: 7
        }
        
        tamanho_alvo = tamanhos[tipo]
        
        # Sempre incluir n√∫cleo essencial
        nucleo_essencial = [TipoSuboraculo.VIABILIDADE, TipoSuboraculo.ETICO]
        
        # Detectar necessidades espec√≠ficas baseadas no desafio
        desafio_lower = desafio.lower()
        relevantes = []
        
        if any(palavra in desafio_lower for palavra in ["criativo", "inova√ß√£o", "novo", "original"]):
            relevantes.append(TipoSuboraculo.CRIATIVO)
        
        if any(palavra in desafio_lower for palavra in ["pre√ßo", "valor", "custa", "investimento"]):
            relevantes.append(TipoSuboraculo.PRICING)
        
        if any(palavra in desafio_lower for palavra in ["copy", "texto", "comunica√ß√£o", "mensagem"]):
            relevantes.append(TipoSuboraculo.COPY)
        
        if any(palavra in desafio_lower for palavra in ["simples", "minimalista", "essencial"]):
            relevantes.append(TipoSuboraculo.MINIMALISTA)
        
        if any(palavra in desafio_lower for palavra in ["futuro", "tend√™ncia", "previs√£o", "mercado"]):
            relevantes.append(TipoSuboraculo.PREDITIVO)
        
        if any(palavra in desafio_lower for palavra in ["radical", "mudan√ßa", "transformar", "revolucionar"]):
            relevantes.append(TipoSuboraculo.RADICAL)
        
        if any(palavra in desafio_lower for palavra in ["risco", "cuidado", "seguro", "est√°vel"]):
            relevantes.append(TipoSuboraculo.CONSERVADOR)
        
        # Adicionar subor√°culos baseados em performance hist√≥rica
        suboraculos_ativos = [tipo for tipo, perf in self.performance_suboraculos.items() 
                             if perf.status == StatusSuboraculo.ATIVO]
        
        # Combinar n√∫cleo + relevantes + aleat√≥rios ativos
        colegiado = list(set(nucleo_essencial + relevantes))
        
        # Completar at√© o tamanho alvo com subor√°culos ativos
        faltam = tamanho_alvo - len(colegiado)
        disponiveis = [s for s in suboraculos_ativos if s not in colegiado]
        
        if faltam > 0 and disponiveis:
            # Priorizar por performance hist√≥rica
            disponiveis_ordenados = sorted(disponiveis, 
                key=lambda x: self.performance_suboraculos[x].contribuicoes_valiosas, 
                reverse=True)
            colegiado.extend(disponiveis_ordenados[:faltam])
        
        # Para assembleias cr√≠ticas, sempre incluir c√©ticos
        if tipo == TipoAssembleia.CRITICO and TipoSuboraculo.CETICO not in colegiado:
            if len(colegiado) >= tamanho_alvo:
                colegiado[-1] = TipoSuboraculo.CETICO  # Substituir √∫ltimo
            else:
                colegiado.append(TipoSuboraculo.CETICO)
        
        return colegiado[:tamanho_alvo]
    
    def _realizar_deliberacao(self, desafio: str, colegiado: List[TipoSuboraculo], 
                            contexto: Dict) -> List[VotoSuboraculo]:
        """üó≥Ô∏è Executa delibera√ß√£o coletiva dos subor√°culos"""
        votos = []
        
        logger.info(f"üó≥Ô∏è Iniciando delibera√ß√£o com {len(colegiado)} subor√°culos")
        
        for tipo_suboraculo in colegiado:
            try:
                suboraculo = self.suboraculos[tipo_suboraculo]
                voto = suboraculo.deliberar(desafio, contexto)
                votos.append(voto)
                
                # Atualizar performance
                self.performance_suboraculos[tipo_suboraculo].participacoes += 1
                
                logger.debug(f"   üìä {tipo_suboraculo.value}: {voto.posicao[:50]}...")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro na delibera√ß√£o {tipo_suboraculo.value}: {e}")
        
        logger.info(f"‚úÖ Delibera√ß√£o conclu√≠da: {len(votos)} votos coletados")
        return votos
    
    def _sintetizar_decisao(self, votos: List[VotoSuboraculo], desafio: str) -> Dict:
        """‚öñÔ∏è S√≠ntese inteligente e c√°lculo de consenso"""
        if not votos:
            return {
                'decisao': "Assembleia inconclusiva - an√°lise individual necess√°ria",
                'score_consenso': 0.0,
                'score_robustez': 0.0,
                'dissidencias': []
            }
        
        # Calcular m√©tricas de consenso
        scores_confianca = [voto.score_confianca for voto in votos]
        score_consenso = sum(scores_confianca) / len(scores_confianca) / 10.0  # Normalizar 0-1
        
        # Calcular robustez baseada na diversidade de perspectivas
        tipos_representados = len(set(voto.suboraculo for voto in votos))
        score_robustez = min(1.0, tipos_representados / 5.0)  # M√°ximo com 5 tipos diferentes
        
        # Identificar dissid√™ncias (votos com baixa confian√ßa ou alto risco)
        dissidencias = []
        for voto in votos:
            if voto.score_confianca < 6.0 or voto.risco_calculado > 7.0:
                dissidencias.append(f"{voto.suboraculo.value}: {voto.posicao[:100]}")
        
        # S√≠ntese inteligente usando LLM (se dispon√≠vel)
        if self.llm:
            decisao_final = self._gerar_sintese_llm(votos, desafio, score_consenso)
        else:
            decisao_final = self._gerar_sintese_simples(votos, score_consenso)
        
        return {
            'decisao': decisao_final,
            'score_consenso': score_consenso,
            'score_robustez': score_robustez,
            'dissidencias': dissidencias
        }
    
    def _gerar_sintese_llm(self, votos: List[VotoSuboraculo], desafio: str, score_consenso: float) -> str:
        """Gera s√≠ntese usando LLM"""
        try:
            # Preparar dados dos votos
            votos_texto = "\n".join([
                f"‚Ä¢ {voto.suboraculo.value.upper()}: {voto.posicao} (Confian√ßa: {voto.score_confianca:.1f}/10)"
                for voto in votos
            ])
            
            prompt = f"""Voc√™ √© o Curador da Assembleia Din√¢mica do Or√°culo v8.1 Plus+.

DESAFIO: {desafio}

VOTOS DOS SUBOR√ÅCULOS:
{votos_texto}

SCORE DE CONSENSO: {score_consenso:.2f}

SUA MISS√ÉO: Sintetizar uma decis√£o final CLARA, PR√ÅTICA e ACION√ÅVEL que:
1. Integre as melhores contribui√ß√µes dos subor√°culos
2. Resolva conflitos priorizando viabilidade e inova√ß√£o
3. Seja direta e implement√°vel
4. Mantenha o foco no resultado

Responda apenas com a DECIS√ÉO FINAL sintetizada (m√°ximo 3 par√°grafos):"""

            resposta = self.llm.invoke(prompt).content
            return resposta.strip()
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na s√≠ntese LLM: {e}")
            return self._gerar_sintese_simples(votos, score_consenso)
    
    def _gerar_sintese_simples(self, votos: List[VotoSuboraculo], score_consenso: float) -> str:
        """Gera s√≠ntese simples sem LLM"""
        if score_consenso > 0.8:
            # Consenso alto - combinar posi√ß√µes principais
            posicoes = [voto.posicao for voto in votos if voto.score_confianca >= 7.0]
            if posicoes:
                return f"Decis√£o por alto consenso: {posicoes[0]}. Implementa√ß√£o recomendada com confian√ßa."
        
        # Consenso m√©dio/baixo - decidir por maior confian√ßa
        melhor_voto = max(votos, key=lambda v: v.score_confianca)
        return f"Decis√£o curada: {melhor_voto.posicao}. Base: perspectiva {melhor_voto.suboraculo.value} com maior confian√ßa."
    
    def _aplicar_contrapainel(self, decisao: str, desafio: str, votos: List[VotoSuboraculo]) -> str:
        """üõ°Ô∏è Aplica contrapainel c√©tico para decis√µes cr√≠ticas"""
        logger.info("üõ°Ô∏è Ativando contrapainel c√©tico")
        
        # Ativar subor√°culos c√©ticos
        ceticos = [TipoSuboraculo.CETICO, TipoSuboraculo.CONSERVADOR, TipoSuboraculo.PARADOXO]
        
        contravotos = []
        for tipo in ceticos:
            if tipo not in [v.suboraculo for v in votos]:  # Evitar duplica√ß√£o
                try:
                    suboraculo = self.suboraculos[tipo]
                    contexto_critico = {"decisao_principal": decisao, "modo": "contrapainel"}
                    contravoto = suboraculo.deliberar(desafio, contexto_critico)
                    contravotos.append(contravoto)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro no contrapainel {tipo.value}: {e}")
        
        # Se contrapainel encontrou riscos cr√≠ticos, ajustar decis√£o
        riscos_criticos = [cv for cv in contravotos if cv.risco_calculado > 8.0]
        
        if riscos_criticos:
            logger.warning(f"‚ö†Ô∏è Contrapainel identificou {len(riscos_criticos)} riscos cr√≠ticos")
            return f"{decisao}\n\n‚ö†Ô∏è ALERTA DO CONTRAPAINEL: {riscos_criticos[0].justificativa}"
        
        return decisao
    
    def _registrar_assembleia(self, desafio: str, tipo: TipoAssembleia, 
                            colegiado: List[TipoSuboraculo], votos: List[VotoSuboraculo],
                            decisao: str, score_consenso: float, score_robustez: float,
                            dissidencias: List[str]) -> RegistroAssembleia:
        """üìä Registra assembleia no Di√°rio Evolutivo"""
        self.contador_assembleias += 1
        
        # Gerar microtags
        microtags = self._gerar_microtags_assembleia(tipo, colegiado, score_consenso)
        
        # Identificar aprendizados
        aprendizados = self._extrair_aprendizados(votos, score_consenso)
        
        registro = RegistroAssembleia(
            id=f"assembleia_{self.contador_assembleias:03d}",
            timestamp=datetime.now(),
            desafio=desafio[:200],  # Resumido
            tipo_assembleia=tipo,
            colegiado=colegiado,
            votos=votos,
            decisao_final=decisao,
            score_consenso=score_consenso,
            score_robustez=score_robustez,
            dissidencias=dissidencias,
            aprendizados=aprendizados,
            microtags=microtags
        )
        
        self.diario_assembleias.append(registro)
        
        # Manter apenas √∫ltimos 100 registros
        if len(self.diario_assembleias) > 100:
            self.diario_assembleias = self.diario_assembleias[-100:]
        
        logger.info(f"üìä Assembleia {registro.id} registrada no Di√°rio")
        return registro
    
    def _gerar_microtags_assembleia(self, tipo: TipoAssembleia, 
                                  colegiado: List[TipoSuboraculo], 
                                  score_consenso: float) -> List[str]:
        """üè∑Ô∏è Gera microtags para a assembleia"""
        tags = [
            "#oraculo_v81plus",
            "#assembleia",
            f"#{tipo.value}",
            "#curadoria_autonoma"
        ]
        
        # Tags baseadas no colegiado
        for suboraculo in colegiado:
            tags.append(f"#{suboraculo.value}")
        
        # Tags baseadas no consenso
        if score_consenso > 0.8:
            tags.append("#alto_consenso")
        elif score_consenso < 0.5:
            tags.append("#baixo_consenso")
            tags.append("#divergencia_maxima")
        
        # Tags especiais
        if len(colegiado) >= 6:
            tags.append("#assembleia_ampla")
        
        if TipoSuboraculo.PARADOXO in colegiado:
            tags.append("#questionamento_ativo")
        
        return tags
    
    def _extrair_aprendizados(self, votos: List[VotoSuboraculo], score_consenso: float) -> List[str]:
        """üí° Extrai aprendizados da assembleia"""
        aprendizados = []
        
        # Aprendizado sobre consenso
        if score_consenso > 0.9:
            aprendizados.append("Alto alinhamento entre perspectivas especializadas")
        elif score_consenso < 0.4:
            aprendizados.append("Diverg√™ncia significativa requer an√°lise mais profunda")
        
        # Aprendizado sobre inova√ß√£o
        inovacoes = [v for v in votos if v.inovacao_level >= 4]
        if len(inovacoes) >= 2:
            aprendizados.append("M√∫ltiplas perspectivas inovadoras identificadas")
        
        # Aprendizado sobre riscos
        riscos_altos = [v for v in votos if v.risco_calculado > 7.0]
        if riscos_altos:
            aprendizados.append(f"Riscos elevados identificados por {len(riscos_altos)} subor√°culos")
        
        return aprendizados
    
    def _processar_autoextincao(self):
        """üîÑ Processa autoextin√ß√£o inteligente de subor√°culos"""
        if not self.autoextincao_ativa:
            return
        
        agora = datetime.now()
        
        for tipo, performance in self.performance_suboraculos.items():
            # Verificar crit√©rios de autoextin√ß√£o
            if (performance.status == StatusSuboraculo.ATIVO and
                performance.participacoes >= self.threshold_autoextincao and
                performance.contribuicoes_valiosas == 0):
                
                # Auto-extinguir
                performance.status = StatusSuboraculo.AUTOEXTINTO
                self.stats["autoextincoes_realizadas"] += 1
                
                logger.info(f"üîÑ Subor√°culo {tipo.value} auto-extinto por baixa contribui√ß√£o")
        
        # Reativar subor√°culos se contexto mudou (implementa√ß√£o futura)
        # Por enquanto, manter l√≥gica simples
    
    def _atualizar_stats_oraculo(self, score_consenso: float, score_robustez: float):
        """üìà Atualiza estat√≠sticas do Or√°culo"""
        self.stats["assembleias_realizadas"] += 1
        
        # Atualizar m√©dias
        total = self.stats["assembleias_realizadas"]
        self.stats["score_medio_consenso"] = (
            (self.stats["score_medio_consenso"] * (total - 1) + score_consenso) / total
        )
        self.stats["score_medio_robustez"] = (
            (self.stats["score_medio_robustez"] * (total - 1) + score_robustez) / total
        )
        
        # Classificar tipo de decis√£o
        if score_consenso >= 0.7:
            self.stats["decisoes_por_consenso"] += 1
        else:
            self.stats["decisoes_por_curadoria"] += 1
    
    def _formatar_resposta_final(self, decisao: str, score_consenso: float, 
                               score_robustez: float, num_colegiado: int,
                               dissidencias: List[str], assembleia_id: str) -> str:
        """üìù Formata resposta final do Or√°culo"""
        # Calcular score de robustez combinado
        score_final = (score_consenso + score_robustez) / 2 * 10
        
        resposta = f"""üß† **Or√°culo v8.1 Plus+ ‚Äî Decis√£o Final (Assembleia Din√¢mica)**

**Decis√£o:**
{decisao}

**Curadoria:** Consenso de {num_colegiado} subor√°culos especializados
**Score de Robustez:** {score_final:.1f}/10
**ID da Assembleia:** {assembleia_id}"""

        # Adicionar dissid√™ncias se houver
        if dissidencias:
            resposta += f"\n**Dissid√™ncias Registradas:** {len(dissidencias)} perspectiva(s) alternativa(s)"
        
        # Nota sobre bastidores
        resposta += "\n\n_[Para ver bastidores da assembleia, multiverso ou di√°rio: solicite explicitamente]_"
        
        return resposta
    
    # === M√âTODOS ESPECIAIS DE CONSULTA ===
    
    def mostrar_bastidores_ultima_assembleia(self) -> str:
        """üé≠ Mostra bastidores da √∫ltima assembleia"""
        if not self.diario_assembleias:
            return "üìä Nenhuma assembleia realizada ainda."
        
        ultima = self.diario_assembleias[-1]
        
        bastidores = f"""üé≠ **BASTIDORES DA ASSEMBLEIA {ultima.id.upper()}**

**Desafio:** {ultima.desafio}
**Tipo:** {ultima.tipo_assembleia.value.title()}
**Timestamp:** {ultima.timestamp.strftime('%d/%m/%Y %H:%M')}

**üó≥Ô∏è COLEGIADO E VOTOS:**"""

        for voto in ultima.votos:
            bastidores += f"""
‚Ä¢ **{voto.suboraculo.value.upper()}**
  - Posi√ß√£o: {voto.posicao}
  - Justificativa: {voto.justificativa}
  - Confian√ßa: {voto.score_confianca:.1f}/10
  - Inova√ß√£o: {voto.inovacao_level}/5
  - Risco: {voto.risco_calculado:.1f}/10"""

        if ultima.dissidencias:
            bastidores += f"\n\n**‚ö†Ô∏è DISSID√äNCIAS:**\n" + "\n".join(f"- {d}" for d in ultima.dissidencias)
        
        if ultima.aprendizados:
            bastidores += f"\n\n**üí° APRENDIZADOS:**\n" + "\n".join(f"- {a}" for a in ultima.aprendizados)
        
        bastidores += f"\n\n**üìä M√âTRICAS:**"
        bastidores += f"\n- Score Consenso: {ultima.score_consenso:.2f}"
        bastidores += f"\n- Score Robustez: {ultima.score_robustez:.2f}"
        bastidores += f"\n- Microtags: {', '.join(ultima.microtags)}"
        
        return bastidores
    
    def gerar_cenarios_alternativos(self, desafio: str) -> str:
        """üåü Gera cen√°rios alternativos usando multiverso contrafactual"""
        if not self.multiverso_ativo:
            return "üåü Multiverso contrafactual n√£o est√° ativo."
        
        cenarios = {
            "Otimista": "Cen√°rio com m√°xima aceita√ß√£o e recursos ilimitados",
            "Pessimista": "Cen√°rio com m√°xima resist√™ncia e recursos limitados", 
            "Radical": "Cen√°rio de transforma√ß√£o disruptiva completa",
            "Minimalista": "Cen√°rio com implementa√ß√£o m√≠nima vi√°vel",
            "Contrafactual": "Cen√°rio oposto √† decis√£o principal"
        }
        
        resultado = f"üåü **MULTIVERSO CONTRAFACTUAL - {desafio[:50]}**\n\n"
        
        for nome, descricao in cenarios.items():
            # Simular an√°lise r√°pida para cada cen√°rio
            resultado += f"**üåç Universo {nome}:**\n"
            resultado += f"{descricao}\n"
            resultado += f"_[An√°lise detalhada dispon√≠vel sob demanda]_\n\n"
        
        self.stats["cenarios_alternativos_gerados"] += len(cenarios)
        return resultado
    
    def obter_diario_assembleias(self, ultimas: int = 5) -> str:
        """üìö Retorna di√°rio das √∫ltimas assembleias"""
        if not self.diario_assembleias:
            return "üìö Di√°rio vazio - nenhuma assembleia realizada."
        
        assembleias_recentes = self.diario_assembleias[-ultimas:]
        
        diario = f"üìö **DI√ÅRIO DE ASSEMBLEIAS - √öLTIMAS {len(assembleias_recentes)}**\n\n"
        
        for assembleia in reversed(assembleias_recentes):
            diario += f"**{assembleia.id.upper()}** - {assembleia.timestamp.strftime('%d/%m %H:%M')}\n"
            diario += f"Desafio: {assembleia.desafio[:100]}...\n"
            diario += f"Colegiado: {', '.join(s.value for s in assembleia.colegiado)}\n"
            diario += f"Consenso: {assembleia.score_consenso:.2f} | Robustez: {assembleia.score_robustez:.2f}\n"
            if assembleia.aprendizados:
                diario += f"Aprendizado: {assembleia.aprendizados[0]}\n"
            diario += "---\n\n"
        
        return diario
    
    def diagnosticar_oraculo(self) -> Dict:
        """üîß Diagn√≥stico completo do Or√°culo v8.1 Plus+"""
        # Status dos subor√°culos
        status_suboraculos = {}
        for tipo, perf in self.performance_suboraculos.items():
            status_suboraculos[tipo.value] = {
                "status": perf.status.value,
                "participacoes": perf.participacoes,
                "contribuicoes_valiosas": perf.contribuicoes_valiosas,
                "ultima_contribuicao": perf.ultima_contribuicao.isoformat() if perf.ultima_contribuicao else None
            }
        
        return {
            "version": "8.1_Plus_Assembleia_Dinamica",
            "status": "ATIVO",
            "assembleia_dinamica": self.curadoria_autonoma_ativa,
            "multiverso": self.multiverso_ativo,
            "autoextincao": self.autoextincao_ativa,
            "suboraculos_ativos": len([p for p in self.performance_suboraculos.values() 
                                     if p.status == StatusSuboraculo.ATIVO]),
            "assembleias_realizadas": self.stats["assembleias_realizadas"],
            "score_medio_consenso": self.stats["score_medio_consenso"],
            "score_medio_robustez": self.stats["score_medio_robustez"],
            "aprendizados_persistentes": len(self.aprendizados_persistentes),
            "status_suboraculos": status_suboraculos,
            "stats_completas": self.stats
        }

# === FUN√á√ïES DE CRIA√á√ÉO ===

def criar_oraculo_v8_plus(llm=None) -> OraculoV8Plus:
    """üß† Cria Or√°culo v8.1 Plus+ com configura√ß√µes completas"""
    return OraculoV8Plus(llm=llm)

# Alias para compatibilidade
create_oraculo = criar_oraculo_v8_plus

if __name__ == "__main__":
    print("üß† Testando Or√°culo v8.1 Plus+...")
    
    oraculo = criar_oraculo_v8_plus()
    diagnostico = oraculo.diagnosticar_oraculo()
    
    print(f"üìä Diagn√≥stico: {diagnostico['version']}")
    print(f"ü§ñ Subor√°culos ativos: {diagnostico['suboraculos_ativos']}")
    print("‚úÖ Or√°culo v8.1 Plus+ pronto para assembleias din√¢micas!")