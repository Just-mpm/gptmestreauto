"""
Reflexor v2.0 - Migrado para BaseAgentV2
Sistema de Auditoria Avan√ßado com Robustez Total
"""

import json
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

from agents.base_agent_v2 import BaseAgentV2

# Logger com fallback
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {self.name}: {msg}")
        def warning(self, msg): print(f"[WARNING] {self.name}: {msg}")
        def error(self, msg): print(f"[ERROR] {self.name}: {msg}")
        def debug(self, msg): print(f"[DEBUG] {self.name}: {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)

class ModoReflexor(Enum):
    """Modos de opera√ß√£o do Reflexor"""
    PONTUAL = "pontual"
    CONTINUO = "continuo"
    META_AUDITORIA = "meta_auditoria"
    TUTOR = "tutor"
    RED_FLAG = "red_flag"

@dataclass
class ReflexaoAnalise:
    """Estrutura de an√°lise do Reflexor"""
    score_qualidade: float  # 1-10
    pontos_positivos: List[str]
    pontos_melhorar: List[str] 
    sugestoes_melhoria: List[str]
    precisa_revisao: bool
    categoria_problema: Optional[str] = None
    red_flags_detectados: List[str] = None
    nota_confianca: float = 0.0
    timestamp: str = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()
        if self.red_flags_detectados is None:
            self.red_flags_detectados = []

class ReflexorV2(BaseAgentV2):
    """
    Reflexor v2.0 - Sistema de Auditoria Avan√ßado com BaseAgentV2
    
    Mant√©m todas as funcionalidades originais:
    - An√°lise de qualidade de respostas
    - Detec√ß√£o de red flags
    - Sugest√µes de melhoria
    - M√∫ltiplos modos de opera√ß√£o
    - Sistema de aprendizado cont√≠nuo
    - ‚úÖ Agora com robustez total do BaseAgentV2
    """
    
    def __init__(self, modo_inicial: ModoReflexor = ModoReflexor.PONTUAL, **kwargs):
        # Configura√ß√£o robusta para Reflexor
        config_robusta = {
            "rate_limit_per_minute": 40,  # Reflexor pode precisar de mais chamadas
            "burst_allowance": 8,
            "failure_threshold": 4,
            "recovery_timeout": 45,
            "cache_enabled": True,
            "cache_ttl_seconds": 300,  # 5 minutos
            "persistent_memory": True,
            "max_retry_attempts": 3
        }
        
        # Merge com config fornecida
        if 'config' in kwargs:
            config_robusta.update(kwargs['config'])
        kwargs['config'] = config_robusta
        
        super().__init__(
            name="Reflexor",
            description="Sistema de auditoria e melhoria cont√≠nua v2.0",
            **kwargs
        )
        
        # Configura√ß√µes do Reflexor
        self.modo_atual = modo_inicial
        self.threshold_red_flag = 3
        self.auto_aprendizado = True
        
        # Hist√≥rico de an√°lises
        self.historico_analises = []
        
        # Padr√µes identificados
        self.padroes_problemas = {}
        self.padroes_sucessos = {}
        
        # Red flags ativas
        self.red_flags_ativas = []
        
        logger.info(f"üîç Reflexor v2.0 (BaseAgentV2) inicializado - Modo: {self.modo_atual.value}")
    
    def _processar_interno(self, mensagem: str, contexto: Optional[Dict] = None) -> str:
        """
        Processamento interno - an√°lise de qualidade
        """
        # Extrair pergunta e resposta do contexto ou mensagem
        pergunta = contexto.get('pergunta', '') if contexto else ''
        resposta = contexto.get('resposta', mensagem) if contexto else mensagem
        
        if not pergunta and ':' in mensagem:
            # Tentar extrair pergunta e resposta da mensagem
            partes = mensagem.split(':', 1)
            if len(partes) == 2:
                pergunta = partes[0].strip()
                resposta = partes[1].strip()
        
        # Realizar an√°lise
        analise = self.analisar_resposta(pergunta, resposta, contexto)
        
        # Formatar resposta
        resposta_formatada = f"""üîç **An√°lise do Reflexor v2.0**

**Score de Qualidade:** {analise.score_qualidade:.1f}/10
**Confian√ßa na An√°lise:** {analise.nota_confianca:.1f}/10
**Precisa Revis√£o:** {'‚ö†Ô∏è SIM' if analise.precisa_revisao else '‚úÖ N√ÉO'}

**‚úÖ Pontos Positivos:**
{self._formatar_lista(analise.pontos_positivos)}

**üìã Pontos a Melhorar:**
{self._formatar_lista(analise.pontos_melhorar)}

**üí° Sugest√µes de Melhoria:**
{self._formatar_lista(analise.sugestoes_melhoria)}
"""
        
        if analise.categoria_problema:
            resposta_formatada += f"\n**üè∑Ô∏è Categoria do Problema:** {analise.categoria_problema}"
        
        if analise.red_flags_detectados:
            resposta_formatada += f"\n\n**üö® Red Flags Detectados:**\n{self._formatar_lista(analise.red_flags_detectados)}"
        
        # Se modo cont√≠nuo, adicionar sugest√£o de melhoria
        if self.modo_atual == ModoReflexor.CONTINUO and analise.precisa_revisao:
            melhoria = self.melhorar_resposta(pergunta, resposta)
            if melhoria:
                resposta_formatada += f"\n\n**üìù Vers√£o Melhorada Sugerida:**\n{melhoria}"
        
        return resposta_formatada
    
    def analisar_resposta(self, pergunta: str, resposta: str, contexto: Dict = None) -> ReflexaoAnalise:
        """
        Analisa uma resposta e gera feedback detalhado
        """
        logger.info("üîç Iniciando an√°lise de resposta...")
        
        try:
            if self.llm_available and self.llm:
                return self._analisar_com_llm(pergunta, resposta, contexto)
            else:
                return self._analisar_heuristica(pergunta, resposta, contexto)
                
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise: {str(e)}")
            return self._criar_analise_fallback(pergunta, resposta)
    
    def _analisar_com_llm(self, pergunta: str, resposta: str, contexto: Dict = None) -> ReflexaoAnalise:
        """An√°lise usando LLM"""
        prompt = self._criar_prompt_analise(pergunta, resposta, contexto)
        
        try:
            resposta_llm = self.llm.invoke(prompt)
            conteudo = resposta_llm.content if hasattr(resposta_llm, 'content') else str(resposta_llm)
            
            analise = self._processar_analise_llm(conteudo, pergunta, resposta)
            
            # Adicionar ao hist√≥rico
            self.historico_analises.append(analise)
            
            # Aprendizado cont√≠nuo
            if self.auto_aprendizado:
                self._aprender_com_analise(analise, pergunta, resposta)
            
            return analise
            
        except Exception as e:
            logger.error(f"Erro na an√°lise LLM: {e}")
            return self._analisar_heuristica(pergunta, resposta, contexto)
    
    def _analisar_heuristica(self, pergunta: str, resposta: str, contexto: Dict = None) -> ReflexaoAnalise:
        """An√°lise usando heur√≠sticas simples"""
        score = 6  # Score padr√£o
        pontos_positivos = ["Resposta fornecida"]
        pontos_melhorar = []
        sugestoes = []
        precisa_revisao = False
        categoria_problema = None
        red_flags = []
        
        # Heur√≠sticas b√°sicas
        if len(resposta) < 20:
            score -= 2
            pontos_melhorar.append("Resposta muito curta")
            sugestoes.append("Expandir com mais detalhes")
            categoria_problema = "completude"
            precisa_revisao = True
        
        if len(resposta) > 1000:
            score -= 1
            pontos_melhorar.append("Resposta muito longa")
            sugestoes.append("Ser mais conciso")
        
        if not any(char in resposta for char in '.,!?'):
            score -= 1
            pontos_melhorar.append("Falta de pontua√ß√£o")
            sugestoes.append("Melhorar estrutura da frase")
        
        if pergunta.lower() in resposta.lower():
            pontos_positivos.append("Resposta relacionada √† pergunta")
            score += 1
        
        # Verificar red flags
        if any(palavra in resposta.lower() for palavra in ['erro', 'falha', 'problema']):
            red_flags.append("Poss√≠vel indica√ß√£o de problema n√£o resolvido")
        
        if score < 5:
            precisa_revisao = True
        
        analise = ReflexaoAnalise(
            score_qualidade=max(1, min(10, score)),
            pontos_positivos=pontos_positivos,
            pontos_melhorar=pontos_melhorar,
            sugestoes_melhoria=sugestoes,
            precisa_revisao=precisa_revisao,
            categoria_problema=categoria_problema,
            red_flags_detectados=red_flags,
            nota_confianca=float(score),
            timestamp=datetime.now().isoformat()
        )
        
        # Adicionar ao hist√≥rico
        self.historico_analises.append(analise)
        
        return analise
    
    def _criar_prompt_analise(self, pergunta: str, resposta: str, contexto: Dict = None) -> str:
        """Cria prompt para an√°lise cr√≠tica"""
        return f"""Voc√™ √© o Reflexor, um auditor inteligente especializado em an√°lise cr√≠tica.

TAREFA: Analise a resposta abaixo e forne√ßa feedback estruturado.

PERGUNTA: {pergunta}

RESPOSTA: {resposta}

CRIT√âRIOS: Relev√¢ncia, Completude, Clareza, Precis√£o, Utilidade, Estrutura, Tom

FORMATO (JSON):
{{
    "score_qualidade": 8,
    "pontos_positivos": ["aspecto1", "aspecto2"],
    "pontos_melhorar": ["problema1", "problema2"],
    "sugestoes_melhoria": ["sugestao1", "sugestao2"],
    "precisa_revisao": false,
    "categoria_problema": null,
    "red_flags_detectados": [],
    "justificativa": "explica√ß√£o do score"
}}

Seja cr√≠tico mas construtivo. Score 1-10."""
    
    def _processar_analise_llm(self, resposta_llm: str, pergunta: str, resposta: str) -> ReflexaoAnalise:
        """Processa resposta do LLM"""
        try:
            # Extrair JSON
            inicio = resposta_llm.find('{')
            fim = resposta_llm.rfind('}') + 1
            
            if inicio != -1 and fim > inicio:
                json_str = resposta_llm[inicio:fim]
                dados = json.loads(json_str)
                
                return ReflexaoAnalise(
                    score_qualidade=float(dados.get("score_qualidade", 5)),
                    pontos_positivos=dados.get("pontos_positivos", []),
                    pontos_melhorar=dados.get("pontos_melhorar", []),
                    sugestoes_melhoria=dados.get("sugestoes_melhoria", []),
                    precisa_revisao=dados.get("precisa_revisao", False),
                    categoria_problema=dados.get("categoria_problema"),
                    red_flags_detectados=dados.get("red_flags_detectados", []),
                    nota_confianca=float(dados.get("score_qualidade", 5)),
                    timestamp=datetime.now().isoformat()
                )
            else:
                return self._analisar_heuristica(pergunta, resposta)
                
        except (json.JSONDecodeError, ValueError, KeyError) as e:
            logger.warning(f"Erro ao processar JSON do LLM: {e}")
            return self._analisar_heuristica(pergunta, resposta)
    
    def _criar_analise_fallback(self, pergunta: str, resposta: str) -> ReflexaoAnalise:
        """Cria an√°lise de fallback em caso de erro"""
        return ReflexaoAnalise(
            score_qualidade=5.0,
            pontos_positivos=["Resposta fornecida"],
            pontos_melhorar=["Erro na an√°lise autom√°tica"],
            sugestoes_melhoria=["Revisar sistema de an√°lise"],
            precisa_revisao=True,
            categoria_problema="sistema",
            nota_confianca=3.0,
            timestamp=datetime.now().isoformat()
        )
    
    def melhorar_resposta(self, pergunta: str, resposta_original: str) -> Optional[str]:
        """Tenta melhorar resposta com base na an√°lise"""
        if not self.llm_available or not self.llm:
            return None
            
        try:
            prompt = f"""Melhore a resposta abaixo:

PERGUNTA: {pergunta}
RESPOSTA ORIGINAL: {resposta_original}

TAREFA: Reescreva de forma mais clara, completa e √∫til.

RESPOSTA MELHORADA:"""
            
            resposta_llm = self.llm.invoke(prompt)
            return resposta_llm.content if hasattr(resposta_llm, 'content') else str(resposta_llm)
            
        except Exception as e:
            logger.error(f"Erro ao melhorar resposta: {e}")
            return None
    
    def _formatar_lista(self, items: List[str]) -> str:
        """Formata lista para exibi√ß√£o"""
        if not items:
            return "- Nenhum item"
        return '\n'.join(f"- {item}" for item in items)
    
    def _aprender_com_analise(self, analise: ReflexaoAnalise, pergunta: str, resposta: str):
        """Sistema de aprendizado cont√≠nuo"""
        # Identificar padr√µes de problemas
        if analise.categoria_problema:
            if analise.categoria_problema not in self.padroes_problemas:
                self.padroes_problemas[analise.categoria_problema] = []
            self.padroes_problemas[analise.categoria_problema].append({
                'score': analise.score_qualidade,
                'timestamp': analise.timestamp
            })
        
        # Identificar padr√µes de sucesso
        if analise.score_qualidade >= 8:
            chave_sucesso = f"score_{int(analise.score_qualidade)}"
            if chave_sucesso not in self.padroes_sucessos:
                self.padroes_sucessos[chave_sucesso] = []
            self.padroes_sucessos[chave_sucesso].append({
                'pontos_positivos': analise.pontos_positivos,
                'timestamp': analise.timestamp
            })
    
    def obter_relatorio_qualidade(self) -> Dict:
        """Gera relat√≥rio de qualidade avan√ßado"""
        if not self.historico_analises:
            return {
                "status": "Nenhuma an√°lise realizada",
                "total_analises": 0
            }
        
        scores = [a.score_qualidade for a in self.historico_analises]
        score_medio = sum(scores) / len(scores)
        
        revisoes = sum(1 for a in self.historico_analises if a.precisa_revisao)
        taxa_revisao = (revisoes / len(self.historico_analises)) * 100
        
        # An√°lise de red flags
        total_red_flags = sum(len(a.red_flags_detectados) for a in self.historico_analises)
        
        return {
            "resumo": {
                "total_analises": len(self.historico_analises),
                "score_medio": round(score_medio, 2),
                "taxa_revisao": round(taxa_revisao, 2),
                "total_red_flags": total_red_flags
            },
            "qualidade": {
                "excelente": sum(1 for s in scores if s >= 9),
                "boa": sum(1 for s in scores if 7 <= s < 9), 
                "regular": sum(1 for s in scores if 5 <= s < 7),
                "ruim": sum(1 for s in scores if s < 5)
            },
            "padroes": {
                "problemas_frequentes": list(self.padroes_problemas.keys()),
                "categorias_sucesso": list(self.padroes_sucessos.keys())
            },
            "recomendacoes": self._gerar_recomendacoes(score_medio, taxa_revisao, total_red_flags),
            "health_status": self.get_health_status()  # Incluir status do BaseAgentV2
        }
    
    def _gerar_recomendacoes(self, score_medio: float, taxa_revisao: float, total_red_flags: int) -> List[str]:
        """Gera recomenda√ß√µes baseadas nas m√©tricas"""
        recomendacoes = []
        
        if score_medio < 6:
            recomendacoes.append("Score m√©dio baixo - Revisar qualidade das respostas")
        
        if taxa_revisao > 50:
            recomendacoes.append("Alta taxa de revis√£o - Otimizar respostas iniciais")
        
        if total_red_flags > len(self.historico_analises) * 0.3:
            recomendacoes.append("Muitos red flags - Investigar problemas recorrentes")
        
        if score_medio >= 8 and taxa_revisao < 30:
            recomendacoes.append("Sistema funcionando bem - Manter padr√£o")
        
        return recomendacoes
    
    def definir_modo(self, novo_modo: ModoReflexor):
        """Define novo modo de opera√ß√£o"""
        self.modo_atual = novo_modo
        logger.info(f"üîÑ Reflexor mudou para modo: {novo_modo.value}")
    
    def verificar_red_flags(self, limite: int = 3) -> List[str]:
        """Verifica red flags acumulados"""
        red_flags_recentes = []
        
        for analise in self.historico_analises[-10:]:  # √öltimas 10 an√°lises
            red_flags_recentes.extend(analise.red_flags_detectados)
        
        # Contar frequ√™ncia
        frequencia = {}
        for flag in red_flags_recentes:
            frequencia[flag] = frequencia.get(flag, 0) + 1
        
        # Retornar flags que aparecem mais que o limite
        return [flag for flag, count in frequencia.items() if count >= limite]


# Fun√ß√µes de cria√ß√£o
def criar_reflexor_v2(**kwargs) -> ReflexorV2:
    """Cria inst√¢ncia do Reflexor v2.0 com BaseAgentV2"""
    return ReflexorV2(**kwargs)

def criar_reflexor_gpt_mestre_v2(**kwargs) -> ReflexorV2:
    """Alias para compatibilidade"""
    return ReflexorV2(**kwargs)

# Aliases adicionais
create_reflexor_v2 = criar_reflexor_v2
create_reflexor = criar_reflexor_v2