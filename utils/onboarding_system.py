"""
Sistema de Onboarding de 3 Passos - ETAPA 5
Implementa introdu√ß√£o amig√°vel e envolvente para novos usu√°rios
Seguindo especifica√ß√µes Gemini AI para reduzir intera√ß√µes redundantes
"""

import json
import os
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

# Logger
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {msg}")
        def warning(self, msg): print(f"[WARNING] {msg}")
        def error(self, msg): print(f"[ERROR] {msg}")
        def debug(self, msg): print(f"[DEBUG] {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)


@dataclass
class OnboardingStep:
    """Passo do onboarding"""
    step_number: int
    title: str
    message: str
    feedback_visual: str
    expected_responses: List[str]
    next_step_trigger: List[str]
    help_text: Optional[str] = None


class OnboardingManager:
    """
    Gerenciador de Onboarding para Novos Usu√°rios
    Implementa fluxo de 3 passos seguindo especifica√ß√µes Gemini
    """
    
    def __init__(self, data_dir: str = "data/onboarding"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(parents=True, exist_ok=True)
        
        # Estado do onboarding
        self.current_step = 0
        self.is_active = False
        self.user_responses = []
        self.completed_users = set()
        
        # Definir os 3 passos (Gemini specs)
        self.onboarding_steps = self._create_onboarding_steps()
        
        # Carregar usu√°rios que j√° completaram
        self._load_completed_users()
        
        logger.info("üëã OnboardingManager inicializado com 3 passos Gemini")
    
    def _create_onboarding_steps(self) -> List[OnboardingStep]:
        """Cria os 3 passos do onboarding conforme especifica√ß√µes Gemini"""
        
        return [
            # Passo 1: Bem-Vindo ao GPTMA! (Apresenta√ß√£o do Carlos)
            OnboardingStep(
                step_number=1,
                title="Bem-Vindo ao GPT Mestre Aut√¥nomo!",
                message="""üëã **Ol√°! Eu sou Carlos, o maestro do GPT Mestre Aut√¥nomo.**

üéØ **Minha miss√£o** √© te ajudar a desvendar o potencial da IA. Estou aqui para te guiar e coordenar nossa equipe de agentes especializados.

üöÄ **Juntos, podemos**:
‚Ä¢ Analisar mercados e produtos
‚Ä¢ Criar conte√∫do e estrat√©gias  
‚Ä¢ Tomar decis√µes complexas
‚Ä¢ Oferecer suporte personalizado
‚Ä¢ E muito mais!

‚ú® **Pronto para come√ßar essa jornada?**

üëá *Digite "Sim" para continuar ou "Me fale mais" para saber detalhes*""",
                feedback_visual="üëã",
                expected_responses=["sim", "s", "yes", "vamos", "pronto", "ok"],
                next_step_trigger=["sim", "s", "yes", "vamos", "pronto", "ok", "me fale mais", "mais detalhes", "explique"],
                help_text="üí° Dica: Voc√™ pode responder 'Sim' para come√ßar ou 'Me fale mais' para detalhes"
            ),
            
            # Passo 2: O Que Voc√™ Pode Fazer? (Exemplos e Capacidades) 
            OnboardingStep(
                step_number=2,
                title="O Que Voc√™ Pode Fazer?",
                message="""üí° **√ìtimo! Voc√™ pode me pedir para**:

üîç **An√°lise e Pesquisa**:
‚Ä¢ *"Analise meu produto X"* ‚Üí Chamo o DeepAgent e ScoutAI para pesquisa completa
‚Ä¢ *"Pesquise sobre o mercado Y"* ‚Üí Busca detalhada com dados atualizados

üé® **Cria√ß√£o de Conte√∫do**:
‚Ä¢ *"Crie um prompt de vendas"* ‚Üí PromptCrafter entra em a√ß√£o!
‚Ä¢ *"Gere uma estrat√©gia de marketing"* ‚Üí AutoMaster desenvolve plano completo

üí≠ **Suporte Pessoal**:
‚Ä¢ *"Me ajude com um problema pessoal"* ‚Üí PsyMind est√° pronto para apoiar
‚Ä¢ *"Preciso tomar uma decis√£o dif√≠cil"* ‚Üí Or√°culo oferece an√°lise profunda

‚öôÔ∏è **Comandos Pr√°ticos**:
‚Ä¢ *"Carlos, qual o status?"* ‚Üí Vejo como estou funcionando
‚Ä¢ *"Carlos, quem est√° por a√≠?"* ‚Üí Lista todos os agentes dispon√≠veis

üéØ **Para uma vis√£o geral completa, diga**: *"Carlos, quem est√° por a√≠?"*

üí¨ *Agora, que tal tentar um comando? Digite algo que gostaria de fazer!*""",
                feedback_visual="üí°",
                expected_responses=["entendi", "ok", "vamos testar", "quero tentar", "carlos, quem est√° por a√≠?"],
                next_step_trigger=["entendi", "ok", "vamos", "tentar", "teste", "comando", "carlos"],
                help_text="üí° Dica: Tente algum comando como 'Carlos, quem est√° por a√≠?' ou me pe√ßa algo espec√≠fico"
            ),
            
            # Passo 3: Dicas R√°pidas e Ajuda (Otimiza√ß√£o da Intera√ß√£o)
            OnboardingStep(
                step_number=3,
                title="Dicas Finais para Otimizar sua Experi√™ncia",
                message="""üìö **Lembre-se dessas dicas importantes**:

üéØ **Para melhores resultados**:
‚Ä¢ **Seja claro e espec√≠fico** ‚Üí Quanto mais claro voc√™ for, melhor e mais r√°pido eu te ajudarei
‚Ä¢ **Use comandos naturais** ‚Üí Fale comigo como falaria com um assistente humano
‚Ä¢ **Aproveite a economia** ‚Üí Comandos como "status" e "ajuda" n√£o gastam sua cota!

üÜò **Se precisar de ajuda**:
‚Ä¢ Diga *"Carlos, me ajuda!"* ‚Üí Orienta√ß√£o r√°pida sobre qualquer t√≥pico
‚Ä¢ Diga *"Carlos, me ajuda com comandos"* ‚Üí Lista completa de comandos especiais

üìä **Monitoramento inteligente**:
‚Ä¢ *"Carlos, quanto gastei hoje?"* ‚Üí Vejo seu uso de cota em tempo real
‚Ä¢ *"Carlos, seja mais conciso"* ‚Üí Ajusto meu estilo para economizar

üåü **Estou sempre aprendendo!** Seu feedback √© muito valioso para minha evolu√ß√£o.

üöÄ **Agora me diga: como posso te ajudar hoje?**

*Digite sua primeira pergunta ou tarefa real para come√ßarmos!*""",
                feedback_visual="üöÄ",
                expected_responses=["entendi", "perfeito", "vamos come√ßar", "preciso de", "me ajude", "analise", "crie"],
                next_step_trigger=["qualquer_resposta"],  # Qualquer resposta finaliza
                help_text="üí° Agora voc√™ est√° pronto! Fa√ßa sua primeira pergunta ou tarefa real."
            )
        ]
    
    def should_start_onboarding(self, user_id: str = "default") -> bool:
        """Verifica se deve iniciar onboarding para usu√°rio"""
        if user_id in self.completed_users:
            return False
        
        # Verificar se √© primeira execu√ß√£o ou comando expl√≠cito
        return not self._has_user_data(user_id)
    
    def start_onboarding(self, user_id: str = "default") -> str:
        """Inicia processo de onboarding"""
        if user_id in self.completed_users:
            return self._get_returning_user_message()
        
        self.is_active = True
        self.current_step = 1
        self.user_responses = []
        
        logger.info(f"üëã Iniciando onboarding para usu√°rio {user_id}")
        
        return self._get_current_step_message()
    
    def process_onboarding_response(self, user_response: str, user_id: str = "default") -> Tuple[str, bool]:
        """
        Processa resposta do usu√°rio no onboarding
        Retorna (mensagem_resposta, onboarding_completo)
        """
        if not self.is_active:
            return "", False
        
        user_response = user_response.lower().strip()
        self.user_responses.append(user_response)
        
        current_step_data = self.onboarding_steps[self.current_step - 1]
        
        # Verificar se resposta pode avan√ßar para pr√≥ximo passo
        should_advance = self._should_advance_step(user_response, current_step_data)
        
        if should_advance:
            if self.current_step >= len(self.onboarding_steps):
                # Onboarding completo
                self.is_active = False
                self.completed_users.add(user_id)
                self._save_completion(user_id)
                
                completion_message = self._get_completion_message()
                logger.info(f"‚úÖ Onboarding completo para usu√°rio {user_id}")
                
                return completion_message, True
            else:
                # Avan√ßar para pr√≥ximo passo
                self.current_step += 1
                return self._get_current_step_message(), False
        else:
            # Dar uma resposta de encorajamento ou reorienta√ß√£o
            return self._get_encouragement_message(current_step_data), False
    
    def force_complete_onboarding(self, user_id: str = "default"):
        """For√ßa conclus√£o do onboarding (para usu√°rios experientes)"""
        self.is_active = False
        self.completed_users.add(user_id)
        self._save_completion(user_id)
        logger.info(f"‚è≠Ô∏è Onboarding pulado para usu√°rio {user_id}")
    
    def reset_onboarding(self, user_id: str = "default"):
        """Reseta onboarding para usu√°rio"""
        self.completed_users.discard(user_id)
        self.is_active = False
        self.current_step = 0
        self.user_responses = []
        
        # Remover arquivo de completion
        completion_file = self.data_dir / f"completed_{user_id}.json"
        if completion_file.exists():
            completion_file.unlink()
        
        logger.info(f"üîÑ Onboarding resetado para usu√°rio {user_id}")
    
    def _get_current_step_message(self) -> str:
        """Retorna mensagem do passo atual"""
        if self.current_step > len(self.onboarding_steps):
            return ""
        
        step_data = self.onboarding_steps[self.current_step - 1]
        
        # Formatar mensagem com visual
        message = f"""{step_data.feedback_visual} **Passo {step_data.step_number}/3: {step_data.title}**

{step_data.message}"""
        
        return message
    
    def _should_advance_step(self, user_response: str, step_data: OnboardingStep) -> bool:
        """Verifica se deve avan√ßar para pr√≥ximo passo"""
        
        # Passo 3: qualquer resposta finaliza
        if step_data.step_number == 3:
            return True
        
        # Verificar triggers espec√≠ficos
        for trigger in step_data.next_step_trigger:
            if trigger == "qualquer_resposta":
                return True
            if trigger in user_response:
                return True
        
        # Verificar respostas esperadas
        for expected in step_data.expected_responses:
            if expected in user_response:
                return True
        
        return False
    
    def _get_encouragement_message(self, step_data: OnboardingStep) -> str:
        """Retorna mensagem de encorajamento quando resposta n√£o avan√ßa"""
        
        encouragements = {
            1: [
                "üòä Sem pressa! Voc√™ pode responder 'Sim' para come√ßar ou 'Me fale mais' se quiser detalhes.",
                "ü§î Que tal responder 'Sim' para continuarmos? Ou diga 'Me fale mais' se tiver d√∫vidas!",
                "üí≠ Estou aguardando! Digite 'Sim' para prosseguir ou 'Me fale mais' para saber mais."
            ],
            2: [
                "üéØ Que tal tentar um comando? Digite algo como 'Carlos, quem est√° por a√≠?' ou me pe√ßa algo que gostaria de fazer!",
                "üí° Experimente! Voc√™ pode dizer 'Carlos, status' ou fazer uma pergunta sobre algo que te interessa.",
                "üöÄ Vamos praticar! Tente algum comando natural ou me pe√ßa para fazer algo espec√≠fico."
            ],
            3: [
                "üåü Perfeito! Agora √© s√≥ me fazer sua primeira pergunta real. O que gostaria de saber ou fazer?",
                "‚ú® Voc√™ est√° pronto! Me diga: como posso te ajudar hoje?",
                "üéä √ìtimo! Agora me fa√ßa qualquer pergunta ou pe√ßa qualquer tarefa."
            ]
        }
        
        import random
        step_encouragements = encouragements.get(step_data.step_number, ["üòä Continue seguindo as instru√ß√µes!"])
        message = random.choice(step_encouragements)
        
        if step_data.help_text:
            message += f"\n\n{step_data.help_text}"
        
        return message
    
    def _get_completion_message(self) -> str:
        """Mensagem de conclus√£o do onboarding"""
        return """üéâ **Parab√©ns! Onboarding Completo!**

‚úÖ **Voc√™ agora conhece**:
‚Ä¢ Como falar comigo naturalmente
‚Ä¢ Quais agentes est√£o dispon√≠veis  
‚Ä¢ Como otimizar sua experi√™ncia
‚Ä¢ Comandos que economizam cota

üöÄ **Estou pronto para ser seu assistente de IA!**

üéØ **Vamos come√ßar de verdade? Me diga como posso te ajudar hoje!**

*A partir de agora, todas as suas intera√ß√µes ser√£o processadas normalmente pelos agentes especializados.*"""
    
    def _get_returning_user_message(self) -> str:
        """Mensagem para usu√°rio que j√° completou onboarding"""
        return """üëã **Oi! Que bom te ver novamente!**

‚úÖ Voc√™ j√° conhece o sistema, ent√£o vamos direto ao que interessa.

üöÄ **Como posso te ajudar hoje?**

üí° *Dica: Se quiser revisar os comandos, diga "Carlos, me ajuda com comandos"*"""
    
    def _has_user_data(self, user_id: str) -> bool:
        """Verifica se usu√°rio j√° tem dados salvos"""
        completion_file = self.data_dir / f"completed_{user_id}.json"
        return completion_file.exists()
    
    def _save_completion(self, user_id: str):
        """Salva conclus√£o do onboarding"""
        try:
            completion_data = {
                "user_id": user_id,
                "completed_at": datetime.now().isoformat(),
                "steps_completed": len(self.onboarding_steps),
                "responses": self.user_responses
            }
            
            completion_file = self.data_dir / f"completed_{user_id}.json"
            with open(completion_file, "w") as f:
                json.dump(completion_data, f, indent=2)
                
        except Exception as e:
            logger.error(f"Erro ao salvar completion do onboarding: {e}")
    
    def _load_completed_users(self):
        """Carrega lista de usu√°rios que completaram onboarding"""
        try:
            for file_path in self.data_dir.glob("completed_*.json"):
                try:
                    with open(file_path, "r") as f:
                        data = json.load(f)
                        self.completed_users.add(data["user_id"])
                except Exception as e:
                    logger.warning(f"Erro ao carregar {file_path}: {e}")
                    
        except Exception as e:
            logger.debug(f"Erro ao carregar usu√°rios completados: {e}")
    
    def get_onboarding_stats(self) -> Dict:
        """Retorna estat√≠sticas do onboarding"""
        return {
            "total_steps": len(self.onboarding_steps),
            "current_step": self.current_step,
            "is_active": self.is_active,
            "completed_users": len(self.completed_users),
            "responses_this_session": len(self.user_responses)
        }


# Singleton global
_onboarding_manager_instance = None


def get_onboarding_manager() -> OnboardingManager:
    """Retorna inst√¢ncia singleton do OnboardingManager"""
    global _onboarding_manager_instance
    
    if _onboarding_manager_instance is None:
        _onboarding_manager_instance = OnboardingManager()
    
    return _onboarding_manager_instance


# Fun√ß√£o helper para integra√ß√£o f√°cil
def check_and_start_onboarding(user_id: str = "default") -> Optional[str]:
    """
    Verifica se deve iniciar onboarding e retorna mensagem inicial
    Retorna None se n√£o precisa de onboarding
    """
    manager = get_onboarding_manager()
    
    if manager.should_start_onboarding(user_id):
        return manager.start_onboarding(user_id)
    
    return None


def process_message_with_onboarding(message: str, user_id: str = "default") -> Tuple[Optional[str], bool]:
    """
    Processa mensagem considerando onboarding ativo
    Retorna (resposta_onboarding, deve_processar_normalmente)
    """
    manager = get_onboarding_manager()
    
    if manager.is_active:
        response, completed = manager.process_onboarding_response(message, user_id)
        return response, completed  # Se completed=True, pode processar normalmente depois
    
    # Verificar se √© comando para iniciar onboarding
    if any(keyword in message.lower() for keyword in ["me ajude a come√ßar", "como usar", "tutorial", "onboarding"]):
        return manager.start_onboarding(user_id), False
    
    return None, True  # N√£o est√° em onboarding, processar normalmente


# Teste do sistema
if __name__ == "__main__":
    print("üß™ TESTE DO SISTEMA DE ONBOARDING")
    print("=" * 60)
    
    manager = get_onboarding_manager()
    test_user = "test_user"
    
    # Reset para teste
    manager.reset_onboarding(test_user)
    
    print("1. üëã Iniciando onboarding...")
    initial_message = manager.start_onboarding(test_user)
    print(f"\n{initial_message}\n")
    
    # Simular respostas do usu√°rio
    test_responses = [
        "sim",  # Passo 1 -> 2
        "vamos testar",  # Passo 2 -> 3  
        "entendi, me ajude com an√°lise de mercado"  # Passo 3 -> Completo
    ]
    
    for i, response in enumerate(test_responses, 1):
        print(f"üë§ Usu√°rio responde: '{response}'")
        
        reply, completed = manager.process_onboarding_response(response, test_user)
        print(f"\nü§ñ Carlos: {reply}\n")
        
        if completed:
            print("‚úÖ ONBOARDING CONCLU√çDO!")
            break
        else:
            print(f"‚û°Ô∏è Avan√ßando para pr√≥ximo passo...")
    
    # Teste com usu√°rio que j√° completou
    print("\n2. üîÑ Testando usu√°rio que j√° completou...")
    returning_message = manager.start_onboarding(test_user)
    print(f"\n{returning_message}\n")
    
    # Teste de helpers
    print("3. üîß Testando fun√ß√µes helper...")
    
    new_user = "new_user"
    onboarding_check = check_and_start_onboarding(new_user)
    if onboarding_check:
        print(f"‚úÖ Onboarding necess√°rio para {new_user}")
        print(f"üìù Mensagem: {onboarding_check[:100]}...")
    
    # Estad√≠sticas
    stats = manager.get_onboarding_stats()
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   Total de passos: {stats['total_steps']}")
    print(f"   Usu√°rios completos: {stats['completed_users']}")
    print(f"   Onboarding ativo: {stats['is_active']}")
    
    print(f"\n‚úÖ TESTE CONCLU√çDO - Sistema de onboarding funcionando!")