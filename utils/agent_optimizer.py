"""
Sistema de Otimiza√ß√£o de Agentes - ETAPA 4
Matriz de Decis√£o, Heur√≠sticas de Complexidade e Wake Up Strategy
Implementa√ß√£o seguindo especifica√ß√µes Gemini AI
"""

import re
import time
from typing import Dict, List, Tuple, Set, Optional, Any
from enum import Enum
from dataclasses import dataclass
from datetime import datetime, timedelta
import threading
import json
from pathlib import Path

# Logger
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {msg}")
        def warning(self, msg): print(f"[WARNING] {msg}")
        def error(self, msg): print(f"[ERROR] {msg}")
        def debug(self, msg): print(f"[DEBUG] {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)


class ComplexityLevel(Enum):
    """N√≠veis de complexidade de mensagens"""
    TRIVIAL = "trivial"          # Respostas pr√©-definidas, sem LLM
    SIMPLE = "simple"            # Carlos apenas, prompt b√°sico  
    MODERATE = "moderate"        # Carlos + 1-2 agentes espec√≠ficos
    COMPLEX = "complex"          # Multiple agentes, coordena√ß√£o
    CRITICAL = "critical"        # Or√°culo + assembleia completa


class TaskType(Enum):
    """Tipos de tarefas identificadas"""
    GREETING = "greeting"                    # Sauda√ß√µes b√°sicas
    SYSTEM_COMMAND = "system_command"        # Comandos /status, /help
    FACTUAL_QUERY = "factual_query"         # Perguntas de fato
    RESEARCH = "research"                    # Pesquisa e an√°lise
    CONTENT_CREATION = "content_creation"    # Cria√ß√£o de conte√∫do
    STRATEGY_PLANNING = "strategy_planning"  # Planejamento estrat√©gico
    EMOTIONAL_SUPPORT = "emotional_support" # Suporte psicol√≥gico
    DECISION_MAKING = "decision_making"      # Decis√µes cr√≠ticas
    SYSTEM_OPTIMIZATION = "system_optimization" # Otimiza√ß√£o interna
    CREATIVE_EXPLORATION = "creative_exploration" # Inova√ß√£o/explora√ß√£o


@dataclass
class AgentActivationPlan:
    """Plano de ativa√ß√£o de agentes para uma tarefa"""
    primary_agents: List[str]      # Agentes principais
    secondary_agents: List[str]    # Agentes de apoio
    validation_agents: List[str]   # Agentes de valida√ß√£o
    wake_up_order: List[str]       # Ordem de ativa√ß√£o
    max_timeout: int               # Timeout m√°ximo em segundos
    expected_tokens: int           # Tokens estimados
    bypass_llm: bool = False       # Se pode pular chamada LLM


@dataclass
class MessageAnalysis:
    """Resultado da an√°lise de uma mensagem"""
    complexity: ComplexityLevel
    task_type: TaskType
    keywords: List[str]
    question_count: int
    word_count: int
    emotional_indicators: List[str]
    activation_plan: AgentActivationPlan
    confidence: float              # Confian√ßa na classifica√ß√£o (0-1)


class AgentOptimizer:
    """
    Sistema Central de Otimiza√ß√£o de Agentes
    Implementa Matriz de Decis√£o e Heur√≠sticas do Gemini
    """
    
    def __init__(self):
        self.lock = threading.Lock()
        
        # Palavras-chave para detec√ß√£o de complexidade (Gemini specs)
        self.complexity_keywords = {
            ComplexityLevel.CRITICAL: {
                "analise profunda", "estrat√©gia completa", "plano de neg√≥cios", 
                "viabilidade", "cen√°rios", "otimizar sistema", "meta-an√°lise", 
                "dilema", "cr√≠tico", "inova√ß√£o", "transforma√ß√£o", "arquitetura",
                "decis√£o cr√≠tica", "investir", "melhor op√ß√£o", "complexo"
            },
            ComplexityLevel.COMPLEX: {
                "explicar detalhadamente", "comparar", "sugerir op√ß√µes", 
                "pesquisar", "melhorar", "criar", "planejar", "analisar",
                "estrat√©gia", "mercado", "produto", "planejamento"
            },
            ComplexityLevel.MODERATE: {
                "o que √©", "me explique", "resumo", "lista", "exemplo", 
                "como fazer", "definir", "mostrar", "ensinar"
            },
            ComplexityLevel.SIMPLE: {
                "oi", "ol√°", "tudo bem", "como vai", "bom dia", "boa tarde",
                "obrigado", "tchau", "at√© logo"
            }
        }
        
        # Indicadores emocionais (Gemini specs)
        self.emotional_indicators = {
            "me sinto", "estou", "ansiedade", "problema pessoal", 
            "preciso de ajuda emocional", "triste", "feliz", "preocupado",
            "estressado", "confuso", "perdido", "desesperado"
        }
        
        # Comandos do sistema
        self.system_commands = {
            "/status", "/help", "/agents", "/reset", "/resumo", "/alertas",
            "/agentes", "/cache", "/config", "/debug"
        }
        
        # Matriz de Decis√£o [Tipo de Pergunta] x [Agentes Necess√°rios]
        self.decision_matrix = self._build_decision_matrix()
        
        # Estat√≠sticas de otimiza√ß√£o
        self.stats = {
            "total_analyses": 0,
            "llm_bypassed": 0,
            "tokens_saved": 0,
            "avg_agents_activated": 0,
            "cache_hits": 0
        }
        
        logger.info("üöÄ AgentOptimizer inicializado com Matriz de Decis√£o Gemini")
    
    def _build_decision_matrix(self) -> Dict[TaskType, AgentActivationPlan]:
        """
        Constr√≥i a Matriz de Decis√£o seguindo especifica√ß√µes Gemini
        [Tipo de Pergunta] x [Agentes Necess√°rios]
        """
        matrix = {
            # B√°sico/Sauda√ß√£o - Consumo ZERO de cota
            TaskType.GREETING: AgentActivationPlan(
                primary_agents=["carlos"],
                secondary_agents=[],
                validation_agents=[],
                wake_up_order=["carlos"],
                max_timeout=5,
                expected_tokens=0,
                bypass_llm=True
            ),
            
            # Comandos do Sistema - Consumo ZERO de cota  
            TaskType.SYSTEM_COMMAND: AgentActivationPlan(
                primary_agents=["carlos"],
                secondary_agents=[],
                validation_agents=[],
                wake_up_order=["carlos"],
                max_timeout=10,
                expected_tokens=0,
                bypass_llm=True
            ),
            
            # Informa√ß√£o Simples/Fato - Cache primeiro, LLM m√≠nimo
            TaskType.FACTUAL_QUERY: AgentActivationPlan(
                primary_agents=["carlos"],
                secondary_agents=["deepagent"],
                validation_agents=[],
                wake_up_order=["carlos", "deepagent"],
                max_timeout=15,
                expected_tokens=100,
                bypass_llm=False
            ),
            
            # An√°lise de Produto/Mercado - Fluxo coordenado
            TaskType.RESEARCH: AgentActivationPlan(
                primary_agents=["supervisor", "deepagent", "scout"],
                secondary_agents=["reflexor"],
                validation_agents=["reflexor"],
                wake_up_order=["supervisor", "deepagent", "scout", "reflexor"],
                max_timeout=45,
                expected_tokens=800,
                bypass_llm=False
            ),
            
            # Cria√ß√£o/Otimiza√ß√£o de Conte√∫do
            TaskType.CONTENT_CREATION: AgentActivationPlan(
                primary_agents=["promptcrafter"],
                secondary_agents=["reflexor"],
                validation_agents=["reflexor"],
                wake_up_order=["promptcrafter", "reflexor"],
                max_timeout=30,
                expected_tokens=400,
                bypass_llm=False
            ),
            
            # Planejamento/Estrat√©gia
            TaskType.STRATEGY_PLANNING: AgentActivationPlan(
                primary_agents=["taskbreaker", "automaster"],
                secondary_agents=["oraculo", "reflexor"],
                validation_agents=["oraculo", "reflexor"],
                wake_up_order=["taskbreaker", "automaster", "oraculo", "reflexor"],
                max_timeout=60,
                expected_tokens=1200,
                bypass_llm=False
            ),
            
            # Suporte Emocional/Psicol√≥gico - Rota direta
            TaskType.EMOTIONAL_SUPPORT: AgentActivationPlan(
                primary_agents=["psymind"],
                secondary_agents=[],
                validation_agents=[],
                wake_up_order=["psymind"],
                max_timeout=25,
                expected_tokens=300,
                bypass_llm=False
            ),
            
            # Decis√£o Cr√≠tica/Dilema Complexo - Assembleia completa
            TaskType.DECISION_MAKING: AgentActivationPlan(
                primary_agents=["supervisor", "oraculo"],
                secondary_agents=["deepagent", "automaster"],
                validation_agents=["reflexor"],
                wake_up_order=["supervisor", "oraculo", "reflexor"],
                max_timeout=90,
                expected_tokens=1500,
                bypass_llm=False
            ),
            
            # Otimiza√ß√£o Interna
            TaskType.SYSTEM_OPTIMIZATION: AgentActivationPlan(
                primary_agents=["carlos"],
                secondary_agents=["reflexor"],
                validation_agents=["reflexor"],
                wake_up_order=["carlos", "reflexor"],
                max_timeout=30,
                expected_tokens=200,
                bypass_llm=False
            ),
            
            # Explora√ß√£o/Inova√ß√£o Aberta
            TaskType.CREATIVE_EXPLORATION: AgentActivationPlan(
                primary_agents=["raciocinio_continuo", "promptcrafter"],
                secondary_agents=["oraculo"],
                validation_agents=[],
                wake_up_order=["raciocinio_continuo", "promptcrafter", "oraculo"],
                max_timeout=60,
                expected_tokens=1000,
                bypass_llm=False
            )
        }
        
        return matrix
    
    def analyze_message(self, message: str, context: Dict = None) -> MessageAnalysis:
        """
        Analisa mensagem e determina estrat√©gia de ativa√ß√£o
        Implementa Heur√≠sticas de Complexidade do Gemini
        """
        with self.lock:
            self.stats["total_analyses"] += 1
            
            # Normalizar mensagem
            normalized = message.lower().strip()
            words = normalized.split()
            word_count = len(words)
            
            # 1. Detectar comandos do sistema (Gemini: consumo zero)
            if any(cmd in normalized for cmd in self.system_commands):
                return self._create_analysis(
                    complexity=ComplexityLevel.TRIVIAL,
                    task_type=TaskType.SYSTEM_COMMAND,
                    message=message,
                    word_count=word_count,
                    confidence=1.0
                )
            
            # 2. Detectar sauda√ß√µes b√°sicas (Gemini: consumo zero)
            if self._is_greeting(normalized):
                return self._create_analysis(
                    complexity=ComplexityLevel.TRIVIAL,
                    task_type=TaskType.GREETING,
                    message=message,
                    word_count=word_count,
                    confidence=1.0
                )
            
            # 3. Detectar contexto emocional (Gemini: rota direta PsyMind)
            emotional_indicators = self._detect_emotional_context(normalized)
            if emotional_indicators:
                return self._create_analysis(
                    complexity=ComplexityLevel.MODERATE,
                    task_type=TaskType.EMOTIONAL_SUPPORT,
                    message=message,
                    word_count=word_count,
                    emotional_indicators=emotional_indicators,
                    confidence=0.9
                )
            
            # 4. An√°lise por comprimento (Gemini specs)
            if word_count <= 5:
                # Muito curta - prov√°vel simples
                complexity = ComplexityLevel.SIMPLE
            elif word_count <= 15:
                # Curta - analisar palavras-chave
                complexity = self._analyze_keywords(normalized)
            elif word_count <= 50:
                # M√©dia - prov√°vel moderada a alta
                complexity = max(self._analyze_keywords(normalized), ComplexityLevel.MODERATE)
            else:
                # Longa - quase sempre complexa
                complexity = max(self._analyze_keywords(normalized), ComplexityLevel.COMPLEX)
            
            # 5. Detectar m√∫ltiplas perguntas/instru√ß√µes
            question_count = self._count_questions(message)
            if question_count > 1:
                complexity = max(complexity, ComplexityLevel.COMPLEX)
            
            # 6. Determinar tipo de tarefa
            task_type = self._classify_task_type(normalized, complexity)
            
            # 7. Gerar an√°lise final
            return self._create_analysis(
                complexity=complexity,
                task_type=task_type,
                message=message,
                word_count=word_count,
                question_count=question_count,
                confidence=self._calculate_confidence(complexity, task_type, word_count)
            )
    
    def _is_greeting(self, normalized: str) -> bool:
        """Detecta sauda√ß√µes b√°sicas"""
        greetings = {"oi", "ol√°", "ola", "hey", "tudo bem", "como vai", "bom dia", 
                    "boa tarde", "boa noite", "tchau", "at√© logo", "obrigado", "obrigada"}
        return any(greeting in normalized for greeting in greetings)
    
    def _detect_emotional_context(self, normalized: str) -> List[str]:
        """Detecta indicadores emocionais na mensagem"""
        found_indicators = []
        for indicator in self.emotional_indicators:
            if indicator in normalized:
                found_indicators.append(indicator)
        return found_indicators
    
    def _analyze_keywords(self, normalized: str) -> ComplexityLevel:
        """Analisa palavras-chave para determinar complexidade"""
        # Ordem de prioridade: CRITICAL > COMPLEX > MODERATE > SIMPLE
        for complexity in [ComplexityLevel.CRITICAL, ComplexityLevel.COMPLEX, 
                          ComplexityLevel.MODERATE, ComplexityLevel.SIMPLE]:
            keywords = self.complexity_keywords.get(complexity, set())
            if any(keyword in normalized for keyword in keywords):
                return complexity
        
        return ComplexityLevel.SIMPLE
    
    def _count_questions(self, message: str) -> int:
        """Conta n√∫mero de perguntas na mensagem"""
        # Contar pontos de interroga√ß√£o
        question_marks = message.count('?')
        
        # Detectar m√∫ltiplas instru√ß√µes
        enumerations = len(re.findall(r'\d+\.', message))
        bullet_points = len(re.findall(r'[-‚Ä¢*]', message))
        
        return max(question_marks, enumerations, bullet_points, 1)
    
    def _classify_task_type(self, normalized: str, complexity: ComplexityLevel) -> TaskType:
        """Classifica o tipo de tarefa baseado no conte√∫do"""
        # Palavras-chave para tipos espec√≠ficos
        task_indicators = {
            TaskType.RESEARCH: ["analise", "pesquise", "mercado", "produto", "dados", "informa√ß√µes"],
            TaskType.CONTENT_CREATION: ["crie", "escreva", "gere", "prompt", "texto", "conte√∫do"],
            TaskType.STRATEGY_PLANNING: ["plano", "estrat√©gia", "planejamento", "objetivos"],
            TaskType.DECISION_MAKING: ["decida", "escolha", "melhor op√ß√£o", "viabilidade", "investir"],
            TaskType.SYSTEM_OPTIMIZATION: ["otimize", "melhore performance", "limpeza"],
            TaskType.CREATIVE_EXPLORATION: ["surpreenda", "inova√ß√£o", "criativo", "explore"]
        }
        
        for task_type, keywords in task_indicators.items():
            if any(keyword in normalized for keyword in keywords):
                return task_type
        
        # Fallback baseado na complexidade
        if complexity == ComplexityLevel.TRIVIAL:
            return TaskType.GREETING
        elif complexity == ComplexityLevel.SIMPLE:
            return TaskType.FACTUAL_QUERY
        else:
            return TaskType.RESEARCH
    
    def _create_analysis(self, complexity: ComplexityLevel, task_type: TaskType, 
                        message: str, word_count: int, question_count: int = 1,
                        emotional_indicators: List[str] = None, 
                        confidence: float = 0.8) -> MessageAnalysis:
        """Cria an√°lise completa da mensagem"""
        
        # Obter plano de ativa√ß√£o da matriz
        activation_plan = self.decision_matrix.get(task_type, self.decision_matrix[TaskType.FACTUAL_QUERY])
        
        # Extrair palavras-chave relevantes
        keywords = self._extract_keywords(message.lower())
        
        # Atualizar estat√≠sticas
        if activation_plan.bypass_llm:
            self.stats["llm_bypassed"] += 1
            self.stats["tokens_saved"] += 100  # Estimativa de tokens salvos
        
        return MessageAnalysis(
            complexity=complexity,
            task_type=task_type,
            keywords=keywords,
            question_count=question_count,
            word_count=word_count,
            emotional_indicators=emotional_indicators or [],
            activation_plan=activation_plan,
            confidence=confidence
        )
    
    def _extract_keywords(self, text: str) -> List[str]:
        """Extrai palavras-chave relevantes do texto"""
        # Palavras irrelevantes (stop words em portugu√™s)
        stop_words = {"o", "a", "de", "da", "do", "que", "√©", "para", "com", "em", 
                     "um", "uma", "por", "se", "no", "na", "os", "as", "dos", "das"}
        
        words = re.findall(r'\b\w+\b', text.lower())
        keywords = [word for word in words if len(word) > 3 and word not in stop_words]
        
        return keywords[:10]  # Limitar a 10 palavras-chave
    
    def _calculate_confidence(self, complexity: ComplexityLevel, task_type: TaskType, 
                            word_count: int) -> float:
        """Calcula confian√ßa na classifica√ß√£o"""
        base_confidence = 0.7
        
        # Maior confian√ßa para casos claros
        if complexity == ComplexityLevel.TRIVIAL:
            base_confidence = 0.95
        elif task_type == TaskType.SYSTEM_COMMAND:
            base_confidence = 1.0
        elif word_count > 50:  # Mensagens longas geralmente s√£o complexas
            base_confidence = 0.9
        
        return min(base_confidence, 1.0)
    
    def get_optimization_stats(self) -> Dict:
        """Retorna estat√≠sticas de otimiza√ß√£o"""
        with self.lock:
            stats = self.stats.copy()
            
            if stats["total_analyses"] > 0:
                stats["bypass_rate"] = stats["llm_bypassed"] / stats["total_analyses"]
                stats["avg_tokens_saved"] = stats["tokens_saved"] / stats["total_analyses"]
            else:
                stats["bypass_rate"] = 0.0
                stats["avg_tokens_saved"] = 0.0
                
            return stats
    
    def reset_stats(self):
        """Reseta estat√≠sticas"""
        with self.lock:
            self.stats = {
                "total_analyses": 0,
                "llm_bypassed": 0,
                "tokens_saved": 0,
                "avg_agents_activated": 0,
                "cache_hits": 0
            }
            logger.info("üìä Estat√≠sticas de otimiza√ß√£o resetadas")


# Singleton global
_optimizer_instance = None
_optimizer_lock = threading.Lock()


def get_agent_optimizer() -> AgentOptimizer:
    """Retorna inst√¢ncia singleton do AgentOptimizer"""
    global _optimizer_instance
    
    with _optimizer_lock:
        if _optimizer_instance is None:
            _optimizer_instance = AgentOptimizer()
        return _optimizer_instance


# Exemplo de uso e teste
if __name__ == "__main__":
    # Teste do sistema de otimiza√ß√£o
    optimizer = get_agent_optimizer()
    
    # Casos de teste conforme especifica√ß√µes Gemini
    test_cases = [
        "Oi, tudo bem?",  # TRIVIAL - Sauda√ß√£o
        "/status",        # TRIVIAL - Comando sistema
        "Qual a capital da Fran√ßa?",  # SIMPLE - Fato
        "Analise a viabilidade de vender patinhos no Shopee",  # COMPLEX - Pesquisa
        "Crie um prompt de vendas para meu produto",  # MODERATE - Cria√ß√£o
        "Estou me sentindo ansioso com meu trabalho",  # MODERATE - Emocional
        "Preciso decidir entre investir em X ou Y para minha empresa. Analise cen√°rios, viabilidade econ√¥mica, riscos e oportunidades de cada op√ß√£o.",  # CRITICAL - Decis√£o
    ]
    
    print("üß™ TESTE DO SISTEMA DE OTIMIZA√á√ÉO DE AGENTES")
    print("=" * 60)
    
    for i, message in enumerate(test_cases, 1):
        analysis = optimizer.analyze_message(message)
        
        print(f"\n{i}. Mensagem: '{message}'")
        print(f"   Complexidade: {analysis.complexity.value}")
        print(f"   Tipo: {analysis.task_type.value}")
        print(f"   Agentes: {', '.join(analysis.activation_plan.primary_agents)}")
        print(f"   Tokens estimados: {analysis.activation_plan.expected_tokens}")
        print(f"   Bypass LLM: {'Sim' if analysis.activation_plan.bypass_llm else 'N√£o'}")
        print(f"   Confian√ßa: {analysis.confidence:.1%}")
    
    # Estat√≠sticas
    stats = optimizer.get_optimization_stats()
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   An√°lises: {stats['total_analyses']}")
    print(f"   LLM bypassed: {stats['llm_bypassed']} ({stats['bypass_rate']:.1%})")
    print(f"   Tokens economizados: {stats['tokens_saved']}")