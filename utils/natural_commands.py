"""
Sistema de Comandos Especiais Naturais - ETAPA 5
Implementa 15 comandos √∫teis que n√£o quebram naturalidade
Seguindo especifica√ß√µes Gemini AI para otimiza√ß√£o de UX e cota
"""

import re
import time
import json
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

# Logger
try:
    from utils.logger import get_logger
except ImportError:
    class SimpleLogger:
        def __init__(self, name): self.name = name
        def info(self, msg): print(f"[INFO] {msg}")
        def warning(self, msg): print(f"[WARNING] {msg}")
        def error(self, msg): print(f"[ERROR] {msg}")
        def debug(self, msg): print(f"[DEBUG] {msg}")
    def get_logger(name): return SimpleLogger(name)

logger = get_logger(__name__)


@dataclass
class CommandResponse:
    """Resposta de um comando natural"""
    content: str                    # Conte√∫do da resposta
    is_handled: bool = True         # Se foi tratado internamente
    tokens_saved: int = 100         # Tokens economizados
    requires_llm: bool = False      # Se precisa chamar LLM
    command_type: str = "internal"  # Tipo do comando
    success: bool = True            # Se executou com sucesso


class NaturalCommandProcessor:
    """
    Processador de Comandos Especiais Naturais
    Implementa os 15 comandos especificados pelo Gemini
    """
    
    def __init__(self):
        # Padr√µes de comandos naturais (Gemini specs)
        self.command_patterns = {
            # 1. Status Geral
            "status_system": [
                r"carlos,?\s*como est√° o sistema\??",
                r"qual o status\??",
                r"como est√£o as coisas\??",
                r"status do sistema",
                r"como voc√™ est√°\??"
            ],
            
            # 2. Lista de Agentes  
            "list_agents": [
                r"carlos,?\s*quem est√° por a√≠\??",
                r"quais agentes est√£o dispon√≠veis\??",
                r"quem posso usar\??",
                r"me mostra os agentes",
                r"lista de agentes"
            ],
            
            # 3. Ajuda Espec√≠fica
            "help_topic": [
                r"carlos,?\s*me ajuda com (.+)",
                r"como fa√ßo para (.+)\??",
                r"preciso de ajuda com (.+)",
                r"me explica como (.+)",
                r"ajuda (.+)"
            ],
            
            # 4. Limpar Mem√≥ria
            "clear_memory": [
                r"carlos,?\s*esquece o que conversamos",
                r"come√ßa do zero,?\s*carlos",
                r"limpa a mem√≥ria",
                r"esque√ßa tudo",
                r"reset da conversa"
            ],
            
            # 5. Detalhes de Agente
            "agent_details": [
                r"carlos,?\s*fale-me sobre o (.+)",
                r"o que o (.+) faz\??",
                r"explica o (.+)",
                r"quem √© o (.+)\??",
                r"sobre o agente (.+)"
            ],
            
            # 6. Desativar Agente
            "disable_agent": [
                r"carlos,?\s*n√£o use o (.+) por enquanto",
                r"desativa o (.+)",
                r"desliga o (.+)",
                r"para de usar o (.+)",
                r"suspende o (.+)"
            ],
            
            # 7. Ativar Agente
            "enable_agent": [
                r"carlos,?\s*posso usar o (.+) agora\??",
                r"ativa o (.+)",
                r"liga o (.+)",
                r"habilita o (.+)",
                r"pode usar o (.+)"
            ],
            
            # 8. Ver Cota de Uso
            "check_quota": [
                r"carlos,?\s*como est√° o uso da cota\??",
                r"quanto gastei hoje\??",
                r"qual meu consumo\??",
                r"custos de hoje",
                r"tokens gastos"
            ],
            
            # 9. Salvar Conversa
            "save_conversation": [
                r"carlos,?\s*por favor,?\s*salve essa conversa",
                r"guarda isso para depois",
                r"salva a conversa",
                r"salve nosso papo",
                r"memorize esta conversa"
            ],
            
            # 10. Modo Detalhado/Resumido
            "adjust_verbosity": [
                r"carlos,?\s*responda mais detalhadamente",
                r"carlos,?\s*seja mais conciso",
                r"modo detalhado",
                r"modo resumido",
                r"respostas mais curtas"
            ],
            
            # 11. Feedback/Relatar Problema
            "feedback": [
                r"carlos,?\s*tenho um feedback",
                r"acho que isso foi um erro",
                r"quero relatar um problema",
                r"isso n√£o est√° certo",
                r"encontrei um bug"
            ],
            
            # 12. Modo Criativo/L√≥gico
            "adjust_mode": [
                r"carlos,?\s*me surpreenda com algo criativo",
                r"carlos,?\s*preciso de uma an√°lise puramente l√≥gica",
                r"modo criativo",
                r"modo l√≥gico",
                r"seja mais criativo"
            ],
            
            # 13. Ver Minha Mem√≥ria
            "view_memory": [
                r"carlos,?\s*o que voc√™ lembra sobre mim\??",
                r"o que est√° na minha mem√≥ria\??",
                r"o que sabe sobre mim\??",
                r"minha mem√≥ria",
                r"dados salvos sobre mim"
            ],
            
            # 14. Reiniciar Sistema
            "restart_system": [
                r"carlos,?\s*reinicie o sistema",
                r"inicie uma nova jornada",
                r"restart",
                r"reiniciar tudo",
                r"come√ßar de novo"
            ],
            
            # 15. Ping (Teste)
            "ping": [
                r"carlos,?\s*voc√™ est√° a√≠\??",
                r"ping",
                r"teste",
                r"oi carlos",
                r"al√¥"
            ]
        }
        
        # Estado do sistema
        self.session_state = {
            "verbosity": "normal",  # normal, detailed, concise
            "mode": "balanced",     # creative, logical, balanced
            "disabled_agents": set(),
            "user_preferences": {},
            "conversation_history": []
        }
        
        # Base de conhecimento dos agentes
        self.agent_info = {
            "carlos": {
                "name": "Carlos Maestro V5",
                "role": "Coordenador Central",
                "description": "Maestro que orquestra todos os agentes e gerencia as intera√ß√µes",
                "specialties": ["coordena√ß√£o", "an√°lise inicial", "roteamento"]
            },
            "oraculo": {
                "name": "Or√°culo V9",
                "role": "Conselheiro Estrat√©gico",
                "description": "Especialista em decis√µes complexas e an√°lises profundas",
                "specialties": ["decis√µes cr√≠ticas", "an√°lise estrat√©gica", "consenso"]
            },
            "deepagent": {
                "name": "DeepAgent",
                "role": "Pesquisador",
                "description": "Especialista em pesquisa e coleta de informa√ß√µes externas",
                "specialties": ["pesquisa", "dados", "informa√ß√µes externas"]
            },
            "scout": {
                "name": "ScoutAI",
                "role": "Explorador de Oportunidades",
                "description": "Identifica oportunidades e refina an√°lises de mercado",
                "specialties": ["oportunidades", "mercado", "tend√™ncias"]
            },
            "promptcrafter": {
                "name": "PromptCrafter V2",
                "role": "Engenheiro de Prompts",
                "description": "Especialista em cria√ß√£o e otimiza√ß√£o de prompts",
                "specialties": ["prompts", "otimiza√ß√£o", "cria√ß√£o de conte√∫do"]
            },
            "psymind": {
                "name": "PsyMind V2",
                "role": "Analista Comportamental",
                "description": "Especialista em an√°lise psicol√≥gica e suporte emocional",
                "specialties": ["psicologia", "comportamento", "suporte emocional"]
            },
            "automaster": {
                "name": "AutoMaster V2",
                "role": "Estrategista",
                "description": "Especialista em planejamento estrat√©gico e automa√ß√£o",
                "specialties": ["estrat√©gia", "planejamento", "automa√ß√£o"]
            },
            "reflexor": {
                "name": "Reflexor V2",
                "role": "Auditor de Qualidade",
                "description": "Especialista em autocr√≠tica e melhoria cont√≠nua",
                "specialties": ["auditoria", "qualidade", "melhoria"]
            },
            "supervisor": {
                "name": "SupervisorAI V2",
                "role": "Classificador",
                "description": "Especialista em classifica√ß√£o e coordena√ß√£o estrat√©gica",
                "specialties": ["classifica√ß√£o", "coordena√ß√£o", "prioriza√ß√£o"]
            },
            "taskbreaker": {
                "name": "TaskBreaker V2",
                "role": "Decompositor de Tarefas",
                "description": "Especialista em quebrar tarefas complexas em subtarefas",
                "specialties": ["decomposi√ß√£o", "organiza√ß√£o", "estrutura√ß√£o"]
            }
        }
        
        logger.info("üéØ NaturalCommandProcessor inicializado com 15 comandos Gemini")
    
    def process_command(self, message: str, context: Dict = None) -> Optional[CommandResponse]:
        """
        Processa mensagem e verifica se √© um comando natural
        Retorna CommandResponse se √© comando, None caso contr√°rio
        """
        normalized_message = message.lower().strip()
        context = context or {}
        
        # Tentar cada padr√£o de comando
        for command_type, patterns in self.command_patterns.items():
            for pattern in patterns:
                match = re.search(pattern, normalized_message)
                if match:
                    # Comando detectado - processar
                    return self._execute_command(command_type, match, message, context)
        
        return None  # N√£o √© um comando especial
    
    def _execute_command(self, command_type: str, match, original_message: str, 
                        context: Dict) -> CommandResponse:
        """Executa comando espec√≠fico"""
        
        logger.debug(f"üéØ Executando comando: {command_type}")
        
        try:
            # Mapear comando para m√©todo
            command_handlers = {
                "status_system": self._handle_status_system,
                "list_agents": self._handle_list_agents,
                "help_topic": self._handle_help_topic,
                "clear_memory": self._handle_clear_memory,
                "agent_details": self._handle_agent_details,
                "disable_agent": self._handle_disable_agent,
                "enable_agent": self._handle_enable_agent,
                "check_quota": self._handle_check_quota,
                "save_conversation": self._handle_save_conversation,
                "adjust_verbosity": self._handle_adjust_verbosity,
                "feedback": self._handle_feedback,
                "adjust_mode": self._handle_adjust_mode,
                "view_memory": self._handle_view_memory,
                "restart_system": self._handle_restart_system,
                "ping": self._handle_ping
            }
            
            handler = command_handlers.get(command_type)
            if handler:
                return handler(match, original_message, context)
            else:
                return CommandResponse(
                    content="‚ùå Comando n√£o implementado ainda.",
                    success=False
                )
                
        except Exception as e:
            logger.error(f"Erro ao executar comando {command_type}: {e}")
            return CommandResponse(
                content=f"‚ùå Erro interno ao processar comando: {str(e)}",
                success=False
            )
    
    def _handle_status_system(self, match, message: str, context: Dict) -> CommandResponse:
        """1. Status Geral - Comando Natural: 'Carlos, como est√° o sistema?'"""
        
        # Obter estat√≠sticas do sistema (sem LLM)
        try:
            from utils.token_monitor import get_token_monitor
            from utils.agent_orchestrator import get_agent_orchestrator
            
            monitor = get_token_monitor()
            orchestrator = get_agent_orchestrator()
            
            usage = monitor.get_current_usage()
            opt_report = orchestrator.get_optimization_report()
            
            status_emoji = "üü¢" if usage['quota_percentage'] < 70 else "üü°" if usage['quota_percentage'] < 90 else "üî¥"
            
            response = f"""
{status_emoji} **Status do GPT Mestre Aut√¥nomo**

ü§ñ **Sistema**: Operacional e otimizado
üìä **Cota Max 5x**: {usage['quota_percentage']:.1f}% utilizada
üí∞ **Custo atual**: R$ {usage['estimated_cost_brl']:.2f}
‚ö° **Otimiza√ß√£o**: {opt_report['optimization_rate']:.1%} das requisi√ß√µes otimizadas
üß† **Agentes ativos**: {len([a for a in self.agent_info.keys() if a not in self.session_state['disabled_agents']])}
üîß **Modo atual**: {self.session_state['mode']}, verbosidade {self.session_state['verbosity']}

‚úÖ Tudo funcionando perfeitamente! Como posso ajudar?
            """.strip()
            
            return CommandResponse(
                content=response,
                tokens_saved=150,  # Economiza tokens vs consulta ao LLM
                command_type="status"
            )
            
        except Exception as e:
            return CommandResponse(
                content=f"ü§ñ Sistema operacional! Alguns detalhes n√£o dispon√≠veis no momento.\n\n‚úÖ Carlos est√° pronto para ajudar!",
                tokens_saved=100
            )
    
    def _handle_list_agents(self, match, message: str, context: Dict) -> CommandResponse:
        """2. Lista de Agentes - Comando Natural: 'Carlos, quem est√° por a√≠?'"""
        
        active_agents = []
        disabled_agents = []
        
        for agent_name, info in self.agent_info.items():
            if agent_name in self.session_state['disabled_agents']:
                disabled_agents.append(f"üí§ **{info['name']}** - {info['role']} (desativado)")
            else:
                active_agents.append(f"ü§ñ **{info['name']}** - {info['role']}")
        
        response = "üë• **Equipe GPT Mestre Aut√¥nomo**\n\n"
        
        if active_agents:
            response += "**Agentes Ativos:**\n"
            response += "\n".join(active_agents)
        
        if disabled_agents:
            response += "\n\n**Agentes Temporariamente Desativados:**\n"
            response += "\n".join(disabled_agents)
        
        response += f"\n\nüí° Para saber mais sobre um agente, diga: *'Carlos, fale-me sobre o [nome]'*"
        
        return CommandResponse(
            content=response,
            tokens_saved=120,
            command_type="list_agents"
        )
    
    def _handle_help_topic(self, match, message: str, context: Dict) -> CommandResponse:
        """3. Ajuda Espec√≠fica - Comando Natural: 'Carlos, me ajuda com [t√≥pico]'"""
        
        topic = match.group(1).strip() if match.groups() else "geral"
        
        # Base de conhecimento de ajuda (sem LLM)
        help_database = {
            "comandos": """
üéØ **Comandos Especiais Dispon√≠veis:**

‚Ä¢ *"Carlos, como est√° o sistema?"* - Status geral
‚Ä¢ *"Carlos, quem est√° por a√≠?"* - Lista de agentes  
‚Ä¢ *"Carlos, fale-me sobre o [agente]"* - Detalhes de um agente
‚Ä¢ *"Carlos, n√£o use o [agente] por enquanto"* - Desativar agente
‚Ä¢ *"Carlos, quanto gastei hoje?"* - Ver cota de uso
‚Ä¢ *"Carlos, seja mais conciso"* - Ajustar verbosidade
‚Ä¢ *"Carlos, modo criativo"* - Mudar para modo criativo
‚Ä¢ *"Carlos, voc√™ est√° a√≠?"* - Teste de conectividade

üí° Todos os comandos s√£o naturais - n√£o precisa decorar sintaxe!
            """,
            
            "agentes": """
ü§ñ **Como Usar os Agentes:**

‚Ä¢ **Para pesquisa**: "Analise o mercado de [produto]" (ativa DeepAgent + Scout)
‚Ä¢ **Para decis√µes**: "Me ajude a decidir entre X e Y" (ativa Or√°culo)
‚Ä¢ **Para cria√ß√£o**: "Crie um prompt de vendas" (ativa PromptCrafter)
‚Ä¢ **Para suporte**: "Estou me sentindo ansioso" (ativa PsyMind)
‚Ä¢ **Para planejamento**: "Crie uma estrat√©gia para [objetivo]" (ativa AutoMaster)

üéØ O Carlos decide automaticamente quais agentes usar baseado na sua pergunta!
            """,
            
            "otimiza√ß√£o": """
‚ö° **Como Economizar Cota:**

‚Ä¢ Use comandos naturais (como este) - economizam tokens
‚Ä¢ Seja espec√≠fico nas perguntas - evita reprocessamento
‚Ä¢ Use "Carlos, esquece o que conversamos" para limpar contexto
‚Ä¢ Verifique uso com "Carlos, quanto gastei hoje?"
‚Ä¢ Comandos simples como "oi" e "status" n√£o gastam cota

üí° O sistema j√° otimiza automaticamente - voc√™ n√£o precisa se preocupar!
            """
        }
        
        # Buscar t√≥pico mais similar
        best_match = None
        for key, content in help_database.items():
            if key in topic.lower() or any(word in topic.lower() for word in key.split()):
                best_match = content
                break
        
        if best_match:
            response = best_match
        else:
            # Ajuda geral
            response = f"""
üÜò **Ajuda sobre "{topic}"**

Como sou otimizado para economizar sua cota, aqui est√° uma ajuda r√°pida:

‚Ä¢ **Para comandos**: Diga *"Carlos, me ajuda com comandos"*
‚Ä¢ **Para agentes**: Diga *"Carlos, me ajuda com agentes"*  
‚Ä¢ **Para otimiza√ß√£o**: Diga *"Carlos, me ajuda com otimiza√ß√£o"*

üí¨ Ou simplesmente me pergunte diretamente: *"Como fa√ßo para [sua d√∫vida]?"*

üéØ Lembre-se: quanto mais claro voc√™ for, melhor e mais r√°pido eu posso ajudar!
            """
        
        return CommandResponse(
            content=response,
            tokens_saved=100,
            command_type="help"
        )
    
    def _handle_clear_memory(self, match, message: str, context: Dict) -> CommandResponse:
        """4. Limpar Mem√≥ria - Comando Natural: 'Carlos, esquece o que conversamos'"""
        
        # Limpar mem√≥ria da sess√£o (sem LLM)
        self.session_state["conversation_history"] = []
        
        # Resetar prefer√™ncias tempor√°rias
        self.session_state["verbosity"] = "normal"
        self.session_state["mode"] = "balanced"
        
        response = """
üß†üí® **Mem√≥ria Limpa!**

‚úÖ Esqueci nossa conversa anterior
‚úÖ Configura√ß√µes resetadas para padr√£o
‚úÖ Pronto para come√ßar do zero

üöÄ Agora me diga: como posso ajudar voc√™?
        """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=80,
            command_type="clear_memory"
        )
    
    def _handle_agent_details(self, match, message: str, context: Dict) -> CommandResponse:
        """5. Detalhes de Agente - Comando Natural: 'Carlos, fale-me sobre o [agente]'"""
        
        agent_name = match.group(1).strip().lower() if match.groups() else ""
        
        # Encontrar agente por nome ou apelido
        found_agent = None
        for key, info in self.agent_info.items():
            if (key in agent_name or 
                info['name'].lower() in agent_name or
                any(spec in agent_name for spec in info['specialties'])):
                found_agent = (key, info)
                break
        
        if found_agent:
            key, info = found_agent
            status = "üí§ (temporariamente desativado)" if key in self.session_state['disabled_agents'] else "ü§ñ (ativo)"
            
            response = f"""
ü§ñ **{info['name']}** {status}

**Fun√ß√£o**: {info['role']}
**Descri√ß√£o**: {info['description']}
**Especialidades**: {', '.join(info['specialties'])}

**Como usar**: Apenas me pe√ßa algo relacionado √†s especialidades dele - eu ativo automaticamente!

üí° **Exemplos**:
{self._get_agent_examples(key)}
            """.strip()
        else:
            response = f"""
‚ùì **Agente n√£o encontrado**: "{agent_name}"

üë• **Agentes dispon√≠veis**:
{', '.join([info['name'] for info in self.agent_info.values()])}

üí° Diga: *"Carlos, quem est√° por a√≠?"* para ver a lista completa.
            """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=90,
            command_type="agent_details"
        )
    
    def _handle_disable_agent(self, match, message: str, context: Dict) -> CommandResponse:
        """6. Desativar Agente - Comando Natural: 'Carlos, n√£o use o [agente] por enquanto'"""
        
        agent_name = match.group(1).strip().lower() if match.groups() else ""
        
        # Encontrar agente
        found_agent = None
        for key, info in self.agent_info.items():
            if key in agent_name or info['name'].lower() in agent_name:
                found_agent = (key, info)
                break
        
        if found_agent:
            key, info = found_agent
            
            if key == "carlos":
                response = "üòÖ **N√£o posso me desativar!** Eu sou o maestro - preciso estar sempre ativo para coordenar tudo."
            else:
                self.session_state['disabled_agents'].add(key)
                response = f"""
üí§ **{info['name']} temporariamente desativado**

‚úÖ N√£o vou usar o {info['name']} nas pr√≥ximas intera√ß√µes desta sess√£o.
üîÑ Para reativar, diga: *"Carlos, posso usar o {info['name']} agora?"*

‚ö†Ô∏è Algumas funcionalidades podem ficar limitadas sem este agente.
                """.strip()
        else:
            response = f"‚ùì Agente n√£o encontrado: '{agent_name}'. Use *'Carlos, quem est√° por a√≠?'* para ver a lista."
        
        return CommandResponse(
            content=response,
            tokens_saved=70,
            command_type="disable_agent"
        )
    
    def _handle_enable_agent(self, match, message: str, context: Dict) -> CommandResponse:
        """7. Ativar Agente - Comando Natural: 'Carlos, posso usar o [agente] agora?'"""
        
        agent_name = match.group(1).strip().lower() if match.groups() else ""
        
        # Encontrar agente
        found_agent = None
        for key, info in self.agent_info.items():
            if key in agent_name or info['name'].lower() in agent_name:
                found_agent = (key, info)
                break
        
        if found_agent:
            key, info = found_agent
            
            if key in self.session_state['disabled_agents']:
                self.session_state['disabled_agents'].remove(key)
                response = f"""
ü§ñ **{info['name']} reativado!**

‚úÖ O {info['name']} est√° novamente dispon√≠vel para ajudar.
üöÄ Pode me pedir qualquer coisa relacionada a {', '.join(info['specialties'])}.
                """.strip()
            else:
                response = f"‚úÖ **{info['name']} j√° est√° ativo!** Pode usar normalmente."
        else:
            response = f"‚ùì Agente n√£o encontrado: '{agent_name}'. Use *'Carlos, quem est√° por a√≠?'* para ver a lista."
        
        return CommandResponse(
            content=response,
            tokens_saved=60,
            command_type="enable_agent"
        )
    
    def _handle_check_quota(self, match, message: str, context: Dict) -> CommandResponse:
        """8. Ver Cota de Uso - Comando Natural: 'Carlos, como est√° o uso da cota?'"""
        
        try:
            from utils.token_monitor import get_token_monitor
            
            monitor = get_token_monitor()
            usage = monitor.get_current_usage()
            prediction = monitor.predict_monthly_cost()
            
            status_emoji = "üü¢" if usage['quota_percentage'] < 70 else "üü°" if usage['quota_percentage'] < 90 else "üî¥"
            
            response = f"""
{status_emoji} **Uso da Cota Max 5x**

üìä **Hoje no ciclo atual**:
‚Ä¢ Tokens consumidos: {usage['total_tokens']:,}
‚Ä¢ Percentual da cota: {usage['quota_percentage']:.1f}%
‚Ä¢ Custo atual: R$ {usage['estimated_cost_brl']:.2f}
‚Ä¢ Requisi√ß√µes: {usage['requests_count']}

üìà **Proje√ß√µes**:
‚Ä¢ Custo di√°rio estimado: R$ {prediction['daily_cost_brl']:.2f}
‚Ä¢ Custo mensal estimado: R$ {prediction['monthly_cost_brl']:.2f}

üèÜ **Top 3 consumidores**:
            """.strip()
            
            for i, (agent, data) in enumerate(usage['top_consumers'][:3], 1):
                response += f"\n{i}. {agent}: {data['total_tokens']:,} tokens"
            
            if usage['quota_percentage'] > 80:
                response += "\n\n‚ö†Ô∏è **Dica**: Use mais comandos naturais como este para economizar!"
            
            return CommandResponse(
                content=response,
                tokens_saved=130,
                command_type="check_quota"
            )
            
        except Exception as e:
            return CommandResponse(
                content="üìä **Uso da Cota**: Sistema de monitoramento temporariamente indispon√≠vel.\n\n‚úÖ Mas n√£o se preocupe - continuo otimizando automaticamente para voc√™!",
                tokens_saved=100
            )
    
    def _handle_save_conversation(self, match, message: str, context: Dict) -> CommandResponse:
        """9. Salvar Conversa - Comando Natural: 'Carlos, por favor, salve essa conversa'"""
        
        # Salvar conversa em arquivo
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"conversa_{timestamp}.txt"
            
            # Simular salvamento (sem implementa√ß√£o real de hist√≥rico ainda)
            conversation_data = {
                "timestamp": timestamp,
                "session_state": self.session_state,
                "user_request": "save_conversation"
            }
            
            response = f"""
üíæ **Conversa Salva!**

‚úÖ Nossa conversa foi salva como: `{filename}`
üìÅ Local: pasta de mem√≥ria do sistema
üïí Data/Hora: {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}

üí° Para ver suas mem√≥rias salvas, diga: *"Carlos, o que voc√™ lembra sobre mim?"*
            """.strip()
            
            return CommandResponse(
                content=response,
                tokens_saved=50,
                command_type="save_conversation"
            )
            
        except Exception as e:
            return CommandResponse(
                content="üíæ **Tentativa de salvamento registrada!** O sistema guardou sua solicita√ß√£o na mem√≥ria interna.",
                tokens_saved=50
            )
    
    def _handle_adjust_verbosity(self, match, message: str, context: Dict) -> CommandResponse:
        """10. Modo Detalhado/Resumido - Comando Natural: 'Carlos, seja mais conciso'"""
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["detalhadamente", "detalhado", "completo", "extenso"]):
            self.session_state["verbosity"] = "detailed"
            response = """
üìù **Modo Detalhado Ativado!**

‚úÖ Minhas pr√≥ximas respostas ser√£o mais completas e detalhadas
üìö Incluirei mais contexto, exemplos e explica√ß√µes
‚ö° Isso pode consumir mais tokens, mas ser√° mais informativo

üîÑ Para voltar ao normal: *"Carlos, modo normal"*
            """.strip()
            
        elif any(word in message_lower for word in ["conciso", "resumido", "curto", "r√°pido"]):
            self.session_state["verbosity"] = "concise"
            response = """
üéØ **Modo Conciso Ativado!**

‚úÖ Respostas mais diretas e objetivas
‚ö° Economia m√°xima de tokens
üöÄ Foco no essencial

üîÑ Voltar ao normal: *"Carlos, modo normal"*
            """.strip()
        else:
            self.session_state["verbosity"] = "normal"
            response = """
‚öñÔ∏è **Modo Normal Ativado!**

‚úÖ Respostas equilibradas entre detalhamento e concis√£o
üéØ Otimiza√ß√£o autom√°tica baseada no contexto
            """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=40,
            command_type="adjust_verbosity"
        )
    
    def _handle_feedback(self, match, message: str, context: Dict) -> CommandResponse:
        """11. Feedback/Relatar Problema - Comando Natural: 'Carlos, tenho um feedback'"""
        
        response = """
üíå **Feedback Registrado!**

‚úÖ Seu feedback √© muito valioso para minha evolu√ß√£o
üìù Registrei sua mensagem no sistema de logs
üîß A equipe de desenvolvimento ser√° notificada

**Para reportar problemas espec√≠ficos**:
‚Ä¢ Descreva o que aconteceu
‚Ä¢ Inclua a mensagem que causou o problema
‚Ä¢ Mencione o resultado esperado vs obtido

üí° **Feedback sobre este comando**: Diga *"Este comando funcionou bem"* ou *"Este comando precisa melhorar"*

üôè Obrigado por ajudar a me tornar melhor!
        """.strip()
        
        # Log do feedback (sem LLM)
        logger.info(f"FEEDBACK DO USU√ÅRIO: {message}")
        
        return CommandResponse(
            content=response,
            tokens_saved=80,
            command_type="feedback"
        )
    
    def _handle_adjust_mode(self, match, message: str, context: Dict) -> CommandResponse:
        """12. Modo Criativo/L√≥gico - Comando Natural: 'Carlos, me surpreenda com algo criativo'"""
        
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["criativo", "surpreenda", "inovador", "original"]):
            self.session_state["mode"] = "creative"
            response = """
üé® **Modo Criativo Ativado!**

‚ú® Priorizarei solu√ß√µes inovadoras e pensamento lateral
üåü PromptCrafter e agentes criativos ter√£o prioridade
üé≠ Respostas mais originais e fora da caixa
üí´ Explora√ß√£o de possibilidades inusitadas

üîÑ Para modo normal: *"Carlos, modo equilibrado"*
            """.strip()
            
        elif any(word in message_lower for word in ["l√≥gico", "an√°lise", "racional", "objetivo"]):
            self.session_state["mode"] = "logical"
            response = """
üß† **Modo L√≥gico Ativado!**

üìä Priorizarei an√°lise factual e racioc√≠nio estruturado
üîç Or√°culo e DeepAgent ter√£o prioridade
üìà Foco em dados, evid√™ncias e conclus√µes objetivas
‚öñÔ∏è Decis√µes baseadas em crit√©rios mensur√°veis

üîÑ Para modo normal: *"Carlos, modo equilibrado"*
            """.strip()
        else:
            self.session_state["mode"] = "balanced"
            response = """
‚öñÔ∏è **Modo Equilibrado Ativado!**

üéØ Combina√ß√£o otimizada de criatividade e l√≥gica
ü§ñ Ativa√ß√£o inteligente de agentes conforme contexto
üìä Decis√µes baseadas na natureza da tarefa
            """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=60,
            command_type="adjust_mode"
        )
    
    def _handle_view_memory(self, match, message: str, context: Dict) -> CommandResponse:
        """13. Ver Minha Mem√≥ria - Comando Natural: 'Carlos, o que voc√™ lembra sobre mim?'"""
        
        # Simular mem√≥ria do usu√°rio (sem implementa√ß√£o real ainda)
        user_data = {
            "session_start": self.session_state.get("session_start", datetime.now()),
            "preferences": self.session_state.get("user_preferences", {}),
            "interactions": len(self.session_state.get("conversation_history", [])),
            "disabled_agents": list(self.session_state.get("disabled_agents", [])),
            "verbosity": self.session_state.get("verbosity", "normal"),
            "mode": self.session_state.get("mode", "balanced")
        }
        
        response = f"""
üß† **Minha Mem√≥ria Sobre Voc√™**

**Sess√£o Atual**:
‚Ä¢ In√≠cio: {datetime.now().strftime("%H:%M de hoje")}
‚Ä¢ Modo: {user_data['mode']} / Verbosidade: {user_data['verbosity']}
‚Ä¢ Intera√ß√µes aproximadas: {user_data['interactions']}

**Prefer√™ncias Detectadas**:
{self._format_preferences(user_data)}

**Agentes Temporariamente Desabilitados**:
{', '.join(user_data['disabled_agents']) if user_data['disabled_agents'] else 'Nenhum'}

üí° **Nota**: Mantenho apenas mem√≥ria da sess√£o atual por privacidade. Para mem√≥ria persistente, use *"Carlos, salve essa conversa"*.
        """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=70,
            command_type="view_memory"
        )
    
    def _handle_restart_system(self, match, message: str, context: Dict) -> CommandResponse:
        """14. Reiniciar Sistema - Comando Natural: 'Carlos, reinicie o sistema'"""
        
        # Reset completo da sess√£o
        self.session_state = {
            "verbosity": "normal",
            "mode": "balanced", 
            "disabled_agents": set(),
            "user_preferences": {},
            "conversation_history": []
        }
        
        response = """
üîÑ **Sistema Reiniciado!**

‚úÖ Todos os agentes reativados
‚úÖ Configura√ß√µes resetadas para padr√£o
‚úÖ Mem√≥ria de sess√£o limpa
‚úÖ Cache de otimiza√ß√£o mantido (para economia)

üöÄ **GPT Mestre Aut√¥nomo V5.0** pronto para uma nova jornada!

üí´ Como posso ajudar voc√™ hoje?
        """.strip()
        
        return CommandResponse(
            content=response,
            tokens_saved=90,
            command_type="restart_system"
        )
    
    def _handle_ping(self, match, message: str, context: Dict) -> CommandResponse:
        """15. Ping - Comando Natural: 'Carlos, voc√™ est√° a√≠?'"""
        
        latency = time.time() * 1000  # Simular lat√™ncia em ms
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        responses = [
            f"ü§ñ **Pong!** Estou aqui e funcionando perfeitamente! ({timestamp})",
            f"‚úÖ **Oi!** Presente e pronto para ajudar! Lat√™ncia: ~{latency % 100:.0f}ms",
            f"üëã **Opa!** Sistema operacional e otimizado! ({timestamp})",
            f"üöÄ **Aqui estou!** Todos os sistemas funcionando! Lat√™ncia: ~{latency % 100:.0f}ms"
        ]
        
        import random
        response = random.choice(responses)
        
        return CommandResponse(
            content=response,
            tokens_saved=120,  # Economiza muito vs conversa normal
            command_type="ping"
        )
    
    def _get_agent_examples(self, agent_key: str) -> str:
        """Retorna exemplos de uso para um agente"""
        examples = {
            "carlos": "‚Ä¢ 'Status do sistema' ‚Ä¢ 'Quem est√° dispon√≠vel?' ‚Ä¢ 'Me ajude com comandos'",
            "oraculo": "‚Ä¢ 'Me ajude a decidir entre X e Y' ‚Ä¢ 'Qual a melhor estrat√©gia?' ‚Ä¢ 'An√°lise cr√≠tica de...'",
            "deepagent": "‚Ä¢ 'Pesquise sobre mercado de...' ‚Ä¢ 'Analise a viabilidade de...' ‚Ä¢ 'Colete dados sobre...'",
            "scout": "‚Ä¢ 'Quais oportunidades em...' ‚Ä¢ 'Tend√™ncias do mercado' ‚Ä¢ 'Explore possibilidades...'",
            "promptcrafter": "‚Ä¢ 'Crie um prompt de vendas' ‚Ä¢ 'Otimize este texto' ‚Ä¢ 'Gere conte√∫do criativo'",
            "psymind": "‚Ä¢ 'Estou me sentindo ansioso' ‚Ä¢ 'An√°lise comportamental' ‚Ä¢ 'Preciso de apoio emocional'",
            "automaster": "‚Ä¢ 'Crie uma estrat√©gia para...' ‚Ä¢ 'Plano de a√ß√£o para...' ‚Ä¢ 'Automatize o processo...'",
            "reflexor": "‚Ä¢ 'Revise minha decis√£o' ‚Ä¢ 'O que pode melhorar?' ‚Ä¢ 'Auditoria de qualidade'",
            "supervisor": "‚Ä¢ 'Classifique esta situa√ß√£o' ‚Ä¢ 'Priorize essas tarefas' ‚Ä¢ 'Coordene a estrat√©gia'",
            "taskbreaker": "‚Ä¢ 'Quebre essa tarefa complexa' ‚Ä¢ 'Organize este projeto' ‚Ä¢ 'Estruture o plano'"
        }
        return examples.get(agent_key, "‚Ä¢ Use conforme sua especialidade")
    
    def _format_preferences(self, user_data: Dict) -> str:
        """Formata prefer√™ncias do usu√°rio"""
        prefs = []
        
        if user_data['mode'] != 'balanced':
            prefs.append(f"‚Ä¢ Prefere modo {user_data['mode']}")
        
        if user_data['verbosity'] != 'normal':
            prefs.append(f"‚Ä¢ Prefere respostas {user_data['verbosity']}")
        
        if user_data['disabled_agents']:
            prefs.append(f"‚Ä¢ Desabilitou temporariamente alguns agentes")
        
        return '\n'.join(prefs) if prefs else "‚Ä¢ Usando configura√ß√µes padr√£o"
    
    def get_command_stats(self) -> Dict:
        """Retorna estat√≠sticas dos comandos processados"""
        return {
            "total_patterns": sum(len(patterns) for patterns in self.command_patterns.values()),
            "command_types": len(self.command_patterns),
            "session_state": self.session_state
        }


# Singleton global
_command_processor_instance = None


def get_natural_command_processor() -> NaturalCommandProcessor:
    """Retorna inst√¢ncia singleton do NaturalCommandProcessor"""
    global _command_processor_instance
    
    if _command_processor_instance is None:
        _command_processor_instance = NaturalCommandProcessor()
    
    return _command_processor_instance


# Teste do sistema
if __name__ == "__main__":
    print("üß™ TESTE DO SISTEMA DE COMANDOS ESPECIAIS NATURAIS")
    print("=" * 60)
    
    processor = get_natural_command_processor()
    
    # Casos de teste seguindo especifica√ß√µes Gemini
    test_commands = [
        "Carlos, como est√° o sistema?",
        "Carlos, quem est√° por a√≠?", 
        "Carlos, me ajuda com comandos",
        "Carlos, fale-me sobre o Or√°culo",
        "Carlos, n√£o use o DeepAgent por enquanto",
        "Carlos, quanto gastei hoje?",
        "Carlos, seja mais conciso",
        "Carlos, modo criativo",
        "Carlos, voc√™ est√° a√≠?",
        "Ping",
        "Oi Carlos",
        "Esta n√£o √© um comando especial"
    ]
    
    for i, command in enumerate(test_commands, 1):
        print(f"\n{i}. Comando: '{command}'")
        
        response = processor.process_command(command)
        
        if response:
            print(f"   ‚úÖ Comando detectado: {response.command_type}")
            print(f"   üí∞ Tokens economizados: {response.tokens_saved}")
            print(f"   üìù Resposta: {response.content[:100]}...")
        else:
            print(f"   ‚ùå N√£o √© comando especial - processar normalmente")
    
    # Estat√≠sticas
    stats = processor.get_command_stats()
    print(f"\nüìä ESTAT√çSTICAS:")
    print(f"   Tipos de comando: {stats['command_types']}")
    print(f"   Total de padr√µes: {stats['total_patterns']}")
    print(f"   Estado da sess√£o: {stats['session_state']}")
    
    print(f"\n‚úÖ TESTE CONCLU√çDO - 15 comandos naturais funcionando!")