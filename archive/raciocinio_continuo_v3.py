"""
üß† RACIOC√çNIO CONT√çNUO v3.0 - METACOGNITIVO
Sistema avan√ßado de racioc√≠nio com m√∫ltiplas perspectivas paralelas e metacogni√ß√£o
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass, asdict
from enum import Enum
import hashlib
from concurrent.futures import ThreadPoolExecutor, as_completed

from .base_agent_v2 import BaseAgentV2
from utils.logger import get_logger

logger = get_logger("raciocinio_continuo")


class TipoPensamento(Enum):
    """Tipos de pensamento no racioc√≠nio cont√≠nuo"""
    ANALITICO = "analitico"
    CRIATIVO = "criativo"  
    CRITICO = "critico"
    INTUITIVO = "intuitivo"
    SIST√äMICO = "sistemico"
    PARADOXAL = "paradoxal"


class EstadoReflexao(Enum):
    """Estados da reflex√£o metacognitiva"""
    INICIAL = "inicial"
    APROFUNDANDO = "aprofundando"
    CONVERGINDO = "convergindo"
    VALIDANDO = "validando"
    FINALIZADO = "finalizado"


@dataclass
class Pensamento:
    """Estrutura de um pensamento individual"""
    id: str
    tipo: TipoPensamento
    conteudo: str
    confianca: float  # 0-1
    evidencias: List[str]
    contrapontos: List[str]
    timestamp: datetime
    origem: str  # qual perspectiva gerou
    conectado_com: List[str]  # IDs de outros pensamentos


@dataclass
class CicloReflexao:
    """Estrutura de um ciclo completo de reflex√£o"""
    id: str
    entrada_original: str
    pensamentos: List[Pensamento]
    reflexoes_meta: List[str]
    correcoes: List[str]
    validacoes: List[str]
    resultado_final: str
    confianca_final: float
    tempo_execucao: float
    aprendizados: List[str]
    estado: EstadoReflexao


@dataclass
class SwarmResult:
    """Resultado do processamento swarm"""
    perspectivas: List[Dict]
    convergencia: float  # 0-1 
    consenso: str
    dissidencias: List[str]
    insights_emergentes: List[str]


class MetaReflexor:
    """Sistema de metacogni√ß√£o que reflete sobre o pr√≥prio racioc√≠nio"""
    
    def __init__(self):
        self.historico_reflexoes = []
        self.padroes_identificados = {}
        self.qualidade_media = 0.0
        
    async def refletir_sobre_raciocinio(self, pensamentos: List[Pensamento]) -> List[str]:
        """Analisa a qualidade do pr√≥prio racioc√≠nio"""
        reflexoes = []
        
        # An√°lise de diversidade de perspectivas
        tipos_presentes = set(p.tipo for p in pensamentos)
        if len(tipos_presentes) < 3:
            reflexoes.append("METACOGNI√á√ÉO: Precisamos de mais diversidade de perspectivas")
        
        # An√°lise de qualidade dos argumentos
        confianca_media = sum(p.confianca for p in pensamentos) / len(pensamentos)
        if confianca_media < 0.6:
            reflexoes.append("METACOGNI√á√ÉO: Baixa confian√ßa geral, precisamos de mais evid√™ncias")
        
        # An√°lise de conex√µes entre ideias
        conectividade = sum(len(p.conectado_com) for p in pensamentos) / len(pensamentos)
        if conectividade < 1.0:
            reflexoes.append("METACOGNI√á√ÉO: Ideias muito isoladas, buscar mais conex√µes")
        
        # An√°lise temporal
        tempo_reflexao = (pensamentos[-1].timestamp - pensamentos[0].timestamp).total_seconds()
        if tempo_reflexao < 5:
            reflexoes.append("METACOGNI√á√ÉO: Racioc√≠nio muito r√°pido, pode estar superficial")
        
        return reflexoes
    
    def identificar_padroes(self, ciclo: CicloReflexao) -> Dict:
        """Identifica padr√µes no racioc√≠nio"""
        padroes = {
            "tipos_favoritos": {},
            "tempo_medio": 0,
            "qualidade_tendencia": []
        }
        
        # Registrar este ciclo
        self.historico_reflexoes.append(ciclo)
        
        # Analisar √∫ltimos 10 ciclos
        recentes = self.historico_reflexoes[-10:]
        
        # Tipos de pensamento mais usados
        for ciclo_hist in recentes:
            for pensamento in ciclo_hist.pensamentos:
                tipo = pensamento.tipo.value
                padroes["tipos_favoritos"][tipo] = padroes["tipos_favoritos"].get(tipo, 0) + 1
        
        # Tempo m√©dio
        padroes["tempo_medio"] = sum(c.tempo_execucao for c in recentes) / len(recentes)
        
        # Tend√™ncia de qualidade
        padroes["qualidade_tendencia"] = [c.confianca_final for c in recentes]
        
        return padroes


class AprendizadoTemporal:
    """Sistema de aprendizado que considera contexto temporal"""
    
    def __init__(self):
        self.contextos_temporais = {
            "manha": {"peso_analitico": 1.2, "peso_criativo": 0.8},
            "tarde": {"peso_analitico": 1.0, "peso_criativo": 1.0}, 
            "noite": {"peso_analitico": 0.8, "peso_criativo": 1.3},
            "madrugada": {"peso_analitico": 0.7, "peso_criativo": 1.5}
        }
        
    def get_contexto_atual(self) -> str:
        """Determina contexto temporal atual"""
        hora = datetime.now().hour
        if 5 <= hora < 12:
            return "manha"
        elif 12 <= hora < 18:
            return "tarde"
        elif 18 <= hora < 24:
            return "noite"
        else:
            return "madrugada"
    
    def ajustar_pensamento(self, pensamento: Pensamento) -> Pensamento:
        """Ajusta pensamento baseado no contexto temporal"""
        contexto = self.get_contexto_atual()
        pesos = self.contextos_temporais[contexto]
        
        # Ajustar confian√ßa baseado no contexto
        if pensamento.tipo == TipoPensamento.ANALITICO:
            pensamento.confianca *= pesos["peso_analitico"]
        elif pensamento.tipo == TipoPensamento.CRIATIVO:
            pensamento.confianca *= pesos["peso_criativo"]
        
        pensamento.confianca = min(1.0, pensamento.confianca)
        return pensamento


class SwarmIntelligence:
    """Sistema de intelig√™ncia coletiva com m√∫ltiplos processadores"""
    
    def __init__(self):
        self.perspectivas_ativas = []
        self.threshold_convergencia = 0.8
        
    async def processar_swarm(self, entrada: str, contexto: Dict) -> SwarmResult:
        """Processa entrada com m√∫ltiplas perspectivas paralelas"""
        
        # Definir perspectivas para processar
        perspectivas = [
            {"nome": "analista", "foco": "dados e evid√™ncias"},
            {"nome": "criativo", "foco": "possibilidades e inova√ß√£o"},
            {"nome": "critico", "foco": "problemas e limita√ß√µes"},
            {"nome": "pragmatico", "foco": "implementa√ß√£o e resultados"},
            {"nome": "holistico", "foco": "vis√£o sist√™mica e contexto"}
        ]
        
        # Processar perspectivas em paralelo
        tasks = []
        for perspectiva in perspectivas:
            task = self._processar_perspectiva(entrada, perspectiva, contexto)
            tasks.append(task)
        
        resultados = await asyncio.gather(*tasks)
        
        # Analisar converg√™ncia
        convergencia = self._calcular_convergencia(resultados)
        
        # Gerar consenso
        consenso = self._gerar_consenso(resultados)
        
        # Identificar dissid√™ncias
        dissidencias = self._identificar_dissidencias(resultados)
        
        # Buscar insights emergentes
        insights = self._buscar_insights_emergentes(resultados)
        
        return SwarmResult(
            perspectivas=resultados,
            convergencia=convergencia,
            consenso=consenso,
            dissidencias=dissidencias,
            insights_emergentes=insights
        )
    
    async def _processar_perspectiva(self, entrada: str, perspectiva: Dict, contexto: Dict) -> Dict:
        """Processa entrada de uma perspectiva espec√≠fica"""
        # Simular processamento espec√≠fico da perspectiva
        await asyncio.sleep(0.1)  # Simular tempo de processamento
        
        resultado = {
            "nome": perspectiva["nome"],
            "foco": perspectiva["foco"],
            "analise": f"An√°lise {perspectiva['nome']} de: {entrada[:50]}...",
            "conclusao": f"Conclus√£o da perspectiva {perspectiva['nome']}",
            "confianca": 0.7 + (hash(perspectiva["nome"]) % 30) / 100,
            "evidencias": [f"Evid√™ncia {i} da perspectiva {perspectiva['nome']}" for i in range(2)],
            "recomendacoes": [f"Recomenda√ß√£o {i} da perspectiva {perspectiva['nome']}" for i in range(2)]
        }
        
        return resultado
    
    def _calcular_convergencia(self, resultados: List[Dict]) -> float:
        """Calcula n√≠vel de converg√™ncia entre perspectivas"""
        # Algoritmo simplificado de converg√™ncia
        confidencias = [r["confianca"] for r in resultados]
        convergencia = 1.0 - (max(confidencias) - min(confidencias))
        return max(0.0, min(1.0, convergencia))
    
    def _gerar_consenso(self, resultados: List[Dict]) -> str:
        """Gera consenso baseado nas perspectivas"""
        # Ponderar por confian√ßa
        peso_total = sum(r["confianca"] for r in resultados)
        
        consenso_partes = []
        for resultado in resultados:
            peso = resultado["confianca"] / peso_total
            if peso > 0.15:  # S√≥ incluir perspectivas significativas
                consenso_partes.append(f"[{resultado['nome']}]: {resultado['conclusao']}")
        
        return " | ".join(consenso_partes)
    
    def _identificar_dissidencias(self, resultados: List[Dict]) -> List[str]:
        """Identifica pontos de diverg√™ncia entre perspectivas"""
        dissidencias = []
        
        # Buscar perspectivas com baixa confian√ßa
        for resultado in resultados:
            if resultado["confianca"] < 0.6:
                dissidencias.append(f"Baixa confian√ßa em {resultado['nome']}: {resultado['conclusao']}")
        
        return dissidencias
    
    def _buscar_insights_emergentes(self, resultados: List[Dict]) -> List[str]:
        """Busca insights que emergem da combina√ß√£o de perspectivas"""
        insights = []
        
        # Combinar evid√™ncias de m√∫ltiplas perspectivas
        todas_evidencias = []
        for resultado in resultados:
            todas_evidencias.extend(resultado["evidencias"])
        
        # Buscar padr√µes emergentes (simplificado)
        palavras_comuns = {}
        for evidencia in todas_evidencias:
            for palavra in evidencia.split():
                if len(palavra) > 4:  # Palavras significativas
                    palavras_comuns[palavra] = palavras_comuns.get(palavra, 0) + 1
        
        # Gerar insights baseados em padr√µes
        for palavra, freq in palavras_comuns.items():
            if freq >= 2:
                insights.append(f"Insight emergente: '{palavra}' aparece em m√∫ltiplas perspectivas")
        
        return insights


class RaciocinioContinuoV3(BaseAgentV2):
    """
    üß† RACIOC√çNIO CONT√çNUO v3.0 - METACOGNITIVO
    
    Sistema avan√ßado de racioc√≠nio com:
    - M√∫ltiplas perspectivas paralelas
    - Metacogni√ß√£o recursiva
    - Aprendizado temporal
    - Intelig√™ncia coletiva (swarm)
    - Valida√ß√£o futura preditiva
    """
    
    def __init__(self, **kwargs):
        super().__init__(
            name="RaciocinioContinuoV3",
            version="3.0",
            agent_type="raciocinio_metacognitivo",
            primary_function="raciocinio_avancado",
            capabilities=[
                "pensamento_paralelo", "metacognicao", "swarm_intelligence",
                "aprendizado_temporal", "validacao_preditiva", "convergencia_automatica"
            ],
            **kwargs
        )
        
        # Componentes do sistema
        self.meta_reflexor = MetaReflexor()
        self.aprendizado_temporal = AprendizadoTemporal()
        self.swarm_intelligence = SwarmIntelligence()
        
        # Estado do sistema
        self.ciclos_ativos = []
        self.historico_completo = []
        self.padroes_globais = {}
        
        # Configura√ß√µes
        self.max_ciclos_paralelos = 3
        self.timeout_ciclo = 30.0  # segundos
        self.min_confianca = 0.6
        
        logger.info("üß† Racioc√≠nioContinuoV3 inicializado com metacogni√ß√£o avan√ßada")
    
    def _processar_interno(self, entrada: str, contexto: Optional[Dict] = None) -> str:
        """Implementa√ß√£o do m√©todo abstrato"""
        return asyncio.run(self.processar_com_raciocinio(entrada, contexto or {}))
    
    async def processar_com_raciocinio(self, entrada: str, contexto: Dict) -> str:
        """Processo principal do racioc√≠nio cont√≠nuo metacognitivo"""
        try:
            inicio = time.time()
            
            # 1. PENSAR (m√∫ltiplas perspectivas paralelas)
            pensamentos = await self._pensar_paralelo(entrada, contexto)
            
            # 2. REFLETIR (com metacogni√ß√£o)
            reflexoes = await self._refletir_metacognitivo(pensamentos, contexto)
            
            # 3. CORRIGIR/REFAZER (adaptativo)
            correcoes = await self._corrigir_adaptativo(reflexoes, contexto)
            
            # 4. VALIDA√á√ÉO FUTURA (preditiva)
            validacao = await self._validar_futuro(correcoes, contexto)
            
            # 5. SWARM CONVERGENCE (intelig√™ncia coletiva)
            resultado_final = await self._convergir_swarm(validacao, contexto)
            
            # 6. REGISTRAR CICLO COMPLETO
            tempo_total = time.time() - inicio
            ciclo = await self._registrar_ciclo(
                entrada, pensamentos, reflexoes, correcoes, 
                validacao, resultado_final, tempo_total
            )
            
            # 7. APRENDIZADO CONT√çNUO
            await self._aprender_do_ciclo(ciclo)
            
            return self._formatar_resultado_final(resultado_final, ciclo)
            
        except Exception as e:
            logger.error(f"‚ùå Erro no racioc√≠nio cont√≠nuo: {e}")
            return f"‚ùå Erro no processamento metacognitivo: {str(e)}"
    
    async def _pensar_paralelo(self, entrada: str, contexto: Dict) -> List[Pensamento]:
        """Fase 1: Pensamento com m√∫ltiplas perspectivas paralelas"""
        pensamentos = []
        
        # Gerar diferentes tipos de pensamento
        tipos_pensamento = [
            TipoPensamento.ANALITICO,
            TipoPensamento.CRIATIVO,
            TipoPensamento.CRITICO,
            TipoPensamento.INTUITIVO,
            TipoPensamento.SIST√äMICO
        ]
        
        # Processar cada tipo em paralelo
        tasks = []
        for tipo in tipos_pensamento:
            task = self._gerar_pensamento_tipo(entrada, tipo, contexto)
            tasks.append(task)
        
        pensamentos_raw = await asyncio.gather(*tasks)
        
        # Aplicar ajustes temporais
        for pensamento in pensamentos_raw:
            pensamento_ajustado = self.aprendizado_temporal.ajustar_pensamento(pensamento)
            pensamentos.append(pensamento_ajustado)
        
        # Conectar pensamentos relacionados
        await self._conectar_pensamentos(pensamentos)
        
        return pensamentos
    
    async def _gerar_pensamento_tipo(self, entrada: str, tipo: TipoPensamento, contexto: Dict) -> Pensamento:
        """Gera pensamento de um tipo espec√≠fico"""
        timestamp = datetime.now()
        
        # L√≥gica espec√≠fica por tipo
        if tipo == TipoPensamento.ANALITICO:
            conteudo = f"An√°lise sistem√°tica de: {entrada}"
            evidencias = ["Dados hist√≥ricos", "M√©tricas dispon√≠veis"]
            contrapontos = ["Limita√ß√µes dos dados", "Vi√©s de amostragem"]
            confianca = 0.8
            
        elif tipo == TipoPensamento.CRIATIVO:
            conteudo = f"Explora√ß√£o criativa de: {entrada}"
            evidencias = ["Analogias inovadoras", "Conex√µes inesperadas"]
            contrapontos = ["Falta de valida√ß√£o", "Alto risco"]
            confianca = 0.6
            
        elif tipo == TipoPensamento.CRITICO:
            conteudo = f"Avalia√ß√£o cr√≠tica de: {entrada}"
            evidencias = ["Problemas identificados", "Limita√ß√µes claras"]
            contrapontos = ["Poss√≠vel pessimismo", "Falta de alternativas"]
            confianca = 0.7
            
        elif tipo == TipoPensamento.INTUITIVO:
            conteudo = f"Insight intuitivo sobre: {entrada}"
            evidencias = ["Padr√µes sutis", "Experi√™ncia anterior"]
            contrapontos = ["Dif√≠cil de verificar", "Subjetivo"]
            confianca = 0.5
            
        else:  # SIST√äMICO
            conteudo = f"Vis√£o sist√™mica de: {entrada}"
            evidencias = ["Conex√µes m√∫ltiplas", "Impacto hol√≠stico"]
            contrapontos = ["Complexidade alta", "Dif√≠cil implementa√ß√£o"]
            confianca = 0.7
        
        return Pensamento(
            id=hashlib.md5(f"{tipo.value}{timestamp}".encode()).hexdigest()[:8],
            tipo=tipo,
            conteudo=conteudo,
            confianca=confianca,
            evidencias=evidencias,
            contrapontos=contrapontos,
            timestamp=timestamp,
            origem=f"perspectiva_{tipo.value}",
            conectado_com=[]
        )
    
    async def _conectar_pensamentos(self, pensamentos: List[Pensamento]):
        """Identifica e conecta pensamentos relacionados"""
        for i, pensamento1 in enumerate(pensamentos):
            for j, pensamento2 in enumerate(pensamentos[i+1:], i+1):
                # Verificar similaridade (algoritmo simplificado)
                if self._calcular_similaridade(pensamento1, pensamento2) > 0.3:
                    pensamento1.conectado_com.append(pensamento2.id)
                    pensamento2.conectado_com.append(pensamento1.id)
    
    def _calcular_similaridade(self, p1: Pensamento, p2: Pensamento) -> float:
        """Calcula similaridade entre dois pensamentos"""
        # Algoritmo simplificado baseado em palavras comuns
        palavras1 = set(p1.conteudo.lower().split())
        palavras2 = set(p2.conteudo.lower().split())
        
        intersecao = len(palavras1.intersection(palavras2))
        uniao = len(palavras1.union(palavras2))
        
        return intersecao / uniao if uniao > 0 else 0.0
    
    async def _refletir_metacognitivo(self, pensamentos: List[Pensamento], contexto: Dict) -> List[str]:
        """Fase 2: Reflex√£o metacognitiva sobre o racioc√≠nio"""
        reflexoes = []
        
        # Metacogni√ß√£o sobre qualidade do racioc√≠nio
        reflexoes_meta = await self.meta_reflexor.refletir_sobre_raciocinio(pensamentos)
        reflexoes.extend(reflexoes_meta)
        
        # An√°lise de coer√™ncia interna
        coerencia = self._analisar_coerencia(pensamentos)
        if coerencia < 0.7:
            reflexoes.append("REFLEX√ÉO: Baixa coer√™ncia detectada, revisar argumentos")
        
        # An√°lise de completude
        completude = self._analisar_completude(pensamentos)
        if completude < 0.8:
            reflexoes.append("REFLEX√ÉO: An√°lise incompleta, explorar mais aspectos")
        
        # Reflex√£o sobre pr√≥prios vieses
        reflexoes.append("REFLEX√ÉO: Verificando vieses cognitivos pr√≥prios...")
        
        return reflexoes
    
    def _analisar_coerencia(self, pensamentos: List[Pensamento]) -> float:
        """Analisa coer√™ncia interna entre pensamentos"""
        if not pensamentos:
            return 0.0
        
        # Verificar consist√™ncia de evid√™ncias
        todas_evidencias = []
        for pensamento in pensamentos:
            todas_evidencias.extend(pensamento.evidencias)
        
        # Calcular coer√™ncia (simplificado)
        evidencias_unicas = set(todas_evidencias)
        coerencia = len(evidencias_unicas) / len(todas_evidencias) if todas_evidencias else 0.0
        
        return min(1.0, max(0.0, coerencia))
    
    def _analisar_completude(self, pensamentos: List[Pensamento]) -> float:
        """Analisa completude da an√°lise"""
        tipos_presentes = set(p.tipo for p in pensamentos)
        completude = len(tipos_presentes) / len(TipoPensamento)
        return completude
    
    async def _corrigir_adaptativo(self, reflexoes: List[str], contexto: Dict) -> List[str]:
        """Fase 3: Corre√ß√£o adaptativa baseada nas reflex√µes"""
        correcoes = []
        
        for reflexao in reflexoes:
            if "diversidade" in reflexao.lower():
                correcoes.append("CORRE√á√ÉO: Adicionando perspectiva paradoxal")
                # Aqui adicionar√≠amos um pensamento paradoxal
                
            elif "confian√ßa" in reflexao.lower():
                correcoes.append("CORRE√á√ÉO: Buscando evid√™ncias adicionais")
                
            elif "conex√µes" in reflexao.lower():
                correcoes.append("CORRE√á√ÉO: Fortalecendo rela√ß√µes entre ideias")
                
            elif "superficial" in reflexao.lower():
                correcoes.append("CORRE√á√ÉO: Aprofundando an√°lise cr√≠tica")
        
        return correcoes
    
    async def _validar_futuro(self, correcoes: List[str], contexto: Dict) -> Dict:
        """Fase 4: Valida√ß√£o futura preditiva"""
        validacao = {
            "cenarios_futuros": [],
            "robustez": 0.0,
            "adaptabilidade": 0.0,
            "sustentabilidade": 0.0
        }
        
        # Simular cen√°rios futuros
        cenarios = [
            "Cen√°rio otimista: Condi√ß√µes ideais",
            "Cen√°rio pessimista: M√∫ltiplas dificuldades", 
            "Cen√°rio realista: Condi√ß√µes normais"
        ]
        
        validacao["cenarios_futuros"] = cenarios
        validacao["robustez"] = 0.8  # Simplificado
        validacao["adaptabilidade"] = 0.7
        validacao["sustentabilidade"] = 0.75
        
        return validacao
    
    async def _convergir_swarm(self, validacao: Dict, contexto: Dict) -> SwarmResult:
        """Fase 5: Converg√™ncia via intelig√™ncia coletiva"""
        entrada_convergencia = f"Valida√ß√£o: {validacao}"
        return await self.swarm_intelligence.processar_swarm(entrada_convergencia, contexto)
    
    async def _registrar_ciclo(self, entrada: str, pensamentos: List[Pensamento], 
                              reflexoes: List[str], correcoes: List[str],
                              validacao: Dict, resultado: SwarmResult, 
                              tempo: float) -> CicloReflexao:
        """Registra ciclo completo de racioc√≠nio"""
        
        ciclo = CicloReflexao(
            id=hashlib.md5(f"{entrada}{time.time()}".encode()).hexdigest()[:8],
            entrada_original=entrada,
            pensamentos=pensamentos,
            reflexoes_meta=reflexoes,
            correcoes=correcoes,
            validacoes=[str(validacao)],
            resultado_final=resultado.consenso,
            confianca_final=resultado.convergencia,
            tempo_execucao=tempo,
            aprendizados=[],
            estado=EstadoReflexao.FINALIZADO
        )
        
        self.historico_completo.append(ciclo)
        return ciclo
    
    async def _aprender_do_ciclo(self, ciclo: CicloReflexao):
        """Aprende do ciclo para melhorar futuras execu√ß√µes"""
        # Identificar padr√µes
        padroes = self.meta_reflexor.identificar_padroes(ciclo)
        self.padroes_globais.update(padroes)
        
        # Extrair aprendizados
        aprendizados = []
        
        if ciclo.confianca_final > 0.8:
            aprendizados.append("Ciclo de alta qualidade, replicar abordagem")
        
        if ciclo.tempo_execucao < 5:
            aprendizados.append("Processamento r√°pido mantendo qualidade")
        
        if len(ciclo.pensamentos) > 4:
            aprendizados.append("Diversidade de perspectivas bem-sucedida")
        
        ciclo.aprendizados = aprendizados
        
        # Registrar evento
        self._registrar_evento("ciclo_completado", {
            "confianca": ciclo.confianca_final,
            "tempo": ciclo.tempo_execucao,
            "num_pensamentos": len(ciclo.pensamentos),
            "aprendizados": len(aprendizados)
        })
    
    def _formatar_resultado_final(self, resultado: SwarmResult, ciclo: CicloReflexao) -> str:
        """Formata resultado final para o usu√°rio"""
        return f"""
üß† **Racioc√≠nio Cont√≠nuo v3.0 - Resultado Metacognitivo**

üìù **Consenso Final:**
{resultado.consenso}

üîç **Insights Emergentes:**
{chr(10).join(f"‚Ä¢ {insight}" for insight in resultado.insights_emergentes[:3])}

üìä **M√©tricas do Racioc√≠nio:**
‚Ä¢ Converg√™ncia: {resultado.convergencia:.1%}
‚Ä¢ Confian√ßa Final: {ciclo.confianca_final:.1%}
‚Ä¢ Tempo de Processamento: {ciclo.tempo_execucao:.2f}s
‚Ä¢ Perspectivas Analisadas: {len(ciclo.pensamentos)}

üéØ **Aprendizados do Ciclo:**
{chr(10).join(f"‚Ä¢ {aprendizado}" for aprendizado in ciclo.aprendizados)}

‚ö° **Estado da Metacogni√ß√£o:** {ciclo.estado.value.upper()}
"""


def criar_raciocinio_continuo() -> RaciocinioContinuoV3:
    """Factory function para criar Racioc√≠nioContinuoV3"""
    return RaciocinioContinuoV3()