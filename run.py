#!/usr/bin/env python3
"""
GPT MESTRE AUT√îNOMO - Script de Execu√ß√£o Principal
"""

import os
import sys
import subprocess
from pathlib import Path

def check_requirements():
    """Verifica se os requisitos est√£o instalados"""
    print("üîç Verificando depend√™ncias...")
    
    try:
        import streamlit
        import anthropic
        import langchain
        import langchain_anthropic
        import chromadb
        import loguru
        print("‚úÖ Depend√™ncias principais encontradas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üì¶ Execute: pip install -r requirements.txt")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe e est√° configurado"""
    print("üîç Verificando configura√ß√£o...")
    
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("üìù Copie .env.example para .env e configure suas chaves de API")
        return False
    
    # Verifica se tem ANTHROPIC_API_KEY
    with open(env_file, 'r') as f:
        content = f.read()
        if "ANTHROPIC_API_KEY=sk-ant-" not in content:
            print("‚ùå ANTHROPIC_API_KEY n√£o configurada no arquivo .env")
            print("üîë Configure sua chave da Anthropic no arquivo .env")
            return False
    
    print("‚úÖ Configura√ß√£o encontrada")
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("üìÅ Criando diret√≥rios...")
    
    dirs = ["logs", "memory", "agents", "utils"]
    for dir_name in dirs:
        Path(dir_name).mkdir(exist_ok=True)
    
    print("‚úÖ Diret√≥rios criados")

def run_streamlit():
    """Executa a aplica√ß√£o Streamlit"""
    print("üöÄ Iniciando GPT Mestre Aut√¥nomo...")
    print("üåê A aplica√ß√£o ser√° aberta no navegador em http://localhost:8501")
    print("‚èπÔ∏è  Pressione Ctrl+C para parar")
    
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "app.py",
            "--server.port=8501",
            "--server.address=0.0.0.0",
            "--theme.base=dark"
        ])
    except KeyboardInterrupt:
        print("\nüëã GPT Mestre Aut√¥nomo finalizado!")
    except Exception as e:
        print(f"‚ùå Erro ao executar: {e}")

def show_help():
    """Mostra informa√ß√µes de ajuda"""
    help_text = """
    ü§ñ GPT MESTRE AUT√îNOMO - Sistema de Agentes Inteligentes
    
    COMANDOS:
    python run.py          - Executa a aplica√ß√£o
    python run.py --help   - Mostra esta ajuda
    python run.py --check  - Verifica configura√ß√£o
    python run.py --setup  - Configura√ß√£o inicial
    
    REQUISITOS:
    1. Python 3.8+
    2. pip install -r requirements.txt
    3. Arquivo .env com ANTHROPIC_API_KEY configurada
    
    PRIMEIRA EXECU√á√ÉO:
    1. python run.py --setup
    2. Configure seu .env com a chave da Anthropic
    3. python run.py
    
    ESTRUTURA DO PROJETO:
    üìÅ agents/       - Agentes do sistema (Carlos, Reflexor, etc.)
    üìÅ utils/        - Utilit√°rios (logger, etc.)
    üìÅ memory/       - Sistema de mem√≥ria vetorial
    üìÅ logs/         - Logs do sistema
    üìÑ config.py     - Configura√ß√µes centralizadas
    üìÑ app.py        - Interface Streamlit principal
    
    PROBLEMAS COMUNS:
    - "Module not found": Execute pip install -r requirements.txt
    - "API key missing": Configure ANTHROPIC_API_KEY no .env
    - "Permission denied": Execute como administrador/sudo
    
    SUPORTE:
    - Logs dispon√≠veis em logs/gpt_mestre.log
    - Debug mode: configure DEBUG=True no .env
    """
    print(help_text)

def setup_initial():
    """Configura√ß√£o inicial do projeto"""
    print("üîß Configura√ß√£o inicial do GPT Mestre Aut√¥nomo...")
    
    # Cria diret√≥rios
    create_directories()
    
    # Verifica se .env.example existe
    if not Path(".env.example").exists():
        print("‚ùå Arquivo .env.example n√£o encontrado!")
        return False
    
    # Copia .env.example para .env se n√£o existir
    env_file = Path(".env")
    if not env_file.exists():
        import shutil
        shutil.copy(".env.example", ".env")
        print("üìù Arquivo .env criado a partir do .env.example")
        print("üîë CONFIGURE sua ANTHROPIC_API_KEY no arquivo .env antes de continuar!")
    else:
        print("‚úÖ Arquivo .env j√° existe")
    
    # Verifica depend√™ncias
    if not check_requirements():
        print("üì¶ Execute: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Configura√ß√£o inicial conclu√≠da!")
    print("üîë Pr√≥ximo passo: Configure ANTHROPIC_API_KEY no arquivo .env")
    print("üöÄ Depois execute: python run.py")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ GPT MESTRE AUT√îNOMO v1.0.0")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "--help":
            show_help()
            return
        elif command == "--check":
            print("üîç Verificando sistema...")
            deps_ok = check_requirements()
            env_ok = check_env_file()
            if deps_ok and env_ok:
                print("‚úÖ Sistema pronto para execu√ß√£o!")
            else:
                print("‚ùå Sistema n√£o est√° pronto. Verifique os erros acima.")
            return
        elif command == "--setup":
            setup_initial()
            return
        else:
            print(f"‚ùå Comando desconhecido: {command}")
            print("Use --help para ver comandos dispon√≠veis")
            return
    
    # Execu√ß√£o normal
    if not check_requirements():
        print("Execute: python run.py --setup")
        return
    
    if not check_env_file():
        print("Configure o arquivo .env antes de continuar")
        return
    
    create_directories()
    run_streamlit()

if __name__ == "__main__":
    main()