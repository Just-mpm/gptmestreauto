# GPT MESTRE AUT√îNOMO - Makefile
# Comandos facilitados para desenvolvimento e execu√ß√£o

.PHONY: help install setup run check clean test lint format

# Configura√ß√µes
PYTHON := python
PIP := pip
STREAMLIT := streamlit

# Comando padr√£o
help:
	@echo "ü§ñ GPT MESTRE AUT√îNOMO - Comandos Dispon√≠veis:"
	@echo ""
	@echo "üì¶ INSTALA√á√ÉO E CONFIGURA√á√ÉO:"
	@echo "  make install    - Instala todas as depend√™ncias"
	@echo "  make setup      - Configura√ß√£o inicial completa"
	@echo "  make check      - Verifica se tudo est√° configurado"
	@echo ""
	@echo "üöÄ EXECU√á√ÉO:"
	@echo "  make run        - Executa a aplica√ß√£o principal"
	@echo "  make dev        - Executa em modo desenvolvimento"
	@echo "  make carlos     - Testa o agente Carlos diretamente"
	@echo ""
	@echo "üßπ MANUTEN√á√ÉO:"
	@echo "  make clean      - Limpa arquivos tempor√°rios e logs"
	@echo "  make clean-all  - Limpeza completa (incluindo mem√≥ria)"
	@echo "  make reset      - Reset completo do sistema"
	@echo ""
	@echo "üß™ DESENVOLVIMENTO:"
	@echo "  make test       - Executa testes"
	@echo "  make lint       - Verifica qualidade do c√≥digo"
	@echo "  make format     - Formata c√≥digo automaticamente"
	@echo "  make docs       - Gera documenta√ß√£o"
	@echo ""
	@echo "üìä MONITORAMENTO:"
	@echo "  make logs       - Mostra logs em tempo real"
	@echo "  make status     - Status do sistema"
	@echo "  make backup     - Backup da mem√≥ria e configura√ß√µes"

# Instala√ß√£o e configura√ß√£o
install:
	@echo "üì¶ Instalando depend√™ncias..."
	$(PIP) install -r requirements.txt
	@echo "‚úÖ Depend√™ncias instaladas!"

setup:
	@echo "üîß Configura√ß√£o inicial..."
	$(PYTHON) run.py --setup
	@echo "‚úÖ Configura√ß√£o conclu√≠da!"
	@echo "üîë Configure sua OPENAI_API_KEY no arquivo .env"

check:
	@echo "üîç Verificando sistema..."
	$(PYTHON) run.py --check

# Execu√ß√£o
run:
	@echo "üöÄ Iniciando GPT Mestre Aut√¥nomo..."
	$(PYTHON) run.py

dev:
	@echo "üõ†Ô∏è  Iniciando em modo desenvolvimento..."
	@echo "DEBUG=True" > .env.dev
	@cat .env >> .env.dev
	DEBUG=True $(PYTHON) run.py

carlos:
	@echo "ü§ñ Testando agente Carlos..."
	$(PYTHON) -c "import asyncio; from agents.carlos import create_carlos; carlos = create_carlos(); print('‚úÖ Carlos inicializado com sucesso!')"

# Testes
test:
	@echo "üß™ Executando testes..."
	$(PYTHON) -m pytest tests/ -v || echo "‚ö†Ô∏è  Testes n√£o implementados ainda"

lint:
	@echo "üîç Verificando qualidade do c√≥digo..."
	$(PYTHON) -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è  flake8 n√£o instalado"

format:
	@echo "‚ú® Formatando c√≥digo..."
	$(PYTHON) -m black . || echo "‚ö†Ô∏è  black n√£o instalado"

# Limpeza
clean:
	@echo "üßπ Limpando arquivos tempor√°rios..."
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type f -name ".DS_Store" -delete 2>/dev/null || true
	rm -f logs/*.log 2>/dev/null || true
	@echo "‚úÖ Limpeza conclu√≠da!"

clean-all: clean
	@echo "üóëÔ∏è  Limpeza completa..."
	rm -rf memory/chroma_db/ 2>/dev/null || true
	rm -rf .streamlit/ 2>/dev/null || true
	rm -f .env.dev 2>/dev/null || true
	@echo "‚úÖ Limpeza completa conclu√≠da!"

reset: clean-all
	@echo "üîÑ Reset completo do sistema..."
	@echo "‚ö†Ô∏è  Isso ir√° apagar TODA a mem√≥ria e configura√ß√µes!"
	@read -p "Confirmar reset? (y/N): " confirm && [ "$confirm" = "y" ] || exit 1
	rm -rf memory/ logs/ .env 2>/dev/null || true
	$(MAKE) setup
	@echo "‚úÖ Sistema resetado!"

# Monitoramento
logs:
	@echo "üìä Logs em tempo real (Ctrl+C para sair)..."
	tail -f logs/gpt_mestre.log 2>/dev/null || echo "‚ùå Arquivo de log n√£o encontrado"

status:
	@echo "üìä Status do GPT Mestre Aut√¥nomo:"
	@echo ""
	@echo "üìÅ Estrutura:"
	@ls -la | grep -E "(agents|utils|memory|logs)" || echo "  Diret√≥rios n√£o criados ainda"
	@echo ""
	@echo "üìù Logs:"
	@ls -la logs/ 2>/dev/null || echo "  Nenhum log encontrado"
	@echo ""
	@echo "üß† Mem√≥ria:"
	@ls -la memory/ 2>/dev/null || echo "  Mem√≥ria n√£o inicializada"
	@echo ""
	@echo "‚öôÔ∏è  Configura√ß√£o:"
	@test -f .env && echo "  ‚úÖ .env configurado" || echo "  ‚ùå .env n√£o encontrado"

backup:
	@echo "üíæ Criando backup..."
	@mkdir -p backups/$(shell date +%Y%m%d_%H%M%S)
	@cp -r memory/ backups/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo "Mem√≥ria n√£o encontrada"
	@cp -r logs/ backups/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo "Logs n√£o encontrados"
	@cp .env backups/$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || echo ".env n√£o encontrado"
	@echo "‚úÖ Backup criado em backups/"

docs:
	@echo "üìö Gerando documenta√ß√£o..."
	@echo "README.md j√° dispon√≠vel!"
	@echo "üìñ Para ver a documenta√ß√£o completa:"
	@echo "   cat README.md"

# Comandos de desenvolvimento avan√ßado
install-dev: install
	@echo "üõ†Ô∏è  Instalando depend√™ncias de desenvolvimento..."
	$(PIP) install pytest black flake8 mypy
	@echo "‚úÖ Ambiente de desenvolvimento configurado!"

requirements-update:
	@echo "üì¶ Atualizando requirements.txt..."
	$(PIP) freeze > requirements.txt
	@echo "‚úÖ Requirements atualizados!"

# Comandos para Docker (futuro)
docker-build:
	@echo "üê≥ Construindo imagem Docker..."
	@echo "‚ö†Ô∏è  Docker n√£o implementado ainda"

docker-run:
	@echo "üê≥ Executando container Docker..."
	@echo "‚ö†Ô∏è  Docker n√£o implementado ainda"

# Informa√ß√µes do sistema
info:
	@echo "‚ÑπÔ∏è  Informa√ß√µes do Sistema:"
	@echo "Python: $(shell python --version)"
	@echo "Pip: $(shell pip --version)"
	@echo "Diret√≥rio: $(shell pwd)"
	@echo "Usu√°rio: $(shell whoami)"
	@echo "Data: $(shell date)"

# Comando para primeira instala√ß√£o completa
first-time: install setup
	@echo ""
	@echo "üéâ INSTALA√á√ÉO COMPLETA!"
	@echo ""
	@echo "üìã Pr√≥ximos passos:"
	@echo "1. Configure sua OPENAI_API_KEY no arquivo .env"
	@echo "2. Execute: make run"
	@echo "3. Acesse: http://localhost:8501"
	@echo ""
	@echo "üí° Comandos √∫teis:"
	@echo "   make help   - Ver todos os comandos"
	@echo "   make check  - Verificar configura√ß√£o"
	@echo "   make status - Ver status do sistema"